Source code:
The
module provides Pythonâs main facilities for dealing with various
types of I/O.  There are three main types of I/O:
text I/O
,
binary I/O
and
raw I/O
.  These are generic categories, and various backing stores can
be used for each of them.  A concrete object belonging to any of these
categories is called a
.  Other common terms are
stream
and
file-like object
.
Independent of its category, each concrete stream object will also have
various capabilities: it can be read-only, write-only, or read-write. It can
also allow arbitrary random access (seeking forwards or backwards to any
location), or only sequential access (for example in the case of a socket or
pipe).
All streams are careful about the type of data you give to them.  For example
giving a
object to the
write()
method of a binary stream
will raise a
.  So will giving a
object to the
write()
method of a text stream.
Changed in version 3.3:
Operations that used to raise
now raise
, since
is now an alias of
.
Text I/O expects and produces
objects.  This means that whenever
the backing store is natively made of bytes (such as in the case of a file),
encoding and decoding of data is made transparently as well as optional
translation of platform-specific newline characters.
The easiest way to create a text stream is with
, optionally
specifying an encoding:
f
=
open
(
"myfile.txt"
,
"r"
,
encoding
=
"utf-8"
)
In-memory text streams are also available as
objects:
f
=
io
.
StringIO
(
"some initial text data"
)
The text stream API is described in detail in the documentation of
.
Binary I/O (also called
buffered I/O
) expects
and produces
objects.  No encoding, decoding, or newline translation is performed.  This
category of streams can be used for all kinds of non-text data, and also when
manual control over the handling of text data is desired.
The easiest way to create a binary stream is with
with
'b'
in
the mode string:
f
=
open
(
"myfile.jpg"
,
"rb"
)
In-memory binary streams are also available as
objects:
f
=
io
.
BytesIO
(
b
"some initial binary data:
\x00\x01
"
)
The binary stream API is described in detail in the docs of
.
Other library modules may provide additional ways to create text or binary
streams.  See
for example.
Raw I/O (also called
unbuffered I/O
) is generally used as a low-level
building-block for binary and text streams; it is rarely useful to directly
manipulate a raw stream from user code.  Nevertheless, you can create a raw
stream by opening a file in binary mode with buffering disabled:
f
=
open
(
"myfile.jpg"
,
"rb"
,
buffering
=
0
)
The raw stream API is described in detail in the docs of
.
The default encoding of
and
is
locale-specific (
).
However, many developers forget to specify the encoding when opening text files
encoded in UTF-8 (e.g. JSON, TOML, Markdown, etcâ¦) since most Unix
platforms use UTF-8 locale by default. This causes bugs because the locale
encoding is not UTF-8 for most Windows users. For example:
# May not work on Windows when non-ASCII characters in the file.
with
open
(
"README.md"
)
as
f
:
long_description
=
f
.
read
()
Accordingly, it is highly recommended that you specify the encoding
explicitly when opening text files. If you want to use UTF-8, pass
encoding="utf-8"
. To use the current locale encoding,
encoding="locale"
is supported since Python 3.10.
See also
Python UTF-8 Mode can be used to change the default encoding to
UTF-8 from locale-specific encoding.
Python 3.15 will make
default.
Added in version 3.10:
See
for more details.
To find where the default locale encoding is used, you can enable
the
command line option or set the
environment variable, which will
emit an
when the default encoding is used.
If you are providing an API that uses
or
and passes
encoding=None
as a parameter, you
can use
so that callers of the API will emit an
if they donât pass an
encoding
. However,
please consider using UTF-8 by default (i.e.
encoding="utf-8"
) for
new APIs.
io.
DEFAULT_BUFFER_SIZE
An int containing the default buffer size used by the moduleâs buffered I/O
classes.
uses the fileâs blksize (as obtained by
) if possible.
io.
open
(
file
,
mode
=
'r'
,
buffering
=
-1
,
encoding
=
None
,
errors
=
None
,
newline
=
None
,
closefd
=
True
,
opener
=
None
)
This is an alias for the builtin
function.
This function raises an
open
with
arguments
path
,
mode
and
flags
. The
mode
and
flags
arguments may have been modified or inferred from the original call.
io.
open_code
(
path
)
Opens the provided file with mode
'rb'
. This function should be used
when the intent is to treat the contents as executable code.
path
should be a
and an absolute path.
The behavior of this function may be overridden by an earlier call to the
. However, assuming that
path
is a
and an absolute path,
open_code(path)
should always behave
the same as
open(path,
'rb')
. Overriding the behavior is intended for
additional validation or preprocessing of the file.
Added in version 3.8.
io.
text_encoding
(
encoding
,
stacklevel
=
2
,
/
)
This is a helper function for callables that use
or
and have an
encoding=None
parameter.
This function returns
encoding
if it is not
None
.
Otherwise, it returns
"locale"
or
"utf-8"
depending on
.
This function emits an
if
is true and
encoding
is
None
.
stacklevel
specifies where the warning is emitted.
For example:
def
read_text
(
path
,
encoding
=
None
):
encoding
=
io
.
text_encoding
(
encoding
)
# stacklevel=2
with
open
(
path
,
encoding
)
as
f
:
return
f
.
read
()
In this example, an
is emitted for the caller of
read_text()
.
See
for more information.
Added in version 3.10.
Changed in version 3.11:
returns âutf-8â when UTF-8 mode is enabled and
encoding
is
None
.
exception
io.
BlockingIOError
This is a compatibility alias for the builtin
exception.
exception
io.
UnsupportedOperation
An exception inheriting
and
that is raised
when an unsupported operation is called on a stream.
See also
contains the standard IO streams:
,
,
and
.
The implementation of I/O streams is organized as a hierarchy of classes.  First
(ABCs), which are used to
specify the various categories of streams, then concrete classes providing the
standard stream implementations.
Note
The abstract base classes also provide default implementations of some
methods in order to help implementation of concrete stream classes.  For
example,
provides unoptimized implementations of
readinto()
and
readline()
.
At the top of the I/O hierarchy is the abstract base class
.  It
defines the basic interface to a stream.  Note, however, that there is no
separation between reading and writing to streams; implementations are allowed
to raise
if they do not support a given operation.
The
ABC extends
.  It deals with the reading
and writing of bytes to a stream.
subclasses
to provide an interface to files in the machineâs file system.
The
ABC extends
.  It deals with
buffering on a raw binary stream (
).  Its subclasses,
,
, and
buffer raw binary streams that are writable, readable, and both readable and writable,
respectively.
provides a buffered interface to seekable streams.
Another
subclass,
, is a stream of
in-memory bytes.
The
ABC extends
.  It deals with
streams whose bytes represent text, and handles encoding and decoding to and
from strings.
, which extends
, is a buffered text
interface to a buffered raw stream (
).  Finally,
is an in-memory stream for text.
Argument names are not part of the specification, and only the arguments of
are intended to be used as keyword arguments.
The following table summarizes the ABCs provided by the
module:
ABC
Inherits
Stub Methods
Mixin Methods and Properties
fileno
,
seek
,
and
truncate
close
,
closed
,
__enter__
,
__exit__
,
flush
,
isatty
,
__iter__
,
__next__
,
readable
,
readline
,
readlines
,
seekable
,
tell
,
writable
, and
writelines
readinto
and
write
Inherited
methods,
read
,
and
readall
detach
,
read
,
read1
, and
write
Inherited
methods,
readinto
,
and
readinto1
detach
,
read
,
readline
, and
write
Inherited
methods,
encoding
,
errors
, and
newlines
class
io.
IOBase
The abstract base class for all I/O classes.
This class provides empty abstract implementations for many methods
that derived classes can override selectively; the default
implementations represent a file that cannot be read, written or
seeked.
Even though
does not declare
read()
or
write()
because their signatures will vary, implementations and
clients should consider those methods part of the interface.  Also,
implementations may raise a
(or
)
when operations they do not support are called.
The basic type used for binary data read from or written to a file is
.  Other
are
accepted as method arguments too.  Text I/O classes work with
data.
Note that calling any method (even inquiries) on a closed stream is
undefined.  Implementations may raise
in this case.
(and its subclasses) supports the iterator protocol, meaning
that an
object can be iterated over yielding the lines in a
stream.  Lines are defined slightly differently depending on whether the
stream is a binary stream (yielding bytes), or a text stream (yielding
character strings).  See
below.
is also a context manager and therefore supports the
statement.  In this example,
file
is closed after the
with
statementâs suite is finishedâeven if an exception occurs:
with
open
(
'spam.txt'
,
'w'
)
as
file
:
file
.
write
(
'Spam and eggs!'
)
provides these data attributes and methods:
close
(
)
Flush and close this stream. This method has no effect if the file is
already closed. Once the file is closed, any operation on the file
(e.g. reading or writing) will raise a
.
As a convenience, it is allowed to call this method more than once;
only the first call, however, will have an effect.
closed
True
if the stream is closed.
fileno
(
)
Return the underlying file descriptor (an integer) of the stream if it
exists.  An
is raised if the IO object does not use a file
descriptor.
flush
(
)
Flush the write buffers of the stream if applicable.  This does nothing
for read-only and non-blocking streams.
isatty
(
)
Return
True
if the stream is interactive (i.e., connected to
a terminal/tty device).
readable
(
)
Return
True
if the stream can be read from.
If
False
,
read()
will raise
.
readline
(
size
=
-1
,
/
)
Read and return one line from the stream.  If
size
is specified, at
most
size
bytes will be read.
The line terminator is always
b'\n'
for binary files; for text files,
the
newline
argument to
can be used to select the line
terminator(s) recognized.
readlines
(
hint
=
-1
,
/
)
Read and return a list of lines from the stream.
hint
can be specified
to control the number of lines read: no more lines will be read if the
total size (in bytes/characters) of all lines so far exceeds
hint
.
hint
values of
0
or less, as well as
None
, are treated as no
hint.
Note that itâs already possible to iterate on file objects using
for
line
in
file:
...
without calling
file.readlines()
.
seek
(
offset
,
whence
=
os.SEEK_SET
,
/
)
Change the stream position to the given byte
offset
,
interpreted relative to the position indicated by
whence
,
and return the new absolute position.
Values for
whence
are:
or
0
â start of the stream (the default);
offset
should be zero or positive
or
1
â current stream position;
offset
may be negative
or
2
â end of the stream;
offset
is usually negative
Added in version 3.1:
The
SEEK_*
constants.
Added in version 3.3:
Some operating systems could support additional values, like
or
. The valid values
for a file could depend on it being open in text or binary mode.
seekable
(
)
Return
True
if the stream supports random access.  If
False
,
,
and
will raise
.
tell
(
)
Return the current stream position.
truncate
(
size
=
None
,
/
)
Resize the stream to the given
size
in bytes (or the current position
if
size
is not specified).  The current stream position isnât changed.
This resizing can extend or reduce the current file size.  In case of
extension, the contents of the new file area depend on the platform
(on most systems, additional bytes are zero-filled).  The new file size
is returned.
Changed in version 3.5:
Windows will now zero-fill files when extending.
writable
(
)
Return
True
if the stream supports writing.  If
False
,
write()
and
will raise
.
writelines
(
lines
,
/
)
Write a list of lines to the stream.  Line separators are not added, so it
is usual for each of the lines provided to have a line separator at the
end.
__del__
(
)
Prepare for object destruction.
provides a default
implementation of this method that calls the instanceâs
method.
class
io.
RawIOBase
Base class for raw binary streams.  It inherits from
.
Raw binary streams typically provide low-level access to an underlying OS
device or API, and do not try to encapsulate it in high-level primitives
(this functionality is done at a higher-level in buffered binary streams and text streams, described later
in this page).
provides these methods in addition to those from
:
read
(
size
=
-1
,
/
)
Read up to
size
bytes from the object and return them.  As a convenience,
if
size
is unspecified or -1, all bytes until EOF are returned.
Otherwise, only one system call is ever made.  Fewer than
size
bytes may
be returned if the operating system call returns fewer than
size
bytes.
If 0 bytes are returned, and
size
was not 0, this indicates end of file.
If the object is in non-blocking mode and no bytes are available,
None
is returned.
The default implementation defers to
and
.
readall
(
)
Read and return all the bytes from the stream until EOF, using multiple
calls to the stream if necessary.
readinto
(
b
,
/
)
Read bytes into a pre-allocated, writable
b
, and return the
number of bytes read.  For example,
b
might be a
.
If the object is in non-blocking mode and no bytes
are available,
None
is returned.
write
(
b
,
/
)
Write the given
,
b
, to the
underlying raw stream, and return the number of
bytes written.  This can be less than the length of
b
in
bytes, depending on specifics of the underlying raw
stream, and especially if it is in non-blocking mode.
None
is
returned if the raw stream is set not to block and no single byte could
be readily written to it.  The caller may release or mutate
b
after
this method returns, so the implementation should only access
b
during the method call.
class
io.
BufferedIOBase
Base class for binary streams that support some kind of buffering.
It inherits from
.
The main difference with
is that methods
,
and
will try (respectively) to read
as much input as requested or to emit all provided data.
In addition, if the underlying raw stream is in non-blocking mode, when the
system returns would block
will raise
with
and
will return
data read so far or
None
if no data is available.
Besides, the
method does not have a default
implementation that defers to
.
A typical
implementation should not inherit from a
implementation, but wrap one, like
and
do.
provides or overrides these data attributes and
methods in addition to those from
:
raw
The underlying raw stream (a
instance) that
deals with.  This is not part of the
API and may not exist on some implementations.
detach
(
)
Separate the underlying raw stream from the buffer and return it.
After the raw stream has been detached, the buffer is in an unusable
state.
Some buffers, like
, do not have the concept of a single
raw stream to return from this method.  They raise
.
Added in version 3.1.
read
(
size
=
-1
,
/
)
Read and return up to
size
bytes. If the argument is omitted,
None
,
or negative read as much as possible.
Fewer bytes may be returned than requested. An empty
object
is returned if the stream is already at EOF. More than one read may be
made and calls may be retried if specific errors are encountered, see
and
for more details. Less than size bytes
being returned does not imply that EOF is imminent.
When reading as much as possible the default implementation will use
raw.readall
if available (which should implement
), otherwise will read in a loop until read
returns
None
, an empty
, or a non-retryable error. For
most streams this is to EOF, but for non-blocking streams more data may
become available.
Note
When the underlying raw stream is non-blocking, implementations may
either raise
or return
None
if no data is
available.
implementations return
None
.
read1
(
size
=
-1
,
/
)
Read and return up to
size
bytes, calling
which may retry if
is encountered per
. If
size
is
-1
or not provided, the implementation will
choose an arbitrary value for
size
.
Note
When the underlying raw stream is non-blocking, implementations may
either raise
or return
None
if no data is
available.
implementations return
None
.
readinto
(
b
,
/
)
Read bytes into a pre-allocated, writable
b
and return the number of bytes read.
For example,
b
might be a
.
Like
, multiple reads may be issued to the underlying raw
stream, unless the latter is interactive.
A
is raised if the underlying raw stream is in non
blocking-mode, and has no data available at the moment.
readinto1
(
b
,
/
)
Read bytes into a pre-allocated, writable
b
, using at most one call to
the underlying raw streamâs
(or
) method. Return the number of bytes read.
A
is raised if the underlying raw stream is in non
blocking-mode, and has no data available at the moment.
Added in version 3.5.
write
(
b
,
/
)
Write the given
,
b
, and return the number
of bytes written (always equal to the length of
b
in bytes, since if
the write fails an
will be raised).  Depending on the
actual implementation, these bytes may be readily written to the
underlying stream, or held in a buffer for performance and latency
reasons.
When in non-blocking mode, a
is raised if the
data needed to be written to the raw stream but it couldnât accept
all the data without blocking.
The caller may release or mutate
b
after this method returns,
so the implementation should only access
b
during the method call.
class
io.
FileIO
(
name
,
mode
=
'r'
,
closefd
=
True
,
opener
=
None
)
A raw binary stream representing an OS-level file containing bytes data.  It
inherits from
.
The
name
can be one of two things:
a character string or
object representing the path to the
file which will be opened. In this case closefd must be
True
(the default)
otherwise an error will be raised.
an integer representing the number of an existing OS-level file descriptor
to which the resulting
object will give access. When the
FileIO object is closed this fd will be closed as well, unless
closefd
is set to
False
.
The
mode
can be
'r'
,
'w'
,
'x'
or
'a'
for reading
(default), writing, exclusive creation or appending. The file will be
created if it doesnât exist when opened for writing or appending; it will be
truncated when opened for writing.
will be raised if
it already exists when opened for creating. Opening a file for creating
implies writing, so this mode behaves in a similar way to
'w'
. Add a
'+'
to the mode to allow simultaneous reading and writing.
The
(when called with a positive argument),
and
methods on this
class will only make one system call.
A custom opener can be used by passing a callable as
opener
. The underlying
file descriptor for the file object is then obtained by calling
opener
with
(
name
,
flags
).
opener
must return an open file descriptor (passing
as
opener
results in functionality similar to passing
None
).
The newly created file is
.
See the
built-in function for examples on using the
opener
parameter.
Changed in version 3.3:
The
opener
parameter was added.
The
'x'
mode was added.
Changed in version 3.4:
The file is now non-inheritable.
provides these data attributes in addition to those from
and
:
mode
The mode as given in the constructor.
name
The file name.  This is the file descriptor of the file when no name is
given in the constructor.
Buffered I/O streams provide a higher-level interface to an I/O device
than raw I/O does.
class
io.
BytesIO
(
initial_bytes
=
b''
)
A binary stream using an in-memory bytes buffer.  It inherits from
.  The buffer is discarded when the
method is called.
The optional argument
initial_bytes
is a
that
contains initial data.
provides or overrides these methods in addition to those
from
and
:
getbuffer
(
)
Return a readable and writable view over the contents of the buffer
without copying them.  Also, mutating the view will transparently
update the contents of the buffer:
>>>
b
=
io
.
BytesIO
(
b
"abcdef"
)
>>>
view
=
b
.
getbuffer
()
>>>
view
[
2
:
4
]
=
b
"56"
>>>
b
.
getvalue
()
b'ab56ef'
Note
As long as the view exists, the
object cannot be
resized or closed.
Added in version 3.2.
getvalue
(
)
Return
containing the entire contents of the buffer.
read1
(
size
=
-1
,
/
)
In
, this is the same as
.
Changed in version 3.7:
The
size
argument is now optional.
readinto1
(
b
,
/
)
In
, this is the same as
.
Added in version 3.5.
class
io.
BufferedReader
(
raw
,
buffer_size
=
DEFAULT_BUFFER_SIZE
)
A buffered binary stream providing higher-level access to a readable, non
seekable
raw binary stream.  It inherits from
.
When reading data from this object, a larger amount of data may be
requested from the underlying raw stream, and kept in an internal buffer.
The buffered data can then be returned directly on subsequent reads.
The constructor creates a
for the given readable
raw
stream and
buffer_size
.  If
buffer_size
is omitted,
is used.
provides or overrides these methods in addition to
those from
and
:
peek
(
size
=
0
,
/
)
Return bytes from the stream without advancing the position. The number of
bytes returned may be less or more than requested. If the underlying raw
stream is non-blocking and the operation would block, returns empty bytes.
read
(
size
=
-1
,
/
)
In
this is the same as
read1
(
size
=
-1
,
/
)
In
this is the same as
Changed in version 3.7:
The
size
argument is now optional.
class
io.
BufferedWriter
(
raw
,
buffer_size
=
DEFAULT_BUFFER_SIZE
)
A buffered binary stream providing higher-level access to a writeable, non
seekable
raw binary stream.  It inherits from
.
When writing to this object, data is normally placed into an internal
buffer.  The buffer will be written out to the underlying
object under various conditions, including:
when the buffer gets too small for all pending data;
when
is called;
when a
is requested (for
objects);
when the
object is closed or destroyed.
The constructor creates a
for the given writeable
raw
stream.  If the
buffer_size
is not given, it defaults to
.
provides or overrides these methods in addition to
those from
and
:
flush
(
)
Force bytes held in the buffer into the raw stream.  A
should be raised if the raw stream blocks.
write
(
b
,
/
)
Write the
,
b
, and return the
number of bytes written.  When in non-blocking mode, a
with
set
is raised if the buffer needs to be written out but the raw stream blocks.
class
io.
BufferedRandom
(
raw
,
buffer_size
=
DEFAULT_BUFFER_SIZE
)
A buffered binary stream providing higher-level access to a seekable
raw binary stream.  It inherits from
and
.
The constructor creates a reader and writer for a seekable raw stream, given
in the first argument.  If the
buffer_size
is omitted it defaults to
.
is capable of anything
or
can do.  In addition,
and
are guaranteed to be implemented.
class
io.
BufferedRWPair
(
reader
,
writer
,
buffer_size
=
DEFAULT_BUFFER_SIZE
,
/
)
A buffered binary stream providing higher-level access to two non seekable
raw binary streamsâone readable, the other writeable.
It inherits from
.
reader
and
writer
are
objects that are readable and
writeable respectively.  If the
buffer_size
is omitted it defaults to
.
implements all of
's methods
except for
, which raises
.
Warning
does not attempt to synchronize accesses to
its underlying raw streams.  You should not pass it the same object
as reader and writer; use
instead.
class
io.
TextIOBase
Base class for text streams.  This class provides a character and line based
interface to stream I/O.  It inherits from
.
provides or overrides these data attributes and
methods in addition to those from
:
encoding
The name of the encoding used to decode the streamâs bytes into
strings, and to encode strings into bytes.
errors
The error setting of the decoder or encoder.
newlines
A string, a tuple of strings, or
None
, indicating the newlines
translated so far.  Depending on the implementation and the initial
constructor flags, this may not be available.
buffer
The underlying binary buffer (a
or
instance) that
deals with.
This is not part of the
API and may not exist
in some implementations.
detach
(
)
Separate the underlying binary buffer from the
and
return it.
After the underlying buffer has been detached, the
is
in an unusable state.
Some
implementations, like
, may not
have the concept of an underlying buffer and calling this method will
raise
.
Added in version 3.1.
read
(
size
=
-1
,
/
)
Read and return at most
size
characters from the stream as a single
.  If
size
is negative or
None
, reads until EOF.
readline
(
size
=
-1
,
/
)
Read until newline or EOF and return a single
.  If the stream is
already at EOF, an empty string is returned.
If
size
is specified, at most
size
characters will be read.
seek
(
offset
,
whence
=
SEEK_SET
,
/
)
Change the stream position to the given
offset
.  Behaviour depends on
the
whence
parameter.  The default value for
whence
is
SEEK_SET
.
SEEK_SET
or
0
: seek from the start of the stream
(the default);
offset
must either be a number returned by
, or zero.  Any other
offset
value
produces undefined behaviour.
SEEK_CUR
or
1
: âseekâ to the current position;
offset
must be zero, which is a no-operation (all other values
are unsupported).
SEEK_END
or
2
: seek to the end of the stream;
offset
must be zero (all other values are unsupported).
Return the new absolute position as an opaque number.
Added in version 3.1:
The
SEEK_*
constants.
tell
(
)
Return the current stream position as an opaque number.  The number
does not usually represent a number of bytes in the underlying
binary storage.
write
(
s
,
/
)
Write the string
s
to the stream and return the number of characters
written.
class
io.
TextIOWrapper
(
buffer
,
encoding
=
None
,
errors
=
None
,
newline
=
None
,
line_buffering
=
False
,
write_through
=
False
)
A buffered text stream providing higher-level access to a
buffered binary stream.  It inherits from
.
encoding
gives the name of the encoding that the stream will be decoded or
encoded with.  In
, this defaults to UTF-8.
Otherwise, it defaults to
.
encoding="locale"
can be used to specify the current localeâs encoding
explicitly. See
for more information.
errors
is an optional string that specifies how encoding and decoding
errors are to be handled.  Pass
'strict'
to raise a
exception if there is an encoding error (the default of
None
has the same
effect), or pass
'ignore'
to ignore errors.  (Note that ignoring encoding
errors can lead to data loss.)
'replace'
causes a replacement marker
(such as
'?'
) to be inserted where there is malformed data.
'backslashreplace'
causes malformed data to be replaced by a
backslashed escape sequence.  When writing,
'xmlcharrefreplace'
(replace with the appropriate XML character reference)  or
'namereplace'
(replace with
\N{...}
escape sequences) can be used.  Any other error
handling name that has been registered with
is also valid.
newline
controls how line endings are handled.  It can be
None
,
''
,
'\n'
,
'\r'
, and
'\r\n'
.  It works as follows:
When reading input from the stream, if
newline
is
None
,
mode is enabled.  Lines in the input can end in
'\n'
,
'\r'
, or
'\r\n'
, and these are translated into
'\n'
before being returned to the caller.  If
newline
is
''
, universal
newlines mode is enabled, but line endings are returned to the caller
untranslated.  If
newline
has any of the other legal values, input lines
are only terminated by the given string, and the line ending is returned to
the caller untranslated.
When writing output to the stream, if
newline
is
None
, any
'\n'
characters written are translated to the system default line separator,
.  If
newline
is
''
or
'\n'
, no translation
takes place.  If
newline
is any of the other legal values, any
'\n'
characters written are translated to the given string.
If
line_buffering
is
True
,
is implied when a call to
write contains a newline character or a carriage return.
If
write_through
is
True
, calls to
are guaranteed
not to be buffered: any data written on the
object is immediately handled to its underlying binary
buffer
.
Changed in version 3.3:
The
write_through
argument has been added.
Changed in version 3.3:
The default
encoding
is now
locale.getpreferredencoding(False)
instead of
locale.getpreferredencoding()
. Donât change temporary the
locale encoding using
, use the current locale
encoding instead of the user preferred encoding.
Changed in version 3.10:
The
encoding
argument now supports the
"locale"
dummy encoding name.
provides these data attributes and methods in
addition to those from
and
:
line_buffering
Whether line buffering is enabled.
write_through
Whether writes are passed immediately to the underlying binary
buffer.
Added in version 3.7.
reconfigure
(
*
,
encoding
=
None
,
errors
=
None
,
newline
=
None
,
line_buffering
=
None
,
write_through
=
None
)
Reconfigure this text stream using new settings for
encoding
,
errors
,
newline
,
line_buffering
and
write_through
.
Parameters not specified keep current settings, except
errors='strict'
is used when
encoding
is specified but
errors
is not specified.
It is not possible to change the encoding or newline if some data
has already been read from the stream. On the other hand, changing
encoding after write is possible.
This method does an implicit stream flush before setting the
new parameters.
Added in version 3.7.
Changed in version 3.11:
The method supports
encoding="locale"
option.
seek
(
cookie
,
whence
=
os.SEEK_SET
,
/
)
Set the stream position.
Return the new stream position as an
.
Four operations are supported,
given by the following argument combinations:
seek(0,
SEEK_SET)
: Rewind to the start of the stream.
seek(cookie,
SEEK_SET)
: Restore a previous position;
cookie
must be
a number returned by
.
seek(0,
SEEK_END)
: Fast-forward to the end of the stream.
seek(0,
SEEK_CUR)
: Leave the current stream position unchanged.
Any other argument combinations are invalid,
and may raise exceptions.
See also
,
, and
.
tell
(
)
Return the stream position as an opaque number.
The return value of
tell()
can be given as input to
,
to restore a previous stream position.
class
io.
StringIO
(
initial_value
=
''
,
newline
=
'\n'
)
A text stream using an in-memory text buffer.  It inherits from
.
The text buffer is discarded when the
method is
called.
The initial value of the buffer can be set by providing
initial_value
.
If newline translation is enabled, newlines will be encoded as if by
.  The stream is positioned at the start of the
buffer which emulates opening an existing file in a
w+
mode, making it
ready for an immediate write from the beginning or for a write that
would overwrite the initial value.  To emulate opening a file in an
a+
mode ready for appending, use
f.seek(0,
io.SEEK_END)
to reposition the
stream at the end of the buffer.
The
newline
argument works like that of
,
except that when writing output to the stream, if
newline
is
None
,
newlines are written as
\n
on all platforms.
provides this method in addition to those from
and
:
getvalue
(
)
Return a
containing the entire contents of the buffer.
Newlines are decoded as if by
, although
the stream position is not changed.
Example usage:
import
io
output
=
io
.
StringIO
()
output
.
write
(
'First line.
\n
'
)
print
(
'Second line.'
,
file
=
output
)
# Retrieve file contents -- this will be
# 'First line.\nSecond line.\n'
contents
=
output
.
getvalue
()
# Close object and discard memory buffer --
# .getvalue() will now raise an exception.
output
.
close
()
class
io.
IncrementalNewlineDecoder
A helper codec that decodes newlines for
mode.
It inherits from
.
This section discusses the performance of the provided concrete I/O
implementations.
By reading and writing only large chunks of data even when the user asks for a
single byte, buffered I/O hides any inefficiency in calling and executing the
operating systemâs unbuffered I/O routines.  The gain depends on the OS and the
kind of I/O which is performed.  For example, on some modern OSes such as Linux,
unbuffered disk I/O can be as fast as buffered I/O.  The bottom line, however,
is that buffered I/O offers predictable performance regardless of the platform
and the backing device.  Therefore, it is almost always preferable to use
buffered I/O rather than unbuffered I/O for binary data.
Text I/O over a binary storage (such as a file) is significantly slower than
binary I/O over the same storage, because it requires conversions between
unicode and binary data using a character codec.  This can become noticeable
handling huge amounts of text data like large log files.  Also,
and
are both quite slow
due to the reconstruction algorithm used.
, however, is a native in-memory unicode container and will
exhibit similar speed to
.
objects are thread-safe to the extent that the operating system
calls (such as
under Unix) they wrap are thread-safe too.
Binary buffered objects (instances of
,
,
and
)
protect their internal structures using a lock; it is therefore safe to call
them from multiple threads at once.
objects are not thread-safe.
Binary buffered objects (instances of
,
,
and
)
are not reentrant.  While reentrant calls will not happen in normal situations,
they can arise from doing I/O in a
handler.  If a thread tries to
re-enter a buffered object which it is already accessing, a
is raised.  Note this doesnât prohibit a different thread from entering the
buffered object.
The above implicitly extends to text files, since the
function
will wrap a buffered object inside a
.  This includes
standard streams and therefore affects the built-in
function as
well.