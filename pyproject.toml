[tool.poetry]
name = "ai-coder-assistant"
version = "1.0.0"
description = "Advanced AI-powered code analysis and enhancement tool with multi-provider LLM support"
authors = ["AI Coder Team <team@aicoder.org>"]
license = "GPL-3.0"
readme = "README.md"
homepage = "https://github.com/aicoder/ai-coder-assistant"
repository = "https://github.com/aicoder/ai-coder-assistant"
keywords = ["ai", "code-analysis", "llm", "development", "automation"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Testing",
]
packages = [
    {include = "src"},
]
include = [
    "config/*.json",
    "docs/**/*",
    "scripts/**/*",
    "*.md",
    "LICENSE",
    "requirements.txt",
    "Dockerfile",
    "docker-compose.yml",
]

[tool.poetry.dependencies]
python = "^3.11"
# Core GUI Framework
PyQt6 = "^6.6.1"
PyQt6-WebEngine = "^6.6.1"
qdarkstyle = "^3.2.0"

# HTTP and Web Scraping
requests = "^2.31.0"
beautifulsoup4 = "^4.12.0"
aiohttp = "^3.9.0"

# AI and Machine Learning
torch = "^2.1.0"
torchvision = "^0.16.0"
torchaudio = "^2.1.0"
transformers = "^4.36.0"
accelerate = "^0.25.0"
datasets = "^2.15.0"
sentencepiece = "^0.1.99"
peft = "^0.7.0"
bitsandbytes = "^0.41.0"
scikit-learn = "^1.3.0"
numpy = "^1.24.0"
pandas = "^2.1.0"
matplotlib = "^3.8.0"
seaborn = "^0.13.0"
plotly = "^5.18.0"
streamlit = "^1.29.0"
gradio = "^4.8.0"

# LLM Studio - Multi-Provider Support
openai = "^1.6.0"
google-generativeai = "^0.3.0"
anthropic = "^0.7.0"
ollama = "^0.1.0"

# Cloud Model Integration
fastapi = "^0.105.0"
uvicorn = "^0.24.0"
pydantic = "^2.5.0"
python-multipart = "^0.0.6"
aiofiles = "^23.2.0"
websockets = "^12.0.0"
PyJWT = "^2.8.0"

# Code Analysis and Quality
flake8 = "^6.1.0"
pathspec = "^0.11.0"
bandit = "^1.7.5"
njsscan = "^0.2.8"
semgrep = "^1.50.0"
safety = "^2.3.0"

# Media and Transcription
yt-dlp = "^2023.12.30"
youtube-transcript-api = "^0.6.1"

# Data Processing
pypdf = "^3.17.0"
networkx = "^3.2.0"

# Development and Build Tools
pyinstaller = "^6.3.0"
nuitka = "^1.9.0"
cx_freeze = "^6.15.0"

# Additional Dependencies
asyncio-mqtt = "^0.16.0"
python-dotenv = "^1.0.0"
click = "^8.1.0"
tqdm = "^4.66.0"
psutil = "^5.9.0"
py-spy = "^0.3.14"

# XML Processing
lxml = "^4.9.0"

# Configuration and Serialization
pyyaml = "^6.0.1"
toml = "^0.10.0"

# Git Operations for PR Automation
gitpython = "^3.1.40"

# Security Intelligence and Code Standards
feedparser = "^6.0.10"
httpx = "^0.25.0"

# Documentation
sphinx = "^7.2.0"
sphinx-rtd-theme = "^1.3.0"

[tool.poetry.group.dev.dependencies]
# Testing Framework
pytest = "^7.4.0"
pytest-asyncio = "^0.23.0"
pytest-mock = "^3.12.0"
pytest-qt = "^4.2.0"
pytest-timeout = "^2.2.0"
pytest-xvfb = "^3.0.0"
pytest-cov = "^4.1.0"

# Code Quality
black = "^23.12.0"
mypy = "^1.7.0"
isort = "^5.13.0"
pre-commit = "^3.6.0"
flake8 = "^6.1.0"

# Development Tools
ipython = "^8.18.0"
jupyter = "^1.0.0"
notebook = "^7.0.0"

[tool.poetry.group.gpu.dependencies]
# Optional: GPU support - uncomment as needed
# cupy-cuda11x = "^11.0.0"  # For CUDA 11.x support
# cupy-cuda12x = "^12.0.0"  # For CUDA 12.x support

[tool.poetry.group.docs.dependencies]
# Documentation dependencies
sphinx = "^7.2.0"
sphinx-rtd-theme = "^1.3.0"
myst-parser = "^2.0.0"
sphinx-autodoc-typehints = "^1.25.0"

[tool.poetry.scripts]
ai-coder-assistant = "src.main:main"
ai-coder-cli = "src.cli.main:main"
ai-coder-api = "src.backend.services.web_server:start_server"

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/aicoder/ai-coder-assistant/issues"
"Documentation" = "https://aicoder-assistant.readthedocs.io/"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["src/tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "gui: marks tests that require GUI",
    "gpu: marks tests that require GPU",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "test_*"]
skips = ["B101", "B601"]

[tool.semgrep]
config = ["p/security-audit", "p/bandit"]

[tool.pre-commit]
repos = [
    {
        repo = "https://github.com/pre-commit/pre-commit-hooks",
        rev = "v4.5.0",
        hooks = [
            {id = "trailing-whitespace"},
            {id = "end-of-file-fixer"},
            {id = "check-yaml"},
            {id = "check-added-large-files"},
            {id = "check-merge-conflict"},
        ],
    },
    {
        repo = "https://github.com/psf/black",
        rev = "23.12.0",
        hooks = [{id = "black"}],
    },
    {
        repo = "https://github.com/pycqa/isort",
        rev = "5.13.0",
        hooks = [{id = "isort"}],
    },
    {
        repo = "https://github.com/pycqa/flake8",
        rev = "6.1.0",
        hooks = [{id = "flake8"}],
    },
    {
        repo = "https://github.com/pre-commit/mirrors-mypy",
        rev = "v1.7.0",
        hooks = [{id = "mypy"}],
    },
] 