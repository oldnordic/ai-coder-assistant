7. Dataset transformations — scikit-learn 1.7.0 documentation
Skip to main content
Back to top
Ctrl
+
K
Install
User Guide
API
Examples
Community
More
Getting Started
Release History
Glossary
Development
FAQ
Support
Related Projects
Roadmap
Governance
About us
GitHub
Choose version
Install
User Guide
API
Examples
Community
Getting Started
Release History
Glossary
Development
FAQ
Support
Related Projects
Roadmap
Governance
About us
GitHub
Choose version
Section Navigation
1. Supervised learning
1.1. Linear Models
1.2. Linear and Quadratic Discriminant Analysis
1.3. Kernel ridge regression
1.4. Support Vector Machines
1.5. Stochastic Gradient Descent
1.6. Nearest Neighbors
1.7. Gaussian Processes
1.8. Cross decomposition
1.9. Naive Bayes
1.10. Decision Trees
1.11. Ensembles: Gradient boosting, random forests, bagging, voting, stacking
1.12. Multiclass and multioutput algorithms
1.13. Feature selection
1.14. Semi-supervised learning
1.15. Isotonic regression
1.16. Probability calibration
1.17. Neural network models (supervised)
2. Unsupervised learning
2.1. Gaussian mixture models
2.2. Manifold learning
2.3. Clustering
2.4. Biclustering
2.5. Decomposing signals in components (matrix factorization problems)
2.6. Covariance estimation
2.7. Novelty and Outlier Detection
2.8. Density Estimation
2.9. Neural network models (unsupervised)
3. Model selection and evaluation
3.1. Cross-validation: evaluating estimator performance
3.2. Tuning the hyper-parameters of an estimator
3.3. Tuning the decision threshold for class prediction
3.4. Metrics and scoring: quantifying the quality of predictions
3.5. Validation curves: plotting scores to evaluate models
4. Metadata Routing
5. Inspection
5.1. Partial Dependence and Individual Conditional Expectation plots
5.2. Permutation feature importance
6. Visualizations
7. Dataset transformations
7.1. Pipelines and composite estimators
7.2. Feature extraction
7.3. Preprocessing data
7.4. Imputation of missing values
7.5. Unsupervised dimensionality reduction
7.6. Random Projection
7.7. Kernel Approximation
7.8. Pairwise metrics, Affinities and Kernels
7.9. Transforming the prediction target (
y
)
8. Dataset loading utilities
8.1. Toy datasets
8.2. Real world datasets
8.3. Generated datasets
8.4. Loading other datasets
9. Computing with scikit-learn
9.1. Strategies to scale computationally: bigger data
9.2. Computational Performance
9.3. Parallelism, resource management, and configuration
10. Model persistence
11. Common pitfalls and recommended practices
12. Dispatching
12.1. Array API support (experimental)
13. Choosing the right estimator
14. External Resources, Videos and Talks
User Guide
7.
Dataset transformations
7.
Dataset transformations
#
scikit-learn provides a library of transformers, which may clean (see
Preprocessing data
), reduce (see
Unsupervised dimensionality reduction
), expand (see
Kernel Approximation
) or generate (see
Feature extraction
)
feature representations.
Like other estimators, these are represented by classes with a
fit
method,
which learns model parameters (e.g. mean and standard deviation for
normalization) from a training set, and a
transform
method which applies
this transformation model to unseen data.
fit_transform
may be more
convenient and efficient for modelling and transforming the training data
simultaneously.
Combining such transformers, either in parallel or series is covered in
Pipelines and composite estimators
.
Pairwise metrics, Affinities and Kernels
covers transforming feature
spaces into affinity matrices, while
Transforming the prediction target (y)
considers
transformations of the target space (e.g. categorical labels) for use in
scikit-learn.
7.1. Pipelines and composite estimators
7.1.1. Pipeline: chaining estimators
7.1.2. Transforming target in regression
7.1.3. FeatureUnion: composite feature spaces
7.1.4. ColumnTransformer for heterogeneous data
7.1.5. Visualizing Composite Estimators
7.2. Feature extraction
7.2.1. Loading features from dicts
7.2.2. Feature hashing
7.2.3. Text feature extraction
7.2.4. Image feature extraction
7.3. Preprocessing data
7.3.1. Standardization, or mean removal and variance scaling
7.3.2. Non-linear transformation
7.3.3. Normalization
7.3.4. Encoding categorical features
7.3.5. Discretization
7.3.6. Imputation of missing values
7.3.7. Generating polynomial features
7.3.8. Custom transformers
7.4. Imputation of missing values
7.4.1. Univariate vs. Multivariate Imputation
7.4.2. Univariate feature imputation
7.4.3. Multivariate feature imputation
7.4.4. Nearest neighbors imputation
7.4.5. Keeping the number of features constant
7.4.6. Marking imputed values
7.4.7. Estimators that handle NaN values
7.5. Unsupervised dimensionality reduction
7.5.1. PCA: principal component analysis
7.5.2. Random projections
7.5.3. Feature agglomeration
7.6. Random Projection
7.6.1. The Johnson-Lindenstrauss lemma
7.6.2. Gaussian random projection
7.6.3. Sparse random projection
7.6.4. Inverse Transform
7.7. Kernel Approximation
7.7.1. Nystroem Method for Kernel Approximation
7.7.2. Radial Basis Function Kernel
7.7.3. Additive Chi Squared Kernel
7.7.4. Skewed Chi Squared Kernel
7.7.5. Polynomial Kernel Approximation via Tensor Sketch
7.7.6. Mathematical Details
7.8. Pairwise metrics, Affinities and Kernels
7.8.1. Cosine similarity
7.8.2. Linear kernel
7.8.3. Polynomial kernel
7.8.4. Sigmoid kernel
7.8.5. RBF kernel
7.8.6. Laplacian kernel
7.8.7. Chi-squared kernel
7.9. Transforming the prediction target (
y
)
7.9.1. Label binarization
7.9.2. Label encoding
previous
6.
Visualizations
next
7.1.
Pipelines and composite estimators
This Page
Show Source
© Copyright 2007 - 2025, scikit-learn developers (BSD License).