Array manipulation routines — NumPy v2.2 Manual
Skip to main content
Back to top
Ctrl
+
K
User Guide
API reference
Building from source
Development
Release notes
Learn
More
NEPs
Choose version
GitHub
User Guide
API reference
Building from source
Development
Release notes
Learn
NEPs
Choose version
GitHub
Section Navigation
NumPy’s module structure
Array objects
Universal functions (
ufunc
)
Routines and objects by topic
Constants
Array creation routines
Array manipulation routines
numpy.copyto
numpy.ndim
numpy.shape
numpy.size
numpy.reshape
numpy.ravel
numpy.ndarray.flat
numpy.ndarray.flatten
numpy.moveaxis
numpy.rollaxis
numpy.swapaxes
numpy.ndarray.T
numpy.transpose
numpy.permute_dims
numpy.matrix_transpose
numpy.atleast_1d
numpy.atleast_2d
numpy.atleast_3d
numpy.broadcast
numpy.broadcast_to
numpy.broadcast_arrays
numpy.expand_dims
numpy.squeeze
numpy.asarray
numpy.asanyarray
numpy.asmatrix
numpy.asfortranarray
numpy.ascontiguousarray
numpy.asarray_chkfinite
numpy.require
numpy.concatenate
numpy.concat
numpy.stack
numpy.block
numpy.vstack
numpy.hstack
numpy.dstack
numpy.column_stack
numpy.split
numpy.array_split
numpy.dsplit
numpy.hsplit
numpy.vsplit
numpy.unstack
numpy.tile
numpy.repeat
numpy.delete
numpy.insert
numpy.append
numpy.resize
numpy.trim_zeros
numpy.unique
numpy.pad
numpy.flip
numpy.fliplr
numpy.flipud
numpy.roll
numpy.rot90
Bit-wise operations
String functionality
Datetime support functions
Data type routines
Mathematical functions with automatic domain
Floating point error handling
Exceptions and Warnings (
numpy.exceptions
)
Discrete Fourier Transform (
numpy.fft
)
Functional programming
Input and output
Indexing routines
Linear algebra (
numpy.linalg
)
Logic functions
Masked array operations
Mathematical functions
Miscellaneous routines
Polynomials
Random sampling (
numpy.random
)
Set routines
Sorting, searching, and counting
Statistics
Test support (
numpy.testing
)
Window functions
Typing (
numpy.typing
)
Packaging (
numpy.distutils
)
NumPy C-API
Array API standard compatibility
CPU/SIMD optimizations
Thread Safety
Global Configuration Options
NumPy security
Status of
numpy.distutils
and migration advice
numpy.distutils
user guide
NumPy and SWIG
NumPy reference
Routines and objects by topic
Array manipulation routines
Array manipulation routines
#
Basic operations
#
copyto
(dst, src[, casting, where])
Copies values from one array to another, broadcasting as necessary.
ndim
(a)
Return the number of dimensions of an array.
shape
(a)
Return the shape of an array.
size
(a[, axis])
Return the number of elements along a given axis.
Changing array shape
#
reshape
(a, /[, shape, order, newshape, copy])
Gives a new shape to an array without changing its data.
ravel
(a[, order])
Return a contiguous flattened array.
ndarray.flat
A 1-D iterator over the array.
ndarray.flatten
([order])
Return a copy of the array collapsed into one dimension.
Transpose-like operations
#
moveaxis
(a, source, destination)
Move axes of an array to new positions.
rollaxis
(a, axis[, start])
Roll the specified axis backwards, until it lies in a given position.
swapaxes
(a, axis1, axis2)
Interchange two axes of an array.
ndarray.T
View of the transposed array.
transpose
(a[, axes])
Returns an array with axes transposed.
permute_dims
(a[, axes])
Returns an array with axes transposed.
matrix_transpose
(x, /)
Transposes a matrix (or a stack of matrices)
x
.
Changing number of dimensions
#
atleast_1d
(*arys)
Convert inputs to arrays with at least one dimension.
atleast_2d
(*arys)
View inputs as arrays with at least two dimensions.
atleast_3d
(*arys)
View inputs as arrays with at least three dimensions.
broadcast
Produce an object that mimics broadcasting.
broadcast_to
(array, shape[, subok])
Broadcast an array to a new shape.
broadcast_arrays
(*args[, subok])
Broadcast any number of arrays against each other.
expand_dims
(a, axis)
Expand the shape of an array.
squeeze
(a[, axis])
Remove axes of length one from
a
.
Changing kind of array
#
asarray
(a[, dtype, order, device, copy, like])
Convert the input to an array.
asanyarray
(a[, dtype, order, device, copy, like])
Convert the input to an ndarray, but pass ndarray subclasses through.
asmatrix
(data[, dtype])
Interpret the input as a matrix.
asfortranarray
(a[, dtype, like])
Return an array (ndim >= 1) laid out in Fortran order in memory.
ascontiguousarray
(a[, dtype, like])
Return a contiguous array (ndim >= 1) in memory (C order).
asarray_chkfinite
(a[, dtype, order])
Convert the input to an array, checking for NaNs or Infs.
require
(a[, dtype, requirements, like])
Return an ndarray of the provided type that satisfies requirements.
Joining arrays
#
concatenate
([axis, out, dtype, casting])
Join a sequence of arrays along an existing axis.
concat
([axis, out, dtype, casting])
Join a sequence of arrays along an existing axis.
stack
(arrays[, axis, out, dtype, casting])
Join a sequence of arrays along a new axis.
block
(arrays)
Assemble an nd-array from nested lists of blocks.
vstack
(tup, *[, dtype, casting])
Stack arrays in sequence vertically (row wise).
hstack
(tup, *[, dtype, casting])
Stack arrays in sequence horizontally (column wise).
dstack
(tup)
Stack arrays in sequence depth wise (along third axis).
column_stack
(tup)
Stack 1-D arrays as columns into a 2-D array.
Splitting arrays
#
split
(ary, indices_or_sections[, axis])
Split an array into multiple sub-arrays as views into
ary
.
array_split
(ary, indices_or_sections[, axis])
Split an array into multiple sub-arrays.
dsplit
(ary, indices_or_sections)
Split array into multiple sub-arrays along the 3rd axis (depth).
hsplit
(ary, indices_or_sections)
Split an array into multiple sub-arrays horizontally (column-wise).
vsplit
(ary, indices_or_sections)
Split an array into multiple sub-arrays vertically (row-wise).
unstack
(x, /, *[, axis])
Split an array into a sequence of arrays along the given axis.
Tiling arrays
#
tile
(A, reps)
Construct an array by repeating A the number of times given by reps.
repeat
(a, repeats[, axis])
Repeat each element of an array after themselves
Adding and removing elements
#
delete
(arr, obj[, axis])
Return a new array with sub-arrays along an axis deleted.
insert
(arr, obj, values[, axis])
Insert values along the given axis before the given indices.
append
(arr, values[, axis])
Append values to the end of an array.
resize
(a, new_shape)
Return a new array with the specified shape.
trim_zeros
(filt[, trim, axis])
Remove values along a dimension which are zero along all other.
unique
(ar[, return_index, return_inverse, ...])
Find the unique elements of an array.
pad
(array, pad_width[, mode])
Pad an array.
Rearranging elements
#
flip
(m[, axis])
Reverse the order of elements in an array along the given axis.
fliplr
(m)
Reverse the order of elements along axis 1 (left/right).
flipud
(m)
Reverse the order of elements along axis 0 (up/down).
roll
(a, shift[, axis])
Roll array elements along a given axis.
rot90
(m[, k, axes])
Rotate an array by 90 degrees in the plane specified by axes.
previous
numpy.vander
next
numpy.copyto
On this page
Basic operations
Changing array shape
Transpose-like operations
Changing number of dimensions
Changing kind of array
Joining arrays
Splitting arrays
Tiling arrays
Adding and removing elements
Rearranging elements
© Copyright 2008-2024, NumPy Developers.
Created using
Sphinx
7.2.6.
Built with the
PyData Sphinx Theme
0.16.0.