Date offsets â€” pandas 2.3.0 documentation
Skip to main content
Back to top
Ctrl
+
K
Site Navigation
Getting started
User Guide
API reference
Development
Release notes
GitHub
Twitter
Mastodon
Site Navigation
Getting started
User Guide
API reference
Development
Release notes
GitHub
Twitter
Mastodon
Input/output
General functions
Series
DataFrame
pandas arrays, scalars, and data types
Index objects
Date offsets
pandas.tseries.offsets.DateOffset
pandas.tseries.offsets.DateOffset.freqstr
pandas.tseries.offsets.DateOffset.kwds
pandas.tseries.offsets.DateOffset.name
pandas.tseries.offsets.DateOffset.nanos
pandas.tseries.offsets.DateOffset.normalize
pandas.tseries.offsets.DateOffset.rule_code
pandas.tseries.offsets.DateOffset.n
pandas.tseries.offsets.DateOffset.is_month_start
pandas.tseries.offsets.DateOffset.is_month_end
pandas.tseries.offsets.DateOffset.copy
pandas.tseries.offsets.DateOffset.is_anchored
pandas.tseries.offsets.DateOffset.is_on_offset
pandas.tseries.offsets.DateOffset.is_month_start
pandas.tseries.offsets.DateOffset.is_month_end
pandas.tseries.offsets.DateOffset.is_quarter_start
pandas.tseries.offsets.DateOffset.is_quarter_end
pandas.tseries.offsets.DateOffset.is_year_start
pandas.tseries.offsets.DateOffset.is_year_end
pandas.tseries.offsets.BusinessDay
pandas.tseries.offsets.BDay
pandas.tseries.offsets.BusinessDay.freqstr
pandas.tseries.offsets.BusinessDay.kwds
pandas.tseries.offsets.BusinessDay.name
pandas.tseries.offsets.BusinessDay.nanos
pandas.tseries.offsets.BusinessDay.normalize
pandas.tseries.offsets.BusinessDay.rule_code
pandas.tseries.offsets.BusinessDay.n
pandas.tseries.offsets.BusinessDay.weekmask
pandas.tseries.offsets.BusinessDay.holidays
pandas.tseries.offsets.BusinessDay.calendar
pandas.tseries.offsets.BusinessDay.copy
pandas.tseries.offsets.BusinessDay.is_anchored
pandas.tseries.offsets.BusinessDay.is_on_offset
pandas.tseries.offsets.BusinessDay.is_month_start
pandas.tseries.offsets.BusinessDay.is_month_end
pandas.tseries.offsets.BusinessDay.is_quarter_start
pandas.tseries.offsets.BusinessDay.is_quarter_end
pandas.tseries.offsets.BusinessDay.is_year_start
pandas.tseries.offsets.BusinessDay.is_year_end
pandas.tseries.offsets.BusinessHour
pandas.tseries.offsets.BusinessHour.freqstr
pandas.tseries.offsets.BusinessHour.kwds
pandas.tseries.offsets.BusinessHour.name
pandas.tseries.offsets.BusinessHour.nanos
pandas.tseries.offsets.BusinessHour.normalize
pandas.tseries.offsets.BusinessHour.rule_code
pandas.tseries.offsets.BusinessHour.n
pandas.tseries.offsets.BusinessHour.start
pandas.tseries.offsets.BusinessHour.end
pandas.tseries.offsets.BusinessHour.weekmask
pandas.tseries.offsets.BusinessHour.holidays
pandas.tseries.offsets.BusinessHour.calendar
pandas.tseries.offsets.BusinessHour.copy
pandas.tseries.offsets.BusinessHour.is_anchored
pandas.tseries.offsets.BusinessHour.is_on_offset
pandas.tseries.offsets.BusinessHour.is_month_start
pandas.tseries.offsets.BusinessHour.is_month_end
pandas.tseries.offsets.BusinessHour.is_quarter_start
pandas.tseries.offsets.BusinessHour.is_quarter_end
pandas.tseries.offsets.BusinessHour.is_year_start
pandas.tseries.offsets.BusinessHour.is_year_end
pandas.tseries.offsets.CustomBusinessDay
pandas.tseries.offsets.CDay
pandas.tseries.offsets.CustomBusinessDay.freqstr
pandas.tseries.offsets.CustomBusinessDay.kwds
pandas.tseries.offsets.CustomBusinessDay.name
pandas.tseries.offsets.CustomBusinessDay.nanos
pandas.tseries.offsets.CustomBusinessDay.normalize
pandas.tseries.offsets.CustomBusinessDay.rule_code
pandas.tseries.offsets.CustomBusinessDay.n
pandas.tseries.offsets.CustomBusinessDay.weekmask
pandas.tseries.offsets.CustomBusinessDay.calendar
pandas.tseries.offsets.CustomBusinessDay.holidays
pandas.tseries.offsets.CustomBusinessDay.copy
pandas.tseries.offsets.CustomBusinessDay.is_anchored
pandas.tseries.offsets.CustomBusinessDay.is_on_offset
pandas.tseries.offsets.CustomBusinessDay.is_month_start
pandas.tseries.offsets.CustomBusinessDay.is_month_end
pandas.tseries.offsets.CustomBusinessDay.is_quarter_start
pandas.tseries.offsets.CustomBusinessDay.is_quarter_end
pandas.tseries.offsets.CustomBusinessDay.is_year_start
pandas.tseries.offsets.CustomBusinessDay.is_year_end
pandas.tseries.offsets.CustomBusinessHour
pandas.tseries.offsets.CustomBusinessHour.freqstr
pandas.tseries.offsets.CustomBusinessHour.kwds
pandas.tseries.offsets.CustomBusinessHour.name
pandas.tseries.offsets.CustomBusinessHour.nanos
pandas.tseries.offsets.CustomBusinessHour.normalize
pandas.tseries.offsets.CustomBusinessHour.rule_code
pandas.tseries.offsets.CustomBusinessHour.n
pandas.tseries.offsets.CustomBusinessHour.weekmask
pandas.tseries.offsets.CustomBusinessHour.calendar
pandas.tseries.offsets.CustomBusinessHour.holidays
pandas.tseries.offsets.CustomBusinessHour.start
pandas.tseries.offsets.CustomBusinessHour.end
pandas.tseries.offsets.CustomBusinessHour.copy
pandas.tseries.offsets.CustomBusinessHour.is_anchored
pandas.tseries.offsets.CustomBusinessHour.is_on_offset
pandas.tseries.offsets.CustomBusinessHour.is_month_start
pandas.tseries.offsets.CustomBusinessHour.is_month_end
pandas.tseries.offsets.CustomBusinessHour.is_quarter_start
pandas.tseries.offsets.CustomBusinessHour.is_quarter_end
pandas.tseries.offsets.CustomBusinessHour.is_year_start
pandas.tseries.offsets.CustomBusinessHour.is_year_end
pandas.tseries.offsets.MonthEnd
pandas.tseries.offsets.MonthEnd.freqstr
pandas.tseries.offsets.MonthEnd.kwds
pandas.tseries.offsets.MonthEnd.name
pandas.tseries.offsets.MonthEnd.nanos
pandas.tseries.offsets.MonthEnd.normalize
pandas.tseries.offsets.MonthEnd.rule_code
pandas.tseries.offsets.MonthEnd.n
pandas.tseries.offsets.MonthEnd.copy
pandas.tseries.offsets.MonthEnd.is_anchored
pandas.tseries.offsets.MonthEnd.is_on_offset
pandas.tseries.offsets.MonthEnd.is_month_start
pandas.tseries.offsets.MonthEnd.is_month_end
pandas.tseries.offsets.MonthEnd.is_quarter_start
pandas.tseries.offsets.MonthEnd.is_quarter_end
pandas.tseries.offsets.MonthEnd.is_year_start
pandas.tseries.offsets.MonthEnd.is_year_end
pandas.tseries.offsets.MonthBegin
pandas.tseries.offsets.MonthBegin.freqstr
pandas.tseries.offsets.MonthBegin.kwds
pandas.tseries.offsets.MonthBegin.name
pandas.tseries.offsets.MonthBegin.nanos
pandas.tseries.offsets.MonthBegin.normalize
pandas.tseries.offsets.MonthBegin.rule_code
pandas.tseries.offsets.MonthBegin.n
pandas.tseries.offsets.MonthBegin.copy
pandas.tseries.offsets.MonthBegin.is_anchored
pandas.tseries.offsets.MonthBegin.is_on_offset
pandas.tseries.offsets.MonthBegin.is_month_start
pandas.tseries.offsets.MonthBegin.is_month_end
pandas.tseries.offsets.MonthBegin.is_quarter_start
pandas.tseries.offsets.MonthBegin.is_quarter_end
pandas.tseries.offsets.MonthBegin.is_year_start
pandas.tseries.offsets.MonthBegin.is_year_end
pandas.tseries.offsets.BusinessMonthEnd
pandas.tseries.offsets.BMonthEnd
pandas.tseries.offsets.BusinessMonthEnd.freqstr
pandas.tseries.offsets.BusinessMonthEnd.kwds
pandas.tseries.offsets.BusinessMonthEnd.name
pandas.tseries.offsets.BusinessMonthEnd.nanos
pandas.tseries.offsets.BusinessMonthEnd.normalize
pandas.tseries.offsets.BusinessMonthEnd.rule_code
pandas.tseries.offsets.BusinessMonthEnd.n
pandas.tseries.offsets.BusinessMonthEnd.copy
pandas.tseries.offsets.BusinessMonthEnd.is_anchored
pandas.tseries.offsets.BusinessMonthEnd.is_on_offset
pandas.tseries.offsets.BusinessMonthEnd.is_month_start
pandas.tseries.offsets.BusinessMonthEnd.is_month_end
pandas.tseries.offsets.BusinessMonthEnd.is_quarter_start
pandas.tseries.offsets.BusinessMonthEnd.is_quarter_end
pandas.tseries.offsets.BusinessMonthEnd.is_year_start
pandas.tseries.offsets.BusinessMonthEnd.is_year_end
pandas.tseries.offsets.BusinessMonthBegin
pandas.tseries.offsets.BMonthBegin
pandas.tseries.offsets.BusinessMonthBegin.freqstr
pandas.tseries.offsets.BusinessMonthBegin.kwds
pandas.tseries.offsets.BusinessMonthBegin.name
pandas.tseries.offsets.BusinessMonthBegin.nanos
pandas.tseries.offsets.BusinessMonthBegin.normalize
pandas.tseries.offsets.BusinessMonthBegin.rule_code
pandas.tseries.offsets.BusinessMonthBegin.n
pandas.tseries.offsets.BusinessMonthBegin.copy
pandas.tseries.offsets.BusinessMonthBegin.is_anchored
pandas.tseries.offsets.BusinessMonthBegin.is_on_offset
pandas.tseries.offsets.BusinessMonthBegin.is_month_start
pandas.tseries.offsets.BusinessMonthBegin.is_month_end
pandas.tseries.offsets.BusinessMonthBegin.is_quarter_start
pandas.tseries.offsets.BusinessMonthBegin.is_quarter_end
pandas.tseries.offsets.BusinessMonthBegin.is_year_start
pandas.tseries.offsets.BusinessMonthBegin.is_year_end
pandas.tseries.offsets.CustomBusinessMonthEnd
pandas.tseries.offsets.CBMonthEnd
pandas.tseries.offsets.CustomBusinessMonthEnd.freqstr
pandas.tseries.offsets.CustomBusinessMonthEnd.kwds
pandas.tseries.offsets.CustomBusinessMonthEnd.m_offset
pandas.tseries.offsets.CustomBusinessMonthEnd.name
pandas.tseries.offsets.CustomBusinessMonthEnd.nanos
pandas.tseries.offsets.CustomBusinessMonthEnd.normalize
pandas.tseries.offsets.CustomBusinessMonthEnd.rule_code
pandas.tseries.offsets.CustomBusinessMonthEnd.n
pandas.tseries.offsets.CustomBusinessMonthEnd.weekmask
pandas.tseries.offsets.CustomBusinessMonthEnd.calendar
pandas.tseries.offsets.CustomBusinessMonthEnd.holidays
pandas.tseries.offsets.CustomBusinessMonthEnd.copy
pandas.tseries.offsets.CustomBusinessMonthEnd.is_anchored
pandas.tseries.offsets.CustomBusinessMonthEnd.is_on_offset
pandas.tseries.offsets.CustomBusinessMonthEnd.is_month_start
pandas.tseries.offsets.CustomBusinessMonthEnd.is_month_end
pandas.tseries.offsets.CustomBusinessMonthEnd.is_quarter_start
pandas.tseries.offsets.CustomBusinessMonthEnd.is_quarter_end
pandas.tseries.offsets.CustomBusinessMonthEnd.is_year_start
pandas.tseries.offsets.CustomBusinessMonthEnd.is_year_end
pandas.tseries.offsets.CustomBusinessMonthBegin
pandas.tseries.offsets.CBMonthBegin
pandas.tseries.offsets.CustomBusinessMonthBegin.freqstr
pandas.tseries.offsets.CustomBusinessMonthBegin.kwds
pandas.tseries.offsets.CustomBusinessMonthBegin.m_offset
pandas.tseries.offsets.CustomBusinessMonthBegin.name
pandas.tseries.offsets.CustomBusinessMonthBegin.nanos
pandas.tseries.offsets.CustomBusinessMonthBegin.normalize
pandas.tseries.offsets.CustomBusinessMonthBegin.rule_code
pandas.tseries.offsets.CustomBusinessMonthBegin.n
pandas.tseries.offsets.CustomBusinessMonthBegin.weekmask
pandas.tseries.offsets.CustomBusinessMonthBegin.calendar
pandas.tseries.offsets.CustomBusinessMonthBegin.holidays
pandas.tseries.offsets.CustomBusinessMonthBegin.copy
pandas.tseries.offsets.CustomBusinessMonthBegin.is_anchored
pandas.tseries.offsets.CustomBusinessMonthBegin.is_on_offset
pandas.tseries.offsets.CustomBusinessMonthBegin.is_month_start
pandas.tseries.offsets.CustomBusinessMonthBegin.is_month_end
pandas.tseries.offsets.CustomBusinessMonthBegin.is_quarter_start
pandas.tseries.offsets.CustomBusinessMonthBegin.is_quarter_end
pandas.tseries.offsets.CustomBusinessMonthBegin.is_year_start
pandas.tseries.offsets.CustomBusinessMonthBegin.is_year_end
pandas.tseries.offsets.SemiMonthEnd
pandas.tseries.offsets.SemiMonthEnd.freqstr
pandas.tseries.offsets.SemiMonthEnd.kwds
pandas.tseries.offsets.SemiMonthEnd.name
pandas.tseries.offsets.SemiMonthEnd.nanos
pandas.tseries.offsets.SemiMonthEnd.normalize
pandas.tseries.offsets.SemiMonthEnd.rule_code
pandas.tseries.offsets.SemiMonthEnd.n
pandas.tseries.offsets.SemiMonthEnd.day_of_month
pandas.tseries.offsets.SemiMonthEnd.copy
pandas.tseries.offsets.SemiMonthEnd.is_anchored
pandas.tseries.offsets.SemiMonthEnd.is_on_offset
pandas.tseries.offsets.SemiMonthEnd.is_month_start
pandas.tseries.offsets.SemiMonthEnd.is_month_end
pandas.tseries.offsets.SemiMonthEnd.is_quarter_start
pandas.tseries.offsets.SemiMonthEnd.is_quarter_end
pandas.tseries.offsets.SemiMonthEnd.is_year_start
pandas.tseries.offsets.SemiMonthEnd.is_year_end
pandas.tseries.offsets.SemiMonthBegin
pandas.tseries.offsets.SemiMonthBegin.freqstr
pandas.tseries.offsets.SemiMonthBegin.kwds
pandas.tseries.offsets.SemiMonthBegin.name
pandas.tseries.offsets.SemiMonthBegin.nanos
pandas.tseries.offsets.SemiMonthBegin.normalize
pandas.tseries.offsets.SemiMonthBegin.rule_code
pandas.tseries.offsets.SemiMonthBegin.n
pandas.tseries.offsets.SemiMonthBegin.day_of_month
pandas.tseries.offsets.SemiMonthBegin.copy
pandas.tseries.offsets.SemiMonthBegin.is_anchored
pandas.tseries.offsets.SemiMonthBegin.is_on_offset
pandas.tseries.offsets.SemiMonthBegin.is_month_start
pandas.tseries.offsets.SemiMonthBegin.is_month_end
pandas.tseries.offsets.SemiMonthBegin.is_quarter_start
pandas.tseries.offsets.SemiMonthBegin.is_quarter_end
pandas.tseries.offsets.SemiMonthBegin.is_year_start
pandas.tseries.offsets.SemiMonthBegin.is_year_end
pandas.tseries.offsets.Week
pandas.tseries.offsets.Week.freqstr
pandas.tseries.offsets.Week.kwds
pandas.tseries.offsets.Week.name
pandas.tseries.offsets.Week.nanos
pandas.tseries.offsets.Week.normalize
pandas.tseries.offsets.Week.rule_code
pandas.tseries.offsets.Week.n
pandas.tseries.offsets.Week.weekday
pandas.tseries.offsets.Week.copy
pandas.tseries.offsets.Week.is_anchored
pandas.tseries.offsets.Week.is_on_offset
pandas.tseries.offsets.Week.is_month_start
pandas.tseries.offsets.Week.is_month_end
pandas.tseries.offsets.Week.is_quarter_start
pandas.tseries.offsets.Week.is_quarter_end
pandas.tseries.offsets.Week.is_year_start
pandas.tseries.offsets.Week.is_year_end
pandas.tseries.offsets.WeekOfMonth
pandas.tseries.offsets.WeekOfMonth.freqstr
pandas.tseries.offsets.WeekOfMonth.kwds
pandas.tseries.offsets.WeekOfMonth.name
pandas.tseries.offsets.WeekOfMonth.nanos
pandas.tseries.offsets.WeekOfMonth.normalize
pandas.tseries.offsets.WeekOfMonth.rule_code
pandas.tseries.offsets.WeekOfMonth.n
pandas.tseries.offsets.WeekOfMonth.week
pandas.tseries.offsets.WeekOfMonth.copy
pandas.tseries.offsets.WeekOfMonth.is_anchored
pandas.tseries.offsets.WeekOfMonth.is_on_offset
pandas.tseries.offsets.WeekOfMonth.weekday
pandas.tseries.offsets.WeekOfMonth.is_month_start
pandas.tseries.offsets.WeekOfMonth.is_month_end
pandas.tseries.offsets.WeekOfMonth.is_quarter_start
pandas.tseries.offsets.WeekOfMonth.is_quarter_end
pandas.tseries.offsets.WeekOfMonth.is_year_start
pandas.tseries.offsets.WeekOfMonth.is_year_end
pandas.tseries.offsets.LastWeekOfMonth
pandas.tseries.offsets.LastWeekOfMonth.freqstr
pandas.tseries.offsets.LastWeekOfMonth.kwds
pandas.tseries.offsets.LastWeekOfMonth.name
pandas.tseries.offsets.LastWeekOfMonth.nanos
pandas.tseries.offsets.LastWeekOfMonth.normalize
pandas.tseries.offsets.LastWeekOfMonth.rule_code
pandas.tseries.offsets.LastWeekOfMonth.n
pandas.tseries.offsets.LastWeekOfMonth.weekday
pandas.tseries.offsets.LastWeekOfMonth.week
pandas.tseries.offsets.LastWeekOfMonth.copy
pandas.tseries.offsets.LastWeekOfMonth.is_anchored
pandas.tseries.offsets.LastWeekOfMonth.is_on_offset
pandas.tseries.offsets.LastWeekOfMonth.is_month_start
pandas.tseries.offsets.LastWeekOfMonth.is_month_end
pandas.tseries.offsets.LastWeekOfMonth.is_quarter_start
pandas.tseries.offsets.LastWeekOfMonth.is_quarter_end
pandas.tseries.offsets.LastWeekOfMonth.is_year_start
pandas.tseries.offsets.LastWeekOfMonth.is_year_end
pandas.tseries.offsets.BQuarterEnd
pandas.tseries.offsets.BQuarterEnd.freqstr
pandas.tseries.offsets.BQuarterEnd.kwds
pandas.tseries.offsets.BQuarterEnd.name
pandas.tseries.offsets.BQuarterEnd.nanos
pandas.tseries.offsets.BQuarterEnd.normalize
pandas.tseries.offsets.BQuarterEnd.rule_code
pandas.tseries.offsets.BQuarterEnd.n
pandas.tseries.offsets.BQuarterEnd.startingMonth
pandas.tseries.offsets.BQuarterEnd.copy
pandas.tseries.offsets.BQuarterEnd.is_anchored
pandas.tseries.offsets.BQuarterEnd.is_on_offset
pandas.tseries.offsets.BQuarterEnd.is_month_start
pandas.tseries.offsets.BQuarterEnd.is_month_end
pandas.tseries.offsets.BQuarterEnd.is_quarter_start
pandas.tseries.offsets.BQuarterEnd.is_quarter_end
pandas.tseries.offsets.BQuarterEnd.is_year_start
pandas.tseries.offsets.BQuarterEnd.is_year_end
pandas.tseries.offsets.BQuarterBegin
pandas.tseries.offsets.BQuarterBegin.freqstr
pandas.tseries.offsets.BQuarterBegin.kwds
pandas.tseries.offsets.BQuarterBegin.name
pandas.tseries.offsets.BQuarterBegin.nanos
pandas.tseries.offsets.BQuarterBegin.normalize
pandas.tseries.offsets.BQuarterBegin.rule_code
pandas.tseries.offsets.BQuarterBegin.n
pandas.tseries.offsets.BQuarterBegin.startingMonth
pandas.tseries.offsets.BQuarterBegin.copy
pandas.tseries.offsets.BQuarterBegin.is_anchored
pandas.tseries.offsets.BQuarterBegin.is_on_offset
pandas.tseries.offsets.BQuarterBegin.is_month_start
pandas.tseries.offsets.BQuarterBegin.is_month_end
pandas.tseries.offsets.BQuarterBegin.is_quarter_start
pandas.tseries.offsets.BQuarterBegin.is_quarter_end
pandas.tseries.offsets.BQuarterBegin.is_year_start
pandas.tseries.offsets.BQuarterBegin.is_year_end
pandas.tseries.offsets.QuarterEnd
pandas.tseries.offsets.QuarterEnd.freqstr
pandas.tseries.offsets.QuarterEnd.kwds
pandas.tseries.offsets.QuarterEnd.name
pandas.tseries.offsets.QuarterEnd.nanos
pandas.tseries.offsets.QuarterEnd.normalize
pandas.tseries.offsets.QuarterEnd.rule_code
pandas.tseries.offsets.QuarterEnd.n
pandas.tseries.offsets.QuarterEnd.startingMonth
pandas.tseries.offsets.QuarterEnd.copy
pandas.tseries.offsets.QuarterEnd.is_anchored
pandas.tseries.offsets.QuarterEnd.is_on_offset
pandas.tseries.offsets.QuarterEnd.is_month_start
pandas.tseries.offsets.QuarterEnd.is_month_end
pandas.tseries.offsets.QuarterEnd.is_quarter_start
pandas.tseries.offsets.QuarterEnd.is_quarter_end
pandas.tseries.offsets.QuarterEnd.is_year_start
pandas.tseries.offsets.QuarterEnd.is_year_end
pandas.tseries.offsets.QuarterBegin
pandas.tseries.offsets.QuarterBegin.freqstr
pandas.tseries.offsets.QuarterBegin.kwds
pandas.tseries.offsets.QuarterBegin.name
pandas.tseries.offsets.QuarterBegin.nanos
pandas.tseries.offsets.QuarterBegin.normalize
pandas.tseries.offsets.QuarterBegin.rule_code
pandas.tseries.offsets.QuarterBegin.n
pandas.tseries.offsets.QuarterBegin.startingMonth
pandas.tseries.offsets.QuarterBegin.copy
pandas.tseries.offsets.QuarterBegin.is_anchored
pandas.tseries.offsets.QuarterBegin.is_on_offset
pandas.tseries.offsets.QuarterBegin.is_month_start
pandas.tseries.offsets.QuarterBegin.is_month_end
pandas.tseries.offsets.QuarterBegin.is_quarter_start
pandas.tseries.offsets.QuarterBegin.is_quarter_end
pandas.tseries.offsets.QuarterBegin.is_year_start
pandas.tseries.offsets.QuarterBegin.is_year_end
pandas.tseries.offsets.BYearEnd
pandas.tseries.offsets.BYearEnd.freqstr
pandas.tseries.offsets.BYearEnd.kwds
pandas.tseries.offsets.BYearEnd.name
pandas.tseries.offsets.BYearEnd.nanos
pandas.tseries.offsets.BYearEnd.normalize
pandas.tseries.offsets.BYearEnd.rule_code
pandas.tseries.offsets.BYearEnd.n
pandas.tseries.offsets.BYearEnd.month
pandas.tseries.offsets.BYearEnd.copy
pandas.tseries.offsets.BYearEnd.is_anchored
pandas.tseries.offsets.BYearEnd.is_on_offset
pandas.tseries.offsets.BYearEnd.is_month_start
pandas.tseries.offsets.BYearEnd.is_month_end
pandas.tseries.offsets.BYearEnd.is_quarter_start
pandas.tseries.offsets.BYearEnd.is_quarter_end
pandas.tseries.offsets.BYearEnd.is_year_start
pandas.tseries.offsets.BYearEnd.is_year_end
pandas.tseries.offsets.BYearBegin
pandas.tseries.offsets.BYearBegin.freqstr
pandas.tseries.offsets.BYearBegin.kwds
pandas.tseries.offsets.BYearBegin.name
pandas.tseries.offsets.BYearBegin.nanos
pandas.tseries.offsets.BYearBegin.normalize
pandas.tseries.offsets.BYearBegin.rule_code
pandas.tseries.offsets.BYearBegin.n
pandas.tseries.offsets.BYearBegin.month
pandas.tseries.offsets.BYearBegin.copy
pandas.tseries.offsets.BYearBegin.is_anchored
pandas.tseries.offsets.BYearBegin.is_on_offset
pandas.tseries.offsets.BYearBegin.is_month_start
pandas.tseries.offsets.BYearBegin.is_month_end
pandas.tseries.offsets.BYearBegin.is_quarter_start
pandas.tseries.offsets.BYearBegin.is_quarter_end
pandas.tseries.offsets.BYearBegin.is_year_start
pandas.tseries.offsets.BYearBegin.is_year_end
pandas.tseries.offsets.YearEnd
pandas.tseries.offsets.YearEnd.freqstr
pandas.tseries.offsets.YearEnd.kwds
pandas.tseries.offsets.YearEnd.name
pandas.tseries.offsets.YearEnd.nanos
pandas.tseries.offsets.YearEnd.normalize
pandas.tseries.offsets.YearEnd.rule_code
pandas.tseries.offsets.YearEnd.n
pandas.tseries.offsets.YearEnd.month
pandas.tseries.offsets.YearEnd.copy
pandas.tseries.offsets.YearEnd.is_anchored
pandas.tseries.offsets.YearEnd.is_on_offset
pandas.tseries.offsets.YearEnd.is_month_start
pandas.tseries.offsets.YearEnd.is_month_end
pandas.tseries.offsets.YearEnd.is_quarter_start
pandas.tseries.offsets.YearEnd.is_quarter_end
pandas.tseries.offsets.YearEnd.is_year_start
pandas.tseries.offsets.YearEnd.is_year_end
pandas.tseries.offsets.YearBegin
pandas.tseries.offsets.YearBegin.freqstr
pandas.tseries.offsets.YearBegin.kwds
pandas.tseries.offsets.YearBegin.name
pandas.tseries.offsets.YearBegin.nanos
pandas.tseries.offsets.YearBegin.normalize
pandas.tseries.offsets.YearBegin.rule_code
pandas.tseries.offsets.YearBegin.n
pandas.tseries.offsets.YearBegin.month
pandas.tseries.offsets.YearBegin.copy
pandas.tseries.offsets.YearBegin.is_anchored
pandas.tseries.offsets.YearBegin.is_on_offset
pandas.tseries.offsets.YearBegin.is_month_start
pandas.tseries.offsets.YearBegin.is_month_end
pandas.tseries.offsets.YearBegin.is_quarter_start
pandas.tseries.offsets.YearBegin.is_quarter_end
pandas.tseries.offsets.YearBegin.is_year_start
pandas.tseries.offsets.YearBegin.is_year_end
pandas.tseries.offsets.FY5253
pandas.tseries.offsets.FY5253.freqstr
pandas.tseries.offsets.FY5253.kwds
pandas.tseries.offsets.FY5253.name
pandas.tseries.offsets.FY5253.nanos
pandas.tseries.offsets.FY5253.normalize
pandas.tseries.offsets.FY5253.rule_code
pandas.tseries.offsets.FY5253.n
pandas.tseries.offsets.FY5253.startingMonth
pandas.tseries.offsets.FY5253.variation
pandas.tseries.offsets.FY5253.weekday
pandas.tseries.offsets.FY5253.copy
pandas.tseries.offsets.FY5253.get_rule_code_suffix
pandas.tseries.offsets.FY5253.get_year_end
pandas.tseries.offsets.FY5253.is_anchored
pandas.tseries.offsets.FY5253.is_on_offset
pandas.tseries.offsets.FY5253.is_month_start
pandas.tseries.offsets.FY5253.is_month_end
pandas.tseries.offsets.FY5253.is_quarter_start
pandas.tseries.offsets.FY5253.is_quarter_end
pandas.tseries.offsets.FY5253.is_year_start
pandas.tseries.offsets.FY5253.is_year_end
pandas.tseries.offsets.FY5253Quarter
pandas.tseries.offsets.FY5253Quarter.freqstr
pandas.tseries.offsets.FY5253Quarter.kwds
pandas.tseries.offsets.FY5253Quarter.name
pandas.tseries.offsets.FY5253Quarter.nanos
pandas.tseries.offsets.FY5253Quarter.normalize
pandas.tseries.offsets.FY5253Quarter.rule_code
pandas.tseries.offsets.FY5253Quarter.n
pandas.tseries.offsets.FY5253Quarter.qtr_with_extra_week
pandas.tseries.offsets.FY5253Quarter.startingMonth
pandas.tseries.offsets.FY5253Quarter.variation
pandas.tseries.offsets.FY5253Quarter.weekday
pandas.tseries.offsets.FY5253Quarter.copy
pandas.tseries.offsets.FY5253Quarter.get_rule_code_suffix
pandas.tseries.offsets.FY5253Quarter.get_weeks
pandas.tseries.offsets.FY5253Quarter.is_anchored
pandas.tseries.offsets.FY5253Quarter.is_on_offset
pandas.tseries.offsets.FY5253Quarter.year_has_extra_week
pandas.tseries.offsets.FY5253Quarter.is_month_start
pandas.tseries.offsets.FY5253Quarter.is_month_end
pandas.tseries.offsets.FY5253Quarter.is_quarter_start
pandas.tseries.offsets.FY5253Quarter.is_quarter_end
pandas.tseries.offsets.FY5253Quarter.is_year_start
pandas.tseries.offsets.FY5253Quarter.is_year_end
pandas.tseries.offsets.Easter
pandas.tseries.offsets.Easter.freqstr
pandas.tseries.offsets.Easter.kwds
pandas.tseries.offsets.Easter.name
pandas.tseries.offsets.Easter.nanos
pandas.tseries.offsets.Easter.normalize
pandas.tseries.offsets.Easter.rule_code
pandas.tseries.offsets.Easter.n
pandas.tseries.offsets.Easter.copy
pandas.tseries.offsets.Easter.is_anchored
pandas.tseries.offsets.Easter.is_on_offset
pandas.tseries.offsets.Easter.is_month_start
pandas.tseries.offsets.Easter.is_month_end
pandas.tseries.offsets.Easter.is_quarter_start
pandas.tseries.offsets.Easter.is_quarter_end
pandas.tseries.offsets.Easter.is_year_start
pandas.tseries.offsets.Easter.is_year_end
pandas.tseries.offsets.Tick
pandas.tseries.offsets.Tick.delta
pandas.tseries.offsets.Tick.freqstr
pandas.tseries.offsets.Tick.kwds
pandas.tseries.offsets.Tick.name
pandas.tseries.offsets.Tick.nanos
pandas.tseries.offsets.Tick.normalize
pandas.tseries.offsets.Tick.rule_code
pandas.tseries.offsets.Tick.n
pandas.tseries.offsets.Tick.copy
pandas.tseries.offsets.Tick.is_anchored
pandas.tseries.offsets.Tick.is_on_offset
pandas.tseries.offsets.Tick.is_month_start
pandas.tseries.offsets.Tick.is_month_end
pandas.tseries.offsets.Tick.is_quarter_start
pandas.tseries.offsets.Tick.is_quarter_end
pandas.tseries.offsets.Tick.is_year_start
pandas.tseries.offsets.Tick.is_year_end
pandas.tseries.offsets.Day
pandas.tseries.offsets.Day.delta
pandas.tseries.offsets.Day.freqstr
pandas.tseries.offsets.Day.kwds
pandas.tseries.offsets.Day.name
pandas.tseries.offsets.Day.nanos
pandas.tseries.offsets.Day.normalize
pandas.tseries.offsets.Day.rule_code
pandas.tseries.offsets.Day.n
pandas.tseries.offsets.Day.copy
pandas.tseries.offsets.Day.is_anchored
pandas.tseries.offsets.Day.is_on_offset
pandas.tseries.offsets.Day.is_month_start
pandas.tseries.offsets.Day.is_month_end
pandas.tseries.offsets.Day.is_quarter_start
pandas.tseries.offsets.Day.is_quarter_end
pandas.tseries.offsets.Day.is_year_start
pandas.tseries.offsets.Day.is_year_end
pandas.tseries.offsets.Hour
pandas.tseries.offsets.Hour.delta
pandas.tseries.offsets.Hour.freqstr
pandas.tseries.offsets.Hour.kwds
pandas.tseries.offsets.Hour.name
pandas.tseries.offsets.Hour.nanos
pandas.tseries.offsets.Hour.normalize
pandas.tseries.offsets.Hour.rule_code
pandas.tseries.offsets.Hour.n
pandas.tseries.offsets.Hour.copy
pandas.tseries.offsets.Hour.is_anchored
pandas.tseries.offsets.Hour.is_on_offset
pandas.tseries.offsets.Hour.is_month_start
pandas.tseries.offsets.Hour.is_month_end
pandas.tseries.offsets.Hour.is_quarter_start
pandas.tseries.offsets.Hour.is_quarter_end
pandas.tseries.offsets.Hour.is_year_start
pandas.tseries.offsets.Hour.is_year_end
pandas.tseries.offsets.Minute
pandas.tseries.offsets.Minute.delta
pandas.tseries.offsets.Minute.freqstr
pandas.tseries.offsets.Minute.kwds
pandas.tseries.offsets.Minute.name
pandas.tseries.offsets.Minute.nanos
pandas.tseries.offsets.Minute.normalize
pandas.tseries.offsets.Minute.rule_code
pandas.tseries.offsets.Minute.n
pandas.tseries.offsets.Minute.copy
pandas.tseries.offsets.Minute.is_anchored
pandas.tseries.offsets.Minute.is_on_offset
pandas.tseries.offsets.Minute.is_month_start
pandas.tseries.offsets.Minute.is_month_end
pandas.tseries.offsets.Minute.is_quarter_start
pandas.tseries.offsets.Minute.is_quarter_end
pandas.tseries.offsets.Minute.is_year_start
pandas.tseries.offsets.Minute.is_year_end
pandas.tseries.offsets.Second
pandas.tseries.offsets.Second.delta
pandas.tseries.offsets.Second.freqstr
pandas.tseries.offsets.Second.kwds
pandas.tseries.offsets.Second.name
pandas.tseries.offsets.Second.nanos
pandas.tseries.offsets.Second.normalize
pandas.tseries.offsets.Second.rule_code
pandas.tseries.offsets.Second.n
pandas.tseries.offsets.Second.copy
pandas.tseries.offsets.Second.is_anchored
pandas.tseries.offsets.Second.is_on_offset
pandas.tseries.offsets.Second.is_month_start
pandas.tseries.offsets.Second.is_month_end
pandas.tseries.offsets.Second.is_quarter_start
pandas.tseries.offsets.Second.is_quarter_end
pandas.tseries.offsets.Second.is_year_start
pandas.tseries.offsets.Second.is_year_end
pandas.tseries.offsets.Milli
pandas.tseries.offsets.Milli.delta
pandas.tseries.offsets.Milli.freqstr
pandas.tseries.offsets.Milli.kwds
pandas.tseries.offsets.Milli.name
pandas.tseries.offsets.Milli.nanos
pandas.tseries.offsets.Milli.normalize
pandas.tseries.offsets.Milli.rule_code
pandas.tseries.offsets.Milli.n
pandas.tseries.offsets.Milli.copy
pandas.tseries.offsets.Milli.is_anchored
pandas.tseries.offsets.Milli.is_on_offset
pandas.tseries.offsets.Milli.is_month_start
pandas.tseries.offsets.Milli.is_month_end
pandas.tseries.offsets.Milli.is_quarter_start
pandas.tseries.offsets.Milli.is_quarter_end
pandas.tseries.offsets.Milli.is_year_start
pandas.tseries.offsets.Milli.is_year_end
pandas.tseries.offsets.Micro
pandas.tseries.offsets.Micro.delta
pandas.tseries.offsets.Micro.freqstr
pandas.tseries.offsets.Micro.kwds
pandas.tseries.offsets.Micro.name
pandas.tseries.offsets.Micro.nanos
pandas.tseries.offsets.Micro.normalize
pandas.tseries.offsets.Micro.rule_code
pandas.tseries.offsets.Micro.n
pandas.tseries.offsets.Micro.copy
pandas.tseries.offsets.Micro.is_anchored
pandas.tseries.offsets.Micro.is_on_offset
pandas.tseries.offsets.Micro.is_month_start
pandas.tseries.offsets.Micro.is_month_end
pandas.tseries.offsets.Micro.is_quarter_start
pandas.tseries.offsets.Micro.is_quarter_end
pandas.tseries.offsets.Micro.is_year_start
pandas.tseries.offsets.Micro.is_year_end
pandas.tseries.offsets.Nano
pandas.tseries.offsets.Nano.delta
pandas.tseries.offsets.Nano.freqstr
pandas.tseries.offsets.Nano.kwds
pandas.tseries.offsets.Nano.name
pandas.tseries.offsets.Nano.nanos
pandas.tseries.offsets.Nano.normalize
pandas.tseries.offsets.Nano.rule_code
pandas.tseries.offsets.Nano.n
pandas.tseries.offsets.Nano.copy
pandas.tseries.offsets.Nano.is_anchored
pandas.tseries.offsets.Nano.is_on_offset
pandas.tseries.offsets.Nano.is_month_start
pandas.tseries.offsets.Nano.is_month_end
pandas.tseries.offsets.Nano.is_quarter_start
pandas.tseries.offsets.Nano.is_quarter_end
pandas.tseries.offsets.Nano.is_year_start
pandas.tseries.offsets.Nano.is_year_end
Window
GroupBy
Resampling
Style
Plotting
Options and settings
Extensions
Testing
Missing values
API reference
Date offsets
Date offsets
#
DateOffset
#
DateOffset
Standard kind of date increment used for a date range.
Properties
#
DateOffset.freqstr
Return a string representing the frequency.
DateOffset.kwds
Return a dict of extra parameters for the offset.
DateOffset.name
Return a string representing the base frequency.
DateOffset.nanos
DateOffset.normalize
DateOffset.rule_code
DateOffset.n
DateOffset.is_month_start
(ts)
Return boolean whether a timestamp occurs on the month start.
DateOffset.is_month_end
(ts)
Return boolean whether a timestamp occurs on the month end.
Methods
#
DateOffset.copy
()
Return a copy of the frequency.
DateOffset.is_anchored
()
(DEPRECATED) Return boolean whether the frequency is a unit frequency (n=1).
DateOffset.is_on_offset
(dt)
Return boolean whether a timestamp intersects with this frequency.
DateOffset.is_month_start
(ts)
Return boolean whether a timestamp occurs on the month start.
DateOffset.is_month_end
(ts)
Return boolean whether a timestamp occurs on the month end.
DateOffset.is_quarter_start
(ts)
Return boolean whether a timestamp occurs on the quarter start.
DateOffset.is_quarter_end
(ts)
Return boolean whether a timestamp occurs on the quarter end.
DateOffset.is_year_start
(ts)
Return boolean whether a timestamp occurs on the year start.
DateOffset.is_year_end
(ts)
Return boolean whether a timestamp occurs on the year end.
BusinessDay
#
BusinessDay
DateOffset subclass representing possibly n business days.
Alias:
BDay
alias of
BusinessDay
Properties
#
BusinessDay.freqstr
Return a string representing the frequency.
BusinessDay.kwds
Return a dict of extra parameters for the offset.
BusinessDay.name
Return a string representing the base frequency.
BusinessDay.nanos
BusinessDay.normalize
BusinessDay.rule_code
BusinessDay.n
BusinessDay.weekmask
BusinessDay.holidays
BusinessDay.calendar
Methods
#
BusinessDay.copy
()
Return a copy of the frequency.
BusinessDay.is_anchored
()
(DEPRECATED) Return boolean whether the frequency is a unit frequency (n=1).
BusinessDay.is_on_offset
(dt)
Return boolean whether a timestamp intersects with this frequency.
BusinessDay.is_month_start
(ts)
Return boolean whether a timestamp occurs on the month start.
BusinessDay.is_month_end
(ts)
Return boolean whether a timestamp occurs on the month end.
BusinessDay.is_quarter_start
(ts)
Return boolean whether a timestamp occurs on the quarter start.
BusinessDay.is_quarter_end
(ts)
Return boolean whether a timestamp occurs on the quarter end.
BusinessDay.is_year_start
(ts)
Return boolean whether a timestamp occurs on the year start.
BusinessDay.is_year_end
(ts)
Return boolean whether a timestamp occurs on the year end.
BusinessHour
#
BusinessHour
DateOffset subclass representing possibly n business hours.
Properties
#
BusinessHour.freqstr
Return a string representing the frequency.
BusinessHour.kwds
Return a dict of extra parameters for the offset.
BusinessHour.name
Return a string representing the base frequency.
BusinessHour.nanos
BusinessHour.normalize
BusinessHour.rule_code
BusinessHour.n
BusinessHour.start
BusinessHour.end
BusinessHour.weekmask
BusinessHour.holidays
BusinessHour.calendar
Methods
#
BusinessHour.copy
()
Return a copy of the frequency.
BusinessHour.is_anchored
()
(DEPRECATED) Return boolean whether the frequency is a unit frequency (n=1).
BusinessHour.is_on_offset
(dt)
Return boolean whether a timestamp intersects with this frequency.
BusinessHour.is_month_start
(ts)
Return boolean whether a timestamp occurs on the month start.
BusinessHour.is_month_end
(ts)
Return boolean whether a timestamp occurs on the month end.
BusinessHour.is_quarter_start
(ts)
Return boolean whether a timestamp occurs on the quarter start.
BusinessHour.is_quarter_end
(ts)
Return boolean whether a timestamp occurs on the quarter end.
BusinessHour.is_year_start
(ts)
Return boolean whether a timestamp occurs on the year start.
BusinessHour.is_year_end
(ts)
Return boolean whether a timestamp occurs on the year end.
CustomBusinessDay
#
CustomBusinessDay
DateOffset subclass representing possibly n custom business days.
Alias:
CDay
alias of
CustomBusinessDay
Properties
#
CustomBusinessDay.freqstr
Return a string representing the frequency.
CustomBusinessDay.kwds
Return a dict of extra parameters for the offset.
CustomBusinessDay.name
Return a string representing the base frequency.
CustomBusinessDay.nanos
CustomBusinessDay.normalize
CustomBusinessDay.rule_code
CustomBusinessDay.n
CustomBusinessDay.weekmask
CustomBusinessDay.calendar
CustomBusinessDay.holidays
Methods
#
CustomBusinessDay.copy
()
Return a copy of the frequency.
CustomBusinessDay.is_anchored
()
(DEPRECATED) Return boolean whether the frequency is a unit frequency (n=1).
CustomBusinessDay.is_on_offset
(dt)
Return boolean whether a timestamp intersects with this frequency.
CustomBusinessDay.is_month_start
(ts)
Return boolean whether a timestamp occurs on the month start.
CustomBusinessDay.is_month_end
(ts)
Return boolean whether a timestamp occurs on the month end.
CustomBusinessDay.is_quarter_start
(ts)
Return boolean whether a timestamp occurs on the quarter start.
CustomBusinessDay.is_quarter_end
(ts)
Return boolean whether a timestamp occurs on the quarter end.
CustomBusinessDay.is_year_start
(ts)
Return boolean whether a timestamp occurs on the year start.
CustomBusinessDay.is_year_end
(ts)
Return boolean whether a timestamp occurs on the year end.
CustomBusinessHour
#
CustomBusinessHour
DateOffset subclass representing possibly n custom business days.
Properties
#
CustomBusinessHour.freqstr
Return a string representing the frequency.
CustomBusinessHour.kwds
Return a dict of extra parameters for the offset.
CustomBusinessHour.name
Return a string representing the base frequency.
CustomBusinessHour.nanos
CustomBusinessHour.normalize
CustomBusinessHour.rule_code
CustomBusinessHour.n
CustomBusinessHour.weekmask
CustomBusinessHour.calendar
CustomBusinessHour.holidays
CustomBusinessHour.start
CustomBusinessHour.end
Methods
#
CustomBusinessHour.copy
()
Return a copy of the frequency.
CustomBusinessHour.is_anchored
()
(DEPRECATED) Return boolean whether the frequency is a unit frequency (n=1).
CustomBusinessHour.is_on_offset
(dt)
Return boolean whether a timestamp intersects with this frequency.
CustomBusinessHour.is_month_start
(ts)
Return boolean whether a timestamp occurs on the month start.
CustomBusinessHour.is_month_end
(ts)
Return boolean whether a timestamp occurs on the month end.
CustomBusinessHour.is_quarter_start
(ts)
Return boolean whether a timestamp occurs on the quarter start.
CustomBusinessHour.is_quarter_end
(ts)
Return boolean whether a timestamp occurs on the quarter end.
CustomBusinessHour.is_year_start
(ts)
Return boolean whether a timestamp occurs on the year start.
CustomBusinessHour.is_year_end
(ts)
Return boolean whether a timestamp occurs on the year end.
MonthEnd
#
MonthEnd
DateOffset of one month end.
Properties
#
MonthEnd.freqstr
Return a string representing the frequency.
MonthEnd.kwds
Return a dict of extra parameters for the offset.
MonthEnd.name
Return a string representing the base frequency.
MonthEnd.nanos
MonthEnd.normalize
MonthEnd.rule_code
MonthEnd.n
Methods
#
MonthEnd.copy
()
Return a copy of the frequency.
MonthEnd.is_anchored
()
(DEPRECATED) Return boolean whether the frequency is a unit frequency (n=1).
MonthEnd.is_on_offset
(dt)
Return boolean whether a timestamp intersects with this frequency.
MonthEnd.is_month_start
(ts)
Return boolean whether a timestamp occurs on the month start.
MonthEnd.is_month_end
(ts)
Return boolean whether a timestamp occurs on the month end.
MonthEnd.is_quarter_start
(ts)
Return boolean whether a timestamp occurs on the quarter start.
MonthEnd.is_quarter_end
(ts)
Return boolean whether a timestamp occurs on the quarter end.
MonthEnd.is_year_start
(ts)
Return boolean whether a timestamp occurs on the year start.
MonthEnd.is_year_end
(ts)
Return boolean whether a timestamp occurs on the year end.
MonthBegin
#
MonthBegin
DateOffset of one month at beginning.
Properties
#
MonthBegin.freqstr
Return a string representing the frequency.
MonthBegin.kwds
Return a dict of extra parameters for the offset.
MonthBegin.name
Return a string representing the base frequency.
MonthBegin.nanos
MonthBegin.normalize
MonthBegin.rule_code
MonthBegin.n
Methods
#
MonthBegin.copy
()
Return a copy of the frequency.
MonthBegin.is_anchored
()
(DEPRECATED) Return boolean whether the frequency is a unit frequency (n=1).
MonthBegin.is_on_offset
(dt)
Return boolean whether a timestamp intersects with this frequency.
MonthBegin.is_month_start
(ts)
Return boolean whether a timestamp occurs on the month start.
MonthBegin.is_month_end
(ts)
Return boolean whether a timestamp occurs on the month end.
MonthBegin.is_quarter_start
(ts)
Return boolean whether a timestamp occurs on the quarter start.
MonthBegin.is_quarter_end
(ts)
Return boolean whether a timestamp occurs on the quarter end.
MonthBegin.is_year_start
(ts)
Return boolean whether a timestamp occurs on the year start.
MonthBegin.is_year_end
(ts)
Return boolean whether a timestamp occurs on the year end.
BusinessMonthEnd
#
BusinessMonthEnd
DateOffset increments between the last business day of the month.
Alias:
BMonthEnd
alias of
BusinessMonthEnd
Properties
#
BusinessMonthEnd.freqstr
Return a string representing the frequency.
BusinessMonthEnd.kwds
Return a dict of extra parameters for the offset.
BusinessMonthEnd.name
Return a string representing the base frequency.
BusinessMonthEnd.nanos
BusinessMonthEnd.normalize
BusinessMonthEnd.rule_code
BusinessMonthEnd.n
Methods
#
BusinessMonthEnd.copy
()
Return a copy of the frequency.
BusinessMonthEnd.is_anchored
()
(DEPRECATED) Return boolean whether the frequency is a unit frequency (n=1).
BusinessMonthEnd.is_on_offset
(dt)
Return boolean whether a timestamp intersects with this frequency.
BusinessMonthEnd.is_month_start
(ts)
Return boolean whether a timestamp occurs on the month start.
BusinessMonthEnd.is_month_end
(ts)
Return boolean whether a timestamp occurs on the month end.
BusinessMonthEnd.is_quarter_start
(ts)
Return boolean whether a timestamp occurs on the quarter start.
BusinessMonthEnd.is_quarter_end
(ts)
Return boolean whether a timestamp occurs on the quarter end.
BusinessMonthEnd.is_year_start
(ts)
Return boolean whether a timestamp occurs on the year start.
BusinessMonthEnd.is_year_end
(ts)
Return boolean whether a timestamp occurs on the year end.
BusinessMonthBegin
#
BusinessMonthBegin
DateOffset of one month at the first business day.
Alias:
BMonthBegin
alias of
BusinessMonthBegin
Properties
#
BusinessMonthBegin.freqstr
Return a string representing the frequency.
BusinessMonthBegin.kwds
Return a dict of extra parameters for the offset.
BusinessMonthBegin.name
Return a string representing the base frequency.
BusinessMonthBegin.nanos
BusinessMonthBegin.normalize
BusinessMonthBegin.rule_code
BusinessMonthBegin.n
Methods
#
BusinessMonthBegin.copy
()
Return a copy of the frequency.
BusinessMonthBegin.is_anchored
()
(DEPRECATED) Return boolean whether the frequency is a unit frequency (n=1).
BusinessMonthBegin.is_on_offset
(dt)
Return boolean whether a timestamp intersects with this frequency.
BusinessMonthBegin.is_month_start
(ts)
Return boolean whether a timestamp occurs on the month start.
BusinessMonthBegin.is_month_end
(ts)
Return boolean whether a timestamp occurs on the month end.
BusinessMonthBegin.is_quarter_start
(ts)
Return boolean whether a timestamp occurs on the quarter start.
BusinessMonthBegin.is_quarter_end
(ts)
Return boolean whether a timestamp occurs on the quarter end.
BusinessMonthBegin.is_year_start
(ts)
Return boolean whether a timestamp occurs on the year start.
BusinessMonthBegin.is_year_end
(ts)
Return boolean whether a timestamp occurs on the year end.
CustomBusinessMonthEnd
#
CustomBusinessMonthEnd
DateOffset subclass representing custom business month(s).
Alias:
CBMonthEnd
alias of
CustomBusinessMonthEnd
Properties
#
CustomBusinessMonthEnd.freqstr
Return a string representing the frequency.
CustomBusinessMonthEnd.kwds
Return a dict of extra parameters for the offset.
CustomBusinessMonthEnd.m_offset
CustomBusinessMonthEnd.name
Return a string representing the base frequency.
CustomBusinessMonthEnd.nanos
CustomBusinessMonthEnd.normalize
CustomBusinessMonthEnd.rule_code
CustomBusinessMonthEnd.n
CustomBusinessMonthEnd.weekmask
CustomBusinessMonthEnd.calendar
CustomBusinessMonthEnd.holidays
Methods
#
CustomBusinessMonthEnd.copy
()
Return a copy of the frequency.
CustomBusinessMonthEnd.is_anchored
()
(DEPRECATED) Return boolean whether the frequency is a unit frequency (n=1).
CustomBusinessMonthEnd.is_on_offset
(dt)
Return boolean whether a timestamp intersects with this frequency.
CustomBusinessMonthEnd.is_month_start
(ts)
Return boolean whether a timestamp occurs on the month start.
CustomBusinessMonthEnd.is_month_end
(ts)
Return boolean whether a timestamp occurs on the month end.
CustomBusinessMonthEnd.is_quarter_start
(ts)
Return boolean whether a timestamp occurs on the quarter start.
CustomBusinessMonthEnd.is_quarter_end
(ts)
Return boolean whether a timestamp occurs on the quarter end.
CustomBusinessMonthEnd.is_year_start
(ts)
Return boolean whether a timestamp occurs on the year start.
CustomBusinessMonthEnd.is_year_end
(ts)
Return boolean whether a timestamp occurs on the year end.
CustomBusinessMonthBegin
#
CustomBusinessMonthBegin
DateOffset subclass representing custom business month(s).
Alias:
CBMonthBegin
alias of
CustomBusinessMonthBegin
Properties
#
CustomBusinessMonthBegin.freqstr
Return a string representing the frequency.
CustomBusinessMonthBegin.kwds
Return a dict of extra parameters for the offset.
CustomBusinessMonthBegin.m_offset
CustomBusinessMonthBegin.name
Return a string representing the base frequency.
CustomBusinessMonthBegin.nanos
CustomBusinessMonthBegin.normalize
CustomBusinessMonthBegin.rule_code
CustomBusinessMonthBegin.n
CustomBusinessMonthBegin.weekmask
CustomBusinessMonthBegin.calendar
CustomBusinessMonthBegin.holidays
Methods
#
CustomBusinessMonthBegin.copy
()
Return a copy of the frequency.
CustomBusinessMonthBegin.is_anchored
()
(DEPRECATED) Return boolean whether the frequency is a unit frequency (n=1).
CustomBusinessMonthBegin.is_on_offset
(dt)
Return boolean whether a timestamp intersects with this frequency.
CustomBusinessMonthBegin.is_month_start
(ts)
Return boolean whether a timestamp occurs on the month start.
CustomBusinessMonthBegin.is_month_end
(ts)
Return boolean whether a timestamp occurs on the month end.
CustomBusinessMonthBegin.is_quarter_start
(ts)
Return boolean whether a timestamp occurs on the quarter start.
CustomBusinessMonthBegin.is_quarter_end
(ts)
Return boolean whether a timestamp occurs on the quarter end.
CustomBusinessMonthBegin.is_year_start
(ts)
Return boolean whether a timestamp occurs on the year start.
CustomBusinessMonthBegin.is_year_end
(ts)
Return boolean whether a timestamp occurs on the year end.
SemiMonthEnd
#
SemiMonthEnd
Two DateOffset's per month repeating on the last day of the month & day_of_month.
Properties
#
SemiMonthEnd.freqstr
Return a string representing the frequency.
SemiMonthEnd.kwds
Return a dict of extra parameters for the offset.
SemiMonthEnd.name
Return a string representing the base frequency.
SemiMonthEnd.nanos
SemiMonthEnd.normalize
SemiMonthEnd.rule_code
SemiMonthEnd.n
SemiMonthEnd.day_of_month
Methods
#
SemiMonthEnd.copy
()
Return a copy of the frequency.
SemiMonthEnd.is_anchored
()
(DEPRECATED) Return boolean whether the frequency is a unit frequency (n=1).
SemiMonthEnd.is_on_offset
(dt)
Return boolean whether a timestamp intersects with this frequency.
SemiMonthEnd.is_month_start
(ts)
Return boolean whether a timestamp occurs on the month start.
SemiMonthEnd.is_month_end
(ts)
Return boolean whether a timestamp occurs on the month end.
SemiMonthEnd.is_quarter_start
(ts)
Return boolean whether a timestamp occurs on the quarter start.
SemiMonthEnd.is_quarter_end
(ts)
Return boolean whether a timestamp occurs on the quarter end.
SemiMonthEnd.is_year_start
(ts)
Return boolean whether a timestamp occurs on the year start.
SemiMonthEnd.is_year_end
(ts)
Return boolean whether a timestamp occurs on the year end.
SemiMonthBegin
#
SemiMonthBegin
Two DateOffset's per month repeating on the first day of the month & day_of_month.
Properties
#
SemiMonthBegin.freqstr
Return a string representing the frequency.
SemiMonthBegin.kwds
Return a dict of extra parameters for the offset.
SemiMonthBegin.name
Return a string representing the base frequency.
SemiMonthBegin.nanos
SemiMonthBegin.normalize
SemiMonthBegin.rule_code
SemiMonthBegin.n
SemiMonthBegin.day_of_month
Methods
#
SemiMonthBegin.copy
()
Return a copy of the frequency.
SemiMonthBegin.is_anchored
()
(DEPRECATED) Return boolean whether the frequency is a unit frequency (n=1).
SemiMonthBegin.is_on_offset
(dt)
Return boolean whether a timestamp intersects with this frequency.
SemiMonthBegin.is_month_start
(ts)
Return boolean whether a timestamp occurs on the month start.
SemiMonthBegin.is_month_end
(ts)
Return boolean whether a timestamp occurs on the month end.
SemiMonthBegin.is_quarter_start
(ts)
Return boolean whether a timestamp occurs on the quarter start.
SemiMonthBegin.is_quarter_end
(ts)
Return boolean whether a timestamp occurs on the quarter end.
SemiMonthBegin.is_year_start
(ts)
Return boolean whether a timestamp occurs on the year start.
SemiMonthBegin.is_year_end
(ts)
Return boolean whether a timestamp occurs on the year end.
Week
#
Week
Weekly offset.
Properties
#
Week.freqstr
Return a string representing the frequency.
Week.kwds
Return a dict of extra parameters for the offset.
Week.name
Return a string representing the base frequency.
Week.nanos
Week.normalize
Week.rule_code
Week.n
Week.weekday
Methods
#
Week.copy
()
Return a copy of the frequency.
Week.is_anchored
()
Return boolean whether the frequency is a unit frequency (n=1).
Week.is_on_offset
(dt)
Return boolean whether a timestamp intersects with this frequency.
Week.is_month_start
(ts)
Return boolean whether a timestamp occurs on the month start.
Week.is_month_end
(ts)
Return boolean whether a timestamp occurs on the month end.
Week.is_quarter_start
(ts)
Return boolean whether a timestamp occurs on the quarter start.
Week.is_quarter_end
(ts)
Return boolean whether a timestamp occurs on the quarter end.
Week.is_year_start
(ts)
Return boolean whether a timestamp occurs on the year start.
Week.is_year_end
(ts)
Return boolean whether a timestamp occurs on the year end.
WeekOfMonth
#
WeekOfMonth
Describes monthly dates like "the Tuesday of the 2nd week of each month".
Properties
#
WeekOfMonth.freqstr
Return a string representing the frequency.
WeekOfMonth.kwds
Return a dict of extra parameters for the offset.
WeekOfMonth.name
Return a string representing the base frequency.
WeekOfMonth.nanos
WeekOfMonth.normalize
WeekOfMonth.rule_code
WeekOfMonth.n
WeekOfMonth.week
Methods
#
WeekOfMonth.copy
()
Return a copy of the frequency.
WeekOfMonth.is_anchored
()
(DEPRECATED) Return boolean whether the frequency is a unit frequency (n=1).
WeekOfMonth.is_on_offset
(dt)
Return boolean whether a timestamp intersects with this frequency.
WeekOfMonth.weekday
WeekOfMonth.is_month_start
(ts)
Return boolean whether a timestamp occurs on the month start.
WeekOfMonth.is_month_end
(ts)
Return boolean whether a timestamp occurs on the month end.
WeekOfMonth.is_quarter_start
(ts)
Return boolean whether a timestamp occurs on the quarter start.
WeekOfMonth.is_quarter_end
(ts)
Return boolean whether a timestamp occurs on the quarter end.
WeekOfMonth.is_year_start
(ts)
Return boolean whether a timestamp occurs on the year start.
WeekOfMonth.is_year_end
(ts)
Return boolean whether a timestamp occurs on the year end.
LastWeekOfMonth
#
LastWeekOfMonth
Describes monthly dates in last week of month.
Properties
#
LastWeekOfMonth.freqstr
Return a string representing the frequency.
LastWeekOfMonth.kwds
Return a dict of extra parameters for the offset.
LastWeekOfMonth.name
Return a string representing the base frequency.
LastWeekOfMonth.nanos
LastWeekOfMonth.normalize
LastWeekOfMonth.rule_code
LastWeekOfMonth.n
LastWeekOfMonth.weekday
LastWeekOfMonth.week
Methods
#
LastWeekOfMonth.copy
()
Return a copy of the frequency.
LastWeekOfMonth.is_anchored
()
(DEPRECATED) Return boolean whether the frequency is a unit frequency (n=1).
LastWeekOfMonth.is_on_offset
(dt)
Return boolean whether a timestamp intersects with this frequency.
LastWeekOfMonth.is_month_start
(ts)
Return boolean whether a timestamp occurs on the month start.
LastWeekOfMonth.is_month_end
(ts)
Return boolean whether a timestamp occurs on the month end.
LastWeekOfMonth.is_quarter_start
(ts)
Return boolean whether a timestamp occurs on the quarter start.
LastWeekOfMonth.is_quarter_end
(ts)
Return boolean whether a timestamp occurs on the quarter end.
LastWeekOfMonth.is_year_start
(ts)
Return boolean whether a timestamp occurs on the year start.
LastWeekOfMonth.is_year_end
(ts)
Return boolean whether a timestamp occurs on the year end.
BQuarterEnd
#
BQuarterEnd
DateOffset increments between the last business day of each Quarter.
Properties
#
BQuarterEnd.freqstr
Return a string representing the frequency.
BQuarterEnd.kwds
Return a dict of extra parameters for the offset.
BQuarterEnd.name
Return a string representing the base frequency.
BQuarterEnd.nanos
BQuarterEnd.normalize
BQuarterEnd.rule_code
BQuarterEnd.n
BQuarterEnd.startingMonth
Methods
#
BQuarterEnd.copy
()
Return a copy of the frequency.
BQuarterEnd.is_anchored
()
Return boolean whether the frequency is a unit frequency (n=1).
BQuarterEnd.is_on_offset
(dt)
Return boolean whether a timestamp intersects with this frequency.
BQuarterEnd.is_month_start
(ts)
Return boolean whether a timestamp occurs on the month start.
BQuarterEnd.is_month_end
(ts)
Return boolean whether a timestamp occurs on the month end.
BQuarterEnd.is_quarter_start
(ts)
Return boolean whether a timestamp occurs on the quarter start.
BQuarterEnd.is_quarter_end
(ts)
Return boolean whether a timestamp occurs on the quarter end.
BQuarterEnd.is_year_start
(ts)
Return boolean whether a timestamp occurs on the year start.
BQuarterEnd.is_year_end
(ts)
Return boolean whether a timestamp occurs on the year end.
BQuarterBegin
#
BQuarterBegin
DateOffset increments between the first business day of each Quarter.
Properties
#
BQuarterBegin.freqstr
Return a string representing the frequency.
BQuarterBegin.kwds
Return a dict of extra parameters for the offset.
BQuarterBegin.name
Return a string representing the base frequency.
BQuarterBegin.nanos
BQuarterBegin.normalize
BQuarterBegin.rule_code
BQuarterBegin.n
BQuarterBegin.startingMonth
Methods
#
BQuarterBegin.copy
()
Return a copy of the frequency.
BQuarterBegin.is_anchored
()
Return boolean whether the frequency is a unit frequency (n=1).
BQuarterBegin.is_on_offset
(dt)
Return boolean whether a timestamp intersects with this frequency.
BQuarterBegin.is_month_start
(ts)
Return boolean whether a timestamp occurs on the month start.
BQuarterBegin.is_month_end
(ts)
Return boolean whether a timestamp occurs on the month end.
BQuarterBegin.is_quarter_start
(ts)
Return boolean whether a timestamp occurs on the quarter start.
BQuarterBegin.is_quarter_end
(ts)
Return boolean whether a timestamp occurs on the quarter end.
BQuarterBegin.is_year_start
(ts)
Return boolean whether a timestamp occurs on the year start.
BQuarterBegin.is_year_end
(ts)
Return boolean whether a timestamp occurs on the year end.
QuarterEnd
#
QuarterEnd
DateOffset increments between Quarter end dates.
Properties
#
QuarterEnd.freqstr
Return a string representing the frequency.
QuarterEnd.kwds
Return a dict of extra parameters for the offset.
QuarterEnd.name
Return a string representing the base frequency.
QuarterEnd.nanos
QuarterEnd.normalize
QuarterEnd.rule_code
QuarterEnd.n
QuarterEnd.startingMonth
Methods
#
QuarterEnd.copy
()
Return a copy of the frequency.
QuarterEnd.is_anchored
()
Return boolean whether the frequency is a unit frequency (n=1).
QuarterEnd.is_on_offset
(dt)
Return boolean whether a timestamp intersects with this frequency.
QuarterEnd.is_month_start
(ts)
Return boolean whether a timestamp occurs on the month start.
QuarterEnd.is_month_end
(ts)
Return boolean whether a timestamp occurs on the month end.
QuarterEnd.is_quarter_start
(ts)
Return boolean whether a timestamp occurs on the quarter start.
QuarterEnd.is_quarter_end
(ts)
Return boolean whether a timestamp occurs on the quarter end.
QuarterEnd.is_year_start
(ts)
Return boolean whether a timestamp occurs on the year start.
QuarterEnd.is_year_end
(ts)
Return boolean whether a timestamp occurs on the year end.
QuarterBegin
#
QuarterBegin
DateOffset increments between Quarter start dates.
Properties
#
QuarterBegin.freqstr
Return a string representing the frequency.
QuarterBegin.kwds
Return a dict of extra parameters for the offset.
QuarterBegin.name
Return a string representing the base frequency.
QuarterBegin.nanos
QuarterBegin.normalize
QuarterBegin.rule_code
QuarterBegin.n
QuarterBegin.startingMonth
Methods
#
QuarterBegin.copy
()
Return a copy of the frequency.
QuarterBegin.is_anchored
()
Return boolean whether the frequency is a unit frequency (n=1).
QuarterBegin.is_on_offset
(dt)
Return boolean whether a timestamp intersects with this frequency.
QuarterBegin.is_month_start
(ts)
Return boolean whether a timestamp occurs on the month start.
QuarterBegin.is_month_end
(ts)
Return boolean whether a timestamp occurs on the month end.
QuarterBegin.is_quarter_start
(ts)
Return boolean whether a timestamp occurs on the quarter start.
QuarterBegin.is_quarter_end
(ts)
Return boolean whether a timestamp occurs on the quarter end.
QuarterBegin.is_year_start
(ts)
Return boolean whether a timestamp occurs on the year start.
QuarterBegin.is_year_end
(ts)
Return boolean whether a timestamp occurs on the year end.
BYearEnd
#
BYearEnd
DateOffset increments between the last business day of the year.
Properties
#
BYearEnd.freqstr
Return a string representing the frequency.
BYearEnd.kwds
Return a dict of extra parameters for the offset.
BYearEnd.name
Return a string representing the base frequency.
BYearEnd.nanos
BYearEnd.normalize
BYearEnd.rule_code
BYearEnd.n
BYearEnd.month
Methods
#
BYearEnd.copy
()
Return a copy of the frequency.
BYearEnd.is_anchored
()
(DEPRECATED) Return boolean whether the frequency is a unit frequency (n=1).
BYearEnd.is_on_offset
(dt)
Return boolean whether a timestamp intersects with this frequency.
BYearEnd.is_month_start
(ts)
Return boolean whether a timestamp occurs on the month start.
BYearEnd.is_month_end
(ts)
Return boolean whether a timestamp occurs on the month end.
BYearEnd.is_quarter_start
(ts)
Return boolean whether a timestamp occurs on the quarter start.
BYearEnd.is_quarter_end
(ts)
Return boolean whether a timestamp occurs on the quarter end.
BYearEnd.is_year_start
(ts)
Return boolean whether a timestamp occurs on the year start.
BYearEnd.is_year_end
(ts)
Return boolean whether a timestamp occurs on the year end.
BYearBegin
#
BYearBegin
DateOffset increments between the first business day of the year.
Properties
#
BYearBegin.freqstr
Return a string representing the frequency.
BYearBegin.kwds
Return a dict of extra parameters for the offset.
BYearBegin.name
Return a string representing the base frequency.
BYearBegin.nanos
BYearBegin.normalize
BYearBegin.rule_code
BYearBegin.n
BYearBegin.month
Methods
#
BYearBegin.copy
()
Return a copy of the frequency.
BYearBegin.is_anchored
()
(DEPRECATED) Return boolean whether the frequency is a unit frequency (n=1).
BYearBegin.is_on_offset
(dt)
Return boolean whether a timestamp intersects with this frequency.
BYearBegin.is_month_start
(ts)
Return boolean whether a timestamp occurs on the month start.
BYearBegin.is_month_end
(ts)
Return boolean whether a timestamp occurs on the month end.
BYearBegin.is_quarter_start
(ts)
Return boolean whether a timestamp occurs on the quarter start.
BYearBegin.is_quarter_end
(ts)
Return boolean whether a timestamp occurs on the quarter end.
BYearBegin.is_year_start
(ts)
Return boolean whether a timestamp occurs on the year start.
BYearBegin.is_year_end
(ts)
Return boolean whether a timestamp occurs on the year end.
YearEnd
#
YearEnd
DateOffset increments between calendar year end dates.
Properties
#
YearEnd.freqstr
Return a string representing the frequency.
YearEnd.kwds
Return a dict of extra parameters for the offset.
YearEnd.name
Return a string representing the base frequency.
YearEnd.nanos
YearEnd.normalize
YearEnd.rule_code
YearEnd.n
YearEnd.month
Methods
#
YearEnd.copy
()
Return a copy of the frequency.
YearEnd.is_anchored
()
(DEPRECATED) Return boolean whether the frequency is a unit frequency (n=1).
YearEnd.is_on_offset
(dt)
Return boolean whether a timestamp intersects with this frequency.
YearEnd.is_month_start
(ts)
Return boolean whether a timestamp occurs on the month start.
YearEnd.is_month_end
(ts)
Return boolean whether a timestamp occurs on the month end.
YearEnd.is_quarter_start
(ts)
Return boolean whether a timestamp occurs on the quarter start.
YearEnd.is_quarter_end
(ts)
Return boolean whether a timestamp occurs on the quarter end.
YearEnd.is_year_start
(ts)
Return boolean whether a timestamp occurs on the year start.
YearEnd.is_year_end
(ts)
Return boolean whether a timestamp occurs on the year end.
YearBegin
#
YearBegin
DateOffset increments between calendar year begin dates.
Properties
#
YearBegin.freqstr
Return a string representing the frequency.
YearBegin.kwds
Return a dict of extra parameters for the offset.
YearBegin.name
Return a string representing the base frequency.
YearBegin.nanos
YearBegin.normalize
YearBegin.rule_code
YearBegin.n
YearBegin.month
Methods
#
YearBegin.copy
()
Return a copy of the frequency.
YearBegin.is_anchored
()
(DEPRECATED) Return boolean whether the frequency is a unit frequency (n=1).
YearBegin.is_on_offset
(dt)
Return boolean whether a timestamp intersects with this frequency.
YearBegin.is_month_start
(ts)
Return boolean whether a timestamp occurs on the month start.
YearBegin.is_month_end
(ts)
Return boolean whether a timestamp occurs on the month end.
YearBegin.is_quarter_start
(ts)
Return boolean whether a timestamp occurs on the quarter start.
YearBegin.is_quarter_end
(ts)
Return boolean whether a timestamp occurs on the quarter end.
YearBegin.is_year_start
(ts)
Return boolean whether a timestamp occurs on the year start.
YearBegin.is_year_end
(ts)
Return boolean whether a timestamp occurs on the year end.
FY5253
#
FY5253
Describes 52-53 week fiscal year.
Properties
#
FY5253.freqstr
Return a string representing the frequency.
FY5253.kwds
Return a dict of extra parameters for the offset.
FY5253.name
Return a string representing the base frequency.
FY5253.nanos
FY5253.normalize
FY5253.rule_code
FY5253.n
FY5253.startingMonth
FY5253.variation
FY5253.weekday
Methods
#
FY5253.copy
()
Return a copy of the frequency.
FY5253.get_rule_code_suffix
()
FY5253.get_year_end
(dt)
FY5253.is_anchored
()
Return boolean whether the frequency is a unit frequency (n=1).
FY5253.is_on_offset
(dt)
Return boolean whether a timestamp intersects with this frequency.
FY5253.is_month_start
(ts)
Return boolean whether a timestamp occurs on the month start.
FY5253.is_month_end
(ts)
Return boolean whether a timestamp occurs on the month end.
FY5253.is_quarter_start
(ts)
Return boolean whether a timestamp occurs on the quarter start.
FY5253.is_quarter_end
(ts)
Return boolean whether a timestamp occurs on the quarter end.
FY5253.is_year_start
(ts)
Return boolean whether a timestamp occurs on the year start.
FY5253.is_year_end
(ts)
Return boolean whether a timestamp occurs on the year end.
FY5253Quarter
#
FY5253Quarter
DateOffset increments between business quarter dates for 52-53 week fiscal year.
Properties
#
FY5253Quarter.freqstr
Return a string representing the frequency.
FY5253Quarter.kwds
Return a dict of extra parameters for the offset.
FY5253Quarter.name
Return a string representing the base frequency.
FY5253Quarter.nanos
FY5253Quarter.normalize
FY5253Quarter.rule_code
FY5253Quarter.n
FY5253Quarter.qtr_with_extra_week
FY5253Quarter.startingMonth
FY5253Quarter.variation
FY5253Quarter.weekday
Methods
#
FY5253Quarter.copy
()
Return a copy of the frequency.
FY5253Quarter.get_rule_code_suffix
()
FY5253Quarter.get_weeks
(dt)
FY5253Quarter.is_anchored
()
Return boolean whether the frequency is a unit frequency (n=1).
FY5253Quarter.is_on_offset
(dt)
Return boolean whether a timestamp intersects with this frequency.
FY5253Quarter.year_has_extra_week
(dt)
FY5253Quarter.is_month_start
(ts)
Return boolean whether a timestamp occurs on the month start.
FY5253Quarter.is_month_end
(ts)
Return boolean whether a timestamp occurs on the month end.
FY5253Quarter.is_quarter_start
(ts)
Return boolean whether a timestamp occurs on the quarter start.
FY5253Quarter.is_quarter_end
(ts)
Return boolean whether a timestamp occurs on the quarter end.
FY5253Quarter.is_year_start
(ts)
Return boolean whether a timestamp occurs on the year start.
FY5253Quarter.is_year_end
(ts)
Return boolean whether a timestamp occurs on the year end.
Easter
#
Easter
DateOffset for the Easter holiday using logic defined in dateutil.
Properties
#
Easter.freqstr
Return a string representing the frequency.
Easter.kwds
Return a dict of extra parameters for the offset.
Easter.name
Return a string representing the base frequency.
Easter.nanos
Easter.normalize
Easter.rule_code
Easter.n
Methods
#
Easter.copy
()
Return a copy of the frequency.
Easter.is_anchored
()
(DEPRECATED) Return boolean whether the frequency is a unit frequency (n=1).
Easter.is_on_offset
(dt)
Return boolean whether a timestamp intersects with this frequency.
Easter.is_month_start
(ts)
Return boolean whether a timestamp occurs on the month start.
Easter.is_month_end
(ts)
Return boolean whether a timestamp occurs on the month end.
Easter.is_quarter_start
(ts)
Return boolean whether a timestamp occurs on the quarter start.
Easter.is_quarter_end
(ts)
Return boolean whether a timestamp occurs on the quarter end.
Easter.is_year_start
(ts)
Return boolean whether a timestamp occurs on the year start.
Easter.is_year_end
(ts)
Return boolean whether a timestamp occurs on the year end.
Tick
#
Tick
Properties
#
Tick.delta
Tick.freqstr
Return a string representing the frequency.
Tick.kwds
Return a dict of extra parameters for the offset.
Tick.name
Return a string representing the base frequency.
Tick.nanos
Return an integer of the total number of nanoseconds.
Tick.normalize
Tick.rule_code
Tick.n
Methods
#
Tick.copy
()
Return a copy of the frequency.
Tick.is_anchored
()
(DEPRECATED) Return False.
Tick.is_on_offset
(dt)
Return boolean whether a timestamp intersects with this frequency.
Tick.is_month_start
(ts)
Return boolean whether a timestamp occurs on the month start.
Tick.is_month_end
(ts)
Return boolean whether a timestamp occurs on the month end.
Tick.is_quarter_start
(ts)
Return boolean whether a timestamp occurs on the quarter start.
Tick.is_quarter_end
(ts)
Return boolean whether a timestamp occurs on the quarter end.
Tick.is_year_start
(ts)
Return boolean whether a timestamp occurs on the year start.
Tick.is_year_end
(ts)
Return boolean whether a timestamp occurs on the year end.
Day
#
Day
Offset
n
days.
Properties
#
Day.delta
Day.freqstr
Return a string representing the frequency.
Day.kwds
Return a dict of extra parameters for the offset.
Day.name
Return a string representing the base frequency.
Day.nanos
Return an integer of the total number of nanoseconds.
Day.normalize
Day.rule_code
Day.n
Methods
#
Day.copy
()
Return a copy of the frequency.
Day.is_anchored
()
(DEPRECATED) Return False.
Day.is_on_offset
(dt)
Return boolean whether a timestamp intersects with this frequency.
Day.is_month_start
(ts)
Return boolean whether a timestamp occurs on the month start.
Day.is_month_end
(ts)
Return boolean whether a timestamp occurs on the month end.
Day.is_quarter_start
(ts)
Return boolean whether a timestamp occurs on the quarter start.
Day.is_quarter_end
(ts)
Return boolean whether a timestamp occurs on the quarter end.
Day.is_year_start
(ts)
Return boolean whether a timestamp occurs on the year start.
Day.is_year_end
(ts)
Return boolean whether a timestamp occurs on the year end.
Hour
#
Hour
Offset
n
hours.
Properties
#
Hour.delta
Hour.freqstr
Return a string representing the frequency.
Hour.kwds
Return a dict of extra parameters for the offset.
Hour.name
Return a string representing the base frequency.
Hour.nanos
Return an integer of the total number of nanoseconds.
Hour.normalize
Hour.rule_code
Hour.n
Methods
#
Hour.copy
()
Return a copy of the frequency.
Hour.is_anchored
()
(DEPRECATED) Return False.
Hour.is_on_offset
(dt)
Return boolean whether a timestamp intersects with this frequency.
Hour.is_month_start
(ts)
Return boolean whether a timestamp occurs on the month start.
Hour.is_month_end
(ts)
Return boolean whether a timestamp occurs on the month end.
Hour.is_quarter_start
(ts)
Return boolean whether a timestamp occurs on the quarter start.
Hour.is_quarter_end
(ts)
Return boolean whether a timestamp occurs on the quarter end.
Hour.is_year_start
(ts)
Return boolean whether a timestamp occurs on the year start.
Hour.is_year_end
(ts)
Return boolean whether a timestamp occurs on the year end.
Minute
#
Minute
Offset
n
minutes.
Properties
#
Minute.delta
Minute.freqstr
Return a string representing the frequency.
Minute.kwds
Return a dict of extra parameters for the offset.
Minute.name
Return a string representing the base frequency.
Minute.nanos
Return an integer of the total number of nanoseconds.
Minute.normalize
Minute.rule_code
Minute.n
Methods
#
Minute.copy
()
Return a copy of the frequency.
Minute.is_anchored
()
(DEPRECATED) Return False.
Minute.is_on_offset
(dt)
Return boolean whether a timestamp intersects with this frequency.
Minute.is_month_start
(ts)
Return boolean whether a timestamp occurs on the month start.
Minute.is_month_end
(ts)
Return boolean whether a timestamp occurs on the month end.
Minute.is_quarter_start
(ts)
Return boolean whether a timestamp occurs on the quarter start.
Minute.is_quarter_end
(ts)
Return boolean whether a timestamp occurs on the quarter end.
Minute.is_year_start
(ts)
Return boolean whether a timestamp occurs on the year start.
Minute.is_year_end
(ts)
Return boolean whether a timestamp occurs on the year end.
Second
#
Second
Offset
n
seconds.
Properties
#
Second.delta
Second.freqstr
Return a string representing the frequency.
Second.kwds
Return a dict of extra parameters for the offset.
Second.name
Return a string representing the base frequency.
Second.nanos
Return an integer of the total number of nanoseconds.
Second.normalize
Second.rule_code
Second.n
Methods
#
Second.copy
()
Return a copy of the frequency.
Second.is_anchored
()
(DEPRECATED) Return False.
Second.is_on_offset
(dt)
Return boolean whether a timestamp intersects with this frequency.
Second.is_month_start
(ts)
Return boolean whether a timestamp occurs on the month start.
Second.is_month_end
(ts)
Return boolean whether a timestamp occurs on the month end.
Second.is_quarter_start
(ts)
Return boolean whether a timestamp occurs on the quarter start.
Second.is_quarter_end
(ts)
Return boolean whether a timestamp occurs on the quarter end.
Second.is_year_start
(ts)
Return boolean whether a timestamp occurs on the year start.
Second.is_year_end
(ts)
Return boolean whether a timestamp occurs on the year end.
Milli
#
Milli
Offset
n
milliseconds.
Properties
#
Milli.delta
Milli.freqstr
Return a string representing the frequency.
Milli.kwds
Return a dict of extra parameters for the offset.
Milli.name
Return a string representing the base frequency.
Milli.nanos
Return an integer of the total number of nanoseconds.
Milli.normalize
Milli.rule_code
Milli.n
Methods
#
Milli.copy
()
Return a copy of the frequency.
Milli.is_anchored
()
(DEPRECATED) Return False.
Milli.is_on_offset
(dt)
Return boolean whether a timestamp intersects with this frequency.
Milli.is_month_start
(ts)
Return boolean whether a timestamp occurs on the month start.
Milli.is_month_end
(ts)
Return boolean whether a timestamp occurs on the month end.
Milli.is_quarter_start
(ts)
Return boolean whether a timestamp occurs on the quarter start.
Milli.is_quarter_end
(ts)
Return boolean whether a timestamp occurs on the quarter end.
Milli.is_year_start
(ts)
Return boolean whether a timestamp occurs on the year start.
Milli.is_year_end
(ts)
Return boolean whether a timestamp occurs on the year end.
Micro
#
Micro
Offset
n
microseconds.
Properties
#
Micro.delta
Micro.freqstr
Return a string representing the frequency.
Micro.kwds
Return a dict of extra parameters for the offset.
Micro.name
Return a string representing the base frequency.
Micro.nanos
Return an integer of the total number of nanoseconds.
Micro.normalize
Micro.rule_code
Micro.n
Methods
#
Micro.copy
()
Return a copy of the frequency.
Micro.is_anchored
()
(DEPRECATED) Return False.
Micro.is_on_offset
(dt)
Return boolean whether a timestamp intersects with this frequency.
Micro.is_month_start
(ts)
Return boolean whether a timestamp occurs on the month start.
Micro.is_month_end
(ts)
Return boolean whether a timestamp occurs on the month end.
Micro.is_quarter_start
(ts)
Return boolean whether a timestamp occurs on the quarter start.
Micro.is_quarter_end
(ts)
Return boolean whether a timestamp occurs on the quarter end.
Micro.is_year_start
(ts)
Return boolean whether a timestamp occurs on the year start.
Micro.is_year_end
(ts)
Return boolean whether a timestamp occurs on the year end.
Nano
#
Nano
Offset
n
nanoseconds.
Properties
#
Nano.delta
Nano.freqstr
Return a string representing the frequency.
Nano.kwds
Return a dict of extra parameters for the offset.
Nano.name
Return a string representing the base frequency.
Nano.nanos
Return an integer of the total number of nanoseconds.
Nano.normalize
Nano.rule_code
Nano.n
Methods
#
Nano.copy
()
Return a copy of the frequency.
Nano.is_anchored
()
(DEPRECATED) Return False.
Nano.is_on_offset
(dt)
Return boolean whether a timestamp intersects with this frequency.
Nano.is_month_start
(ts)
Return boolean whether a timestamp occurs on the month start.
Nano.is_month_end
(ts)
Return boolean whether a timestamp occurs on the month end.
Nano.is_quarter_start
(ts)
Return boolean whether a timestamp occurs on the quarter start.
Nano.is_quarter_end
(ts)
Return boolean whether a timestamp occurs on the quarter end.
Nano.is_year_start
(ts)
Return boolean whether a timestamp occurs on the year start.
Nano.is_year_end
(ts)
Return boolean whether a timestamp occurs on the year end.
Frequencies
#
to_offset
(freq[,Ã‚Â is_period])
Return DateOffset object from string or datetime.timedelta object.
previous
pandas.PeriodIndex.from_ordinals
next
pandas.tseries.offsets.DateOffset
On this page
Date offsets
DateOffset
Properties
Methods
BusinessDay
Properties
Methods
BusinessHour
Properties
Methods
CustomBusinessDay
Properties
Methods
CustomBusinessHour
Properties
Methods
MonthEnd
Properties
Methods
MonthBegin
Properties
Methods
BusinessMonthEnd
Properties
Methods
BusinessMonthBegin
Properties
Methods
CustomBusinessMonthEnd
Properties
Methods
CustomBusinessMonthBegin
Properties
Methods
SemiMonthEnd
Properties
Methods
SemiMonthBegin
Properties
Methods
Week
Properties
Methods
WeekOfMonth
Properties
Methods
LastWeekOfMonth
Properties
Methods
BQuarterEnd
Properties
Methods
BQuarterBegin
Properties
Methods
QuarterEnd
Properties
Methods
QuarterBegin
Properties
Methods
BYearEnd
Properties
Methods
BYearBegin
Properties
Methods
YearEnd
Properties
Methods
YearBegin
Properties
Methods
FY5253
Properties
Methods
FY5253Quarter
Properties
Methods
Easter
Properties
Methods
Tick
Properties
Methods
Day
Properties
Methods
Hour
Properties
Methods
Minute
Properties
Methods
Second
Properties
Methods
Milli
Properties
Methods
Micro
Properties
Methods
Nano
Properties
Methods
Frequencies
Show Source
&copy 2025, pandas via
NumFOCUS, Inc.
Hosted by
OVHcloud
.
Created using
Sphinx
8.1.3.
Built with the
PyData Sphinx Theme
0.14.4.