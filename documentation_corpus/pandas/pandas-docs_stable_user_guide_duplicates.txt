Duplicate Labels — pandas 2.3.0 documentation
Skip to main content
Back to top
Ctrl
+
K
Site Navigation
Getting started
User Guide
API reference
Development
Release notes
GitHub
Twitter
Mastodon
Site Navigation
Getting started
User Guide
API reference
Development
Release notes
GitHub
Twitter
Mastodon
10 minutes to pandas
Intro to data structures
Essential basic functionality
IO tools (text, CSV, HDF5, â¦)
PyArrow Functionality
Indexing and selecting data
MultiIndex / advanced indexing
Copy-on-Write (CoW)
Merge, join, concatenate and compare
Reshaping and pivot tables
Working with text data
Working with missing data
Duplicate Labels
Categorical data
Nullable integer data type
Nullable Boolean data type
Chart visualization
Table Visualization
Group by: split-apply-combine
Windowing operations
Time series / date functionality
Time deltas
Options and settings
Enhancing performance
Scaling to large datasets
Sparse data structures
Frequently Asked Questions (FAQ)
Cookbook
User Guide
Duplicate Labels
Duplicate Labels
#
Index
objects are not required to be unique; you can have duplicate row
or column labels. This may be a bit confusing at first. If youâre familiar with
SQL, you know that row labels are similar to a primary key on a table, and you
would never want duplicates in a SQL table. But one of pandasâ roles is to clean
messy, real-world data before it goes to some downstream system. And real-world
data has duplicates, even in fields that are supposed to be unique.
This section describes how duplicate labels change the behavior of certain
operations, and how prevent duplicates from arising during operations, or to
detect them if they do.
In [1]:
import
pandas
as
pd
In [2]:
import
numpy
as
np
Consequences of Duplicate Labels
#
Some pandas methods (
Series.reindex()
for example) just donât work with
duplicates present. The output canât be determined, and so pandas raises.
In [3]:
s1
=
pd
.
Series
([
0
,
1
,
2
],
index
=
[
"a"
,
"b"
,
"b"
])
In [4]:
s1
.
reindex
([
"a"
,
"b"
,
"c"
])
---------------------------------------------------------------------------
ValueError
Traceback (most recent call last)
Cell
In
[
4
],
line
1
---->
1
s1
.
reindex
([
"a"
,
"b"
,
"c"
])
File ~/work/pandas/pandas/pandas/core/series.py:5164,
in
Series.reindex
(self, index, axis, method, copy, level, fill_value, limit, tolerance)
5147
@doc
(
5148
NDFrame
.
reindex
,
# type: ignore[has-type]
5149
klass
=
_shared_doc_kwargs
[
"klass"
],
(
...
)
5162
tolerance
=
None
,
5163
)
->
Series
:
->
5164
return
super
()
.
reindex
(
5165
index
=
index
,
5166
method
=
method
,
5167
copy
=
copy
,
5168
level
=
level
,
5169
fill_value
=
fill_value
,
5170
limit
=
limit
,
5171
tolerance
=
tolerance
,
5172
)
File ~/work/pandas/pandas/pandas/core/generic.py:5629,
in
NDFrame.reindex
(self, labels, index, columns, axis, method, copy, level, fill_value, limit, tolerance)
5626
return
self
.
_reindex_multi
(
axes
,
copy
,
fill_value
)
5628
# perform the reindex on the axes
->
5629
return
self
.
_reindex_axes
(
5630
axes
,
level
,
limit
,
tolerance
,
method
,
fill_value
,
copy
5631
)
.
__finalize__
(
self
,
method
=
"reindex"
)
File ~/work/pandas/pandas/pandas/core/generic.py:5652,
in
NDFrame._reindex_axes
(self, axes, level, limit, tolerance, method, fill_value, copy)
5649
continue
5651
ax
=
self
.
_get_axis
(
a
)
->
5652
new_index
,
indexer
=
ax
.
reindex
(
5653
labels
,
level
=
level
,
limit
=
limit
,
tolerance
=
tolerance
,
method
=
method
5654
)
5656
axis
=
self
.
_get_axis_number
(
a
)
5657
obj
=
obj
.
_reindex_with_indexers
(
5658
{
axis
:
[
new_index
,
indexer
]},
5659
fill_value
=
fill_value
,
5660
copy
=
copy
,
5661
allow_dups
=
False
,
5662
)
File ~/work/pandas/pandas/pandas/core/indexes/base.py:4436,
in
Index.reindex
(self, target, method, level, limit, tolerance)
4433
raise
ValueError
(
"cannot handle a non-unique multi-index!"
)
4434
elif
not
self
.
is_unique
:
4435
# GH#42568
->
4436
raise
ValueError
(
"cannot reindex on an axis with duplicate labels"
)
4437
else
:
4438
indexer
,
_
=
self
.
get_indexer_non_unique
(
target
)
ValueError
: cannot reindex on an axis with duplicate labels
Other methods, like indexing, can give very surprising results. Typically
indexing with a scalar will
reduce dimensionality
. Slicing a
DataFrame
with a scalar will return a
Series
. Slicing a
Series
with a scalar will
return a scalar. But with duplicates, this isnât the case.
In [5]:
df1
=
pd
.
DataFrame
([[
0
,
1
,
2
],
[
3
,
4
,
5
]],
columns
=
[
"A"
,
"A"
,
"B"
])
In [6]:
df1
Out[6]:
A  A  B
0  0  1  2
1  3  4  5
We have duplicates in the columns. If we slice
'B'
, we get back a
Series
In [7]:
df1
[
"B"
]
# a series
Out[7]:
0    2
1    5
Name: B, dtype: int64
But slicing
'A'
returns a
DataFrame
In [8]:
df1
[
"A"
]
# a DataFrame
Out[8]:
A  A
0  0  1
1  3  4
This applies to row labels as well
In [9]:
df2
=
pd
.
DataFrame
({
"A"
:
[
0
,
1
,
2
]},
index
=
[
"a"
,
"a"
,
"b"
])
In [10]:
df2
Out[10]:
A
a  0
a  1
b  2
In [11]:
df2
.
loc
[
"b"
,
"A"
]
# a scalar
Out[11]:
2
In [12]:
df2
.
loc
[
"a"
,
"A"
]
# a Series
Out[12]:
a    0
a    1
Name: A, dtype: int64
Duplicate Label Detection
#
You can check whether an
Index
(storing the row or column labels) is
unique with
Index.is_unique
:
In [13]:
df2
Out[13]:
A
a  0
a  1
b  2
In [14]:
df2
.
index
.
is_unique
Out[14]:
False
In [15]:
df2
.
columns
.
is_unique
Out[15]:
True
Note
Checking whether an index is unique is somewhat expensive for large datasets.
pandas does cache this result, so re-checking on the same index is very fast.
Index.duplicated()
will return a boolean ndarray indicating whether a
label is repeated.
In [16]:
df2
.
index
.
duplicated
()
Out[16]:
array([False,  True, False])
Which can be used as a boolean filter to drop duplicate rows.
In [17]:
df2
.
loc
[
~
df2
.
index
.
duplicated
(),
:]
Out[17]:
A
a  0
b  2
If you need additional logic to handle duplicate labels, rather than just
dropping the repeats, using
groupby()
on the index is a common
trick. For example, weâll resolve duplicates by taking the average of all rows
with the same label.
In [18]:
df2
.
groupby
(
level
=
0
)
.
mean
()
Out[18]:
A
a  0.5
b  2.0
Disallowing Duplicate Labels
#
Added in version 1.2.0.
As noted above, handling duplicates is an important feature when reading in raw
data. That said, you may want to avoid introducing duplicates as part of a data
processing pipeline (from methods like
pandas.concat()
,
rename()
, etc.). Both
Series
and
DataFrame
disallow
duplicate labels by calling
.set_flags(allows_duplicate_labels=False)
.
(the default is to allow them). If there are duplicate labels, an exception
will be raised.
In [19]:
pd
.
Series
([
0
,
1
,
2
],
index
=
[
"a"
,
"b"
,
"b"
])
.
set_flags
(
allows_duplicate_labels
=
False
)
---------------------------------------------------------------------------
DuplicateLabelError
Traceback (most recent call last)
Cell
In
[
19
],
line
1
---->
1
pd
.
Series
([
0
,
1
,
2
],
index
=
[
"a"
,
"b"
,
"b"
])
.
set_flags
(
allows_duplicate_labels
=
False
)
File ~/work/pandas/pandas/pandas/core/generic.py:508,
in
NDFrame.set_flags
(self, copy, allows_duplicate_labels)
506
df
=
self
.
copy
(
deep
=
copy
and
not
using_copy_on_write
())
507
if
allows_duplicate_labels
is
not
None
:
-->
508
df
.
flags
[
"allows_duplicate_labels"
]
=
allows_duplicate_labels
509
return
df
File ~/work/pandas/pandas/pandas/core/flags.py:109,
in
Flags.__setitem__
(self, key, value)
107
if
key
not
in
self
.
_keys
:
108
raise
ValueError
(
f
"Unknown flag
{
key
}
. Must be one of
{
self
.
_keys
}
"
)
-->
109
setattr
(
self
,
key
,
value
)
File ~/work/pandas/pandas/pandas/core/flags.py:96,
in
Flags.allows_duplicate_labels
(self, value)
94
if
not
value
:
95
for
ax
in
obj
.
axes
:
--->
96
ax
.
_maybe_check_unique
()
98
self
.
_allows_duplicate_labels
=
value
File ~/work/pandas/pandas/pandas/core/indexes/base.py:716,
in
Index._maybe_check_unique
(self)
713
duplicates
=
self
.
_format_duplicate_message
()
714
msg
+=
f
"
\n
{
duplicates
}
"
-->
716
raise
DuplicateLabelError
(
msg
)
DuplicateLabelError
: Index has duplicates.
positions
label
b
[
1
,
2
]
This applies to both row and column labels for a
DataFrame
In [20]:
pd
.
DataFrame
([[
0
,
1
,
2
],
[
3
,
4
,
5
]],
columns
=
[
"A"
,
"B"
,
"C"
],)
.
set_flags
(
....:
allows_duplicate_labels
=
False
....:
)
....:
Out[20]:
A  B  C
0  0  1  2
1  3  4  5
This attribute can be checked or set with
allows_duplicate_labels
,
which indicates whether that object can have duplicate labels.
In [21]:
df
=
pd
.
DataFrame
({
"A"
:
[
0
,
1
,
2
,
3
]},
index
=
[
"x"
,
"y"
,
"X"
,
"Y"
])
.
set_flags
(
....:
allows_duplicate_labels
=
False
....:
)
....:
In [22]:
df
Out[22]:
A
x  0
y  1
X  2
Y  3
In [23]:
df
.
flags
.
allows_duplicate_labels
Out[23]:
False
DataFrame.set_flags()
can be used to return a new
DataFrame
with attributes
like
allows_duplicate_labels
set to some value
In [24]:
df2
=
df
.
set_flags
(
allows_duplicate_labels
=
True
)
In [25]:
df2
.
flags
.
allows_duplicate_labels
Out[25]:
True
The new
DataFrame
returned is a view on the same data as the old
DataFrame
.
Or the property can just be set directly on the same object
In [26]:
df2
.
flags
.
allows_duplicate_labels
=
False
In [27]:
df2
.
flags
.
allows_duplicate_labels
Out[27]:
False
When processing raw, messy data you might initially read in the messy data
(which potentially has duplicate labels), deduplicate, and then disallow duplicates
going forward, to ensure that your data pipeline doesnât introduce duplicates.
>>>
raw
=
pd
.
read_csv
(
"..."
)
>>>
deduplicated
=
raw
.
groupby
(
level
=
0
)
.
first
()
# remove duplicates
>>>
deduplicated
.
flags
.
allows_duplicate_labels
=
False
# disallow going forward
Setting
allows_duplicate_labels=False
on a
Series
or
DataFrame
with duplicate
labels or performing an operation that introduces duplicate labels on a
Series
or
DataFrame
that disallows duplicates will raise an
errors.DuplicateLabelError
.
In [28]:
df
.
rename
(
str
.
upper
)
---------------------------------------------------------------------------
DuplicateLabelError
Traceback (most recent call last)
Cell
In
[
28
],
line
1
---->
1
df
.
rename
(
str
.
upper
)
File ~/work/pandas/pandas/pandas/core/frame.py:5774,
in
DataFrame.rename
(self, mapper, index, columns, axis, copy, inplace, level, errors)
5643
def
rename
(
5644
self
,
5645
mapper
:
Renamer
|
None
=
None
,
(
...
)
5653
errors
:
IgnoreRaise
=
"ignore"
,
5654
)
->
DataFrame
|
None
:
5655
"""
5656
Rename columns or index labels.
5657
(...)
5772
4  3  6
5773
"""
->
5774
return
super
()
.
_rename
(
5775
mapper
=
mapper
,
5776
index
=
index
,
5777
columns
=
columns
,
5778
axis
=
axis
,
5779
copy
=
copy
,
5780
inplace
=
inplace
,
5781
level
=
level
,
5782
errors
=
errors
,
5783
)
File ~/work/pandas/pandas/pandas/core/generic.py:1140,
in
NDFrame._rename
(self, mapper, index, columns, axis, copy, inplace, level, errors)
1138
return
None
1139
else
:
->
1140
return
result
.
__finalize__
(
self
,
method
=
"rename"
)
File ~/work/pandas/pandas/pandas/core/generic.py:6281,
in
NDFrame.__finalize__
(self, other, method, **kwargs)
6274
if
other
.
attrs
:
6275
# We want attrs propagation to have minimal performance
6276
# impact if attrs are not used; i.e. attrs is an empty dict.
6277
# One could make the deepcopy unconditionally, but a deepcopy
6278
# of an empty dict is 50x more expensive than the empty check.
6279
self
.
attrs
=
deepcopy
(
other
.
attrs
)
->
6281
self
.
flags
.
allows_duplicate_labels
=
other
.
flags
.
allows_duplicate_labels
6282
# For subclasses using _metadata.
6283
for
name
in
set
(
self
.
_metadata
)
&
set
(
other
.
_metadata
):
File ~/work/pandas/pandas/pandas/core/flags.py:96,
in
Flags.allows_duplicate_labels
(self, value)
94
if
not
value
:
95
for
ax
in
obj
.
axes
:
--->
96
ax
.
_maybe_check_unique
()
98
self
.
_allows_duplicate_labels
=
value
File ~/work/pandas/pandas/pandas/core/indexes/base.py:716,
in
Index._maybe_check_unique
(self)
713
duplicates
=
self
.
_format_duplicate_message
()
714
msg
+=
f
"
\n
{
duplicates
}
"
-->
716
raise
DuplicateLabelError
(
msg
)
DuplicateLabelError
: Index has duplicates.
positions
label
X
[
0
,
2
]
Y
[
1
,
3
]
This error message contains the labels that are duplicated, and the numeric positions
of all the duplicates (including the âoriginalâ) in the
Series
or
DataFrame
Duplicate Label Propagation
#
In general, disallowing duplicates is âstickyâ. Itâs preserved through
operations.
In [29]:
s1
=
pd
.
Series
(
0
,
index
=
[
"a"
,
"b"
])
.
set_flags
(
allows_duplicate_labels
=
False
)
In [30]:
s1
Out[30]:
a    0
b    0
dtype: int64
In [31]:
s1
.
head
()
.
rename
({
"a"
:
"b"
})
---------------------------------------------------------------------------
DuplicateLabelError
Traceback (most recent call last)
Cell
In
[
31
],
line
1
---->
1
s1
.
head
()
.
rename
({
"a"
:
"b"
})
File ~/work/pandas/pandas/pandas/core/series.py:5101,
in
Series.rename
(self, index, axis, copy, inplace, level, errors)
5094
axis
=
self
.
_get_axis_number
(
axis
)
5096
if
callable
(
index
)
or
is_dict_like
(
index
):
5097
# error: Argument 1 to "_rename" of "NDFrame" has incompatible
5098
# type "Union[Union[Mapping[Any, Hashable], Callable[[Any],
5099
# Hashable]], Hashable, None]"; expected "Union[Mapping[Any,
5100
# Hashable], Callable[[Any], Hashable], None]"
->
5101
return
super
()
.
_rename
(
5102
index
,
# type: ignore[arg-type]
5103
copy
=
copy
,
5104
inplace
=
inplace
,
5105
level
=
level
,
5106
errors
=
errors
,
5107
)
5108
else
:
5109
return
self
.
_set_name
(
index
,
inplace
=
inplace
,
deep
=
copy
)
File ~/work/pandas/pandas/pandas/core/generic.py:1140,
in
NDFrame._rename
(self, mapper, index, columns, axis, copy, inplace, level, errors)
1138
return
None
1139
else
:
->
1140
return
result
.
__finalize__
(
self
,
method
=
"rename"
)
File ~/work/pandas/pandas/pandas/core/generic.py:6281,
in
NDFrame.__finalize__
(self, other, method, **kwargs)
6274
if
other
.
attrs
:
6275
# We want attrs propagation to have minimal performance
6276
# impact if attrs are not used; i.e. attrs is an empty dict.
6277
# One could make the deepcopy unconditionally, but a deepcopy
6278
# of an empty dict is 50x more expensive than the empty check.
6279
self
.
attrs
=
deepcopy
(
other
.
attrs
)
->
6281
self
.
flags
.
allows_duplicate_labels
=
other
.
flags
.
allows_duplicate_labels
6282
# For subclasses using _metadata.
6283
for
name
in
set
(
self
.
_metadata
)
&
set
(
other
.
_metadata
):
File ~/work/pandas/pandas/pandas/core/flags.py:96,
in
Flags.allows_duplicate_labels
(self, value)
94
if
not
value
:
95
for
ax
in
obj
.
axes
:
--->
96
ax
.
_maybe_check_unique
()
98
self
.
_allows_duplicate_labels
=
value
File ~/work/pandas/pandas/pandas/core/indexes/base.py:716,
in
Index._maybe_check_unique
(self)
713
duplicates
=
self
.
_format_duplicate_message
()
714
msg
+=
f
"
\n
{
duplicates
}
"
-->
716
raise
DuplicateLabelError
(
msg
)
DuplicateLabelError
: Index has duplicates.
positions
label
b
[
0
,
1
]
Warning
This is an experimental feature. Currently, many methods fail to
propagate the
allows_duplicate_labels
value. In future versions
it is expected that every method taking or returning one or more
DataFrame or Series objects will propagate
allows_duplicate_labels
.
previous
Working with missing data
next
Categorical data
On this page
Consequences of Duplicate Labels
Duplicate Label Detection
Disallowing Duplicate Labels
Duplicate Label Propagation
Show Source
&copy 2025, pandas via
NumFOCUS, Inc.
Hosted by
OVHcloud
.
Created using
Sphinx
8.1.3.
Built with the
PyData Sphinx Theme
0.14.4.