Sorting, searching, and counting — NumPy v2.2 Manual
Skip to main content
Back to top
Ctrl
+
K
User Guide
API reference
Building from source
Development
Release notes
Learn
More
NEPs
Choose version
GitHub
User Guide
API reference
Building from source
Development
Release notes
Learn
NEPs
Choose version
GitHub
Section Navigation
NumPy’s module structure
Array objects
Universal functions (
ufunc
)
Routines and objects by topic
Constants
Array creation routines
Array manipulation routines
Bit-wise operations
String functionality
Datetime support functions
Data type routines
Mathematical functions with automatic domain
Floating point error handling
Exceptions and Warnings (
numpy.exceptions
)
Discrete Fourier Transform (
numpy.fft
)
Functional programming
Input and output
Indexing routines
Linear algebra (
numpy.linalg
)
Logic functions
Masked array operations
Mathematical functions
Miscellaneous routines
Polynomials
Random sampling (
numpy.random
)
Set routines
Sorting, searching, and counting
numpy.sort
numpy.lexsort
numpy.argsort
numpy.ndarray.sort
numpy.sort_complex
numpy.partition
numpy.argpartition
numpy.argmax
numpy.nanargmax
numpy.argmin
numpy.nanargmin
numpy.argwhere
numpy.nonzero
numpy.flatnonzero
numpy.where
numpy.searchsorted
numpy.extract
numpy.count_nonzero
Statistics
Test support (
numpy.testing
)
Window functions
Typing (
numpy.typing
)
Packaging (
numpy.distutils
)
NumPy C-API
Array API standard compatibility
CPU/SIMD optimizations
Thread Safety
Global Configuration Options
NumPy security
Status of
numpy.distutils
and migration advice
numpy.distutils
user guide
NumPy and SWIG
NumPy reference
Routines and objects by topic
Sorting, searching, and counting
Sorting, searching, and counting
#
Sorting
#
sort
(a[, axis, kind, order, stable])
Return a sorted copy of an array.
lexsort
(keys[, axis])
Perform an indirect stable sort using a sequence of keys.
argsort
(a[, axis, kind, order, stable])
Returns the indices that would sort an array.
ndarray.sort
([axis, kind, order])
Sort an array in-place.
sort_complex
(a)
Sort a complex array using the real part first, then the imaginary part.
partition
(a, kth[, axis, kind, order])
Return a partitioned copy of an array.
argpartition
(a, kth[, axis, kind, order])
Perform an indirect partition along the given axis using the algorithm specified by the
kind
keyword.
Searching
#
argmax
(a[, axis, out, keepdims])
Returns the indices of the maximum values along an axis.
nanargmax
(a[, axis, out, keepdims])
Return the indices of the maximum values in the specified axis ignoring NaNs.
argmin
(a[, axis, out, keepdims])
Returns the indices of the minimum values along an axis.
nanargmin
(a[, axis, out, keepdims])
Return the indices of the minimum values in the specified axis ignoring NaNs.
argwhere
(a)
Find the indices of array elements that are non-zero, grouped by element.
nonzero
(a)
Return the indices of the elements that are non-zero.
flatnonzero
(a)
Return indices that are non-zero in the flattened version of a.
where
(condition, [x, y], /)
Return elements chosen from
x
or
y
depending on
condition
.
searchsorted
(a, v[, side, sorter])
Find indices where elements should be inserted to maintain order.
extract
(condition, arr)
Return the elements of an array that satisfy some condition.
Counting
#
count_nonzero
(a[, axis, keepdims])
Counts the number of non-zero values in the array
a
.
previous
numpy.union1d
next
numpy.sort
On this page
Sorting
Searching
Counting
© Copyright 2008-2024, NumPy Developers.
Created using
Sphinx
7.2.6.
Built with the
PyData Sphinx Theme
0.16.0.