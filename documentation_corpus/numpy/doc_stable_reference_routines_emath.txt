Mathematical functions with automatic domain — NumPy v2.2 Manual
Skip to main content
Back to top
Ctrl
+
K
User Guide
API reference
Building from source
Development
Release notes
Learn
More
NEPs
Choose version
GitHub
User Guide
API reference
Building from source
Development
Release notes
Learn
NEPs
Choose version
GitHub
Section Navigation
NumPy’s module structure
Array objects
Universal functions (
ufunc
)
Routines and objects by topic
Constants
Array creation routines
Array manipulation routines
Bit-wise operations
String functionality
Datetime support functions
Data type routines
Mathematical functions with automatic domain
numpy.emath.arccos
numpy.emath.arcsin
numpy.emath.arctanh
numpy.emath.log
numpy.emath.log2
numpy.emath.logn
numpy.emath.log10
numpy.emath.power
numpy.emath.sqrt
Floating point error handling
Exceptions and Warnings (
numpy.exceptions
)
Discrete Fourier Transform (
numpy.fft
)
Functional programming
Input and output
Indexing routines
Linear algebra (
numpy.linalg
)
Logic functions
Masked array operations
Mathematical functions
Miscellaneous routines
Polynomials
Random sampling (
numpy.random
)
Set routines
Sorting, searching, and counting
Statistics
Test support (
numpy.testing
)
Window functions
Typing (
numpy.typing
)
Packaging (
numpy.distutils
)
NumPy C-API
Array API standard compatibility
CPU/SIMD optimizations
Thread Safety
Global Configuration Options
NumPy security
Status of
numpy.distutils
and migration advice
numpy.distutils
user guide
NumPy and SWIG
NumPy reference
NumPy’s module structure
Mathematical functions with automatic domain
Mathematical functions with automatic domain
#
Note
numpy.emath
is a preferred alias for
numpy.lib.scimath
,
available after
numpy
is imported.
Wrapper functions to more user-friendly calling of certain math functions
whose output data-type is different than the input data-type in certain
domains of the input.
For example, for functions like
log
with branch cuts, the versions in this
module provide the mathematically valid answers in the complex plane:
>>>
import
math
>>>
np
.
emath
.
log
(
-
math
.
exp
(
1
))
==
(
1
+
1
j
*
math
.
pi
)
True
Similarly,
sqrt
, other base logarithms,
power
and trig functions
are correctly handled.  See their respective docstrings for specific examples.
Functions
#
arccos
(x)
Compute the inverse cosine of x.
arcsin
(x)
Compute the inverse sine of x.
arctanh
(x)
Compute the inverse hyperbolic tangent of
x
.
log
(x)
Compute the natural logarithm of
x
.
log2
(x)
Compute the logarithm base 2 of
x
.
logn
(n, x)
Take log base n of x.
log10
(x)
Compute the logarithm base 10 of
x
.
power
(x, p)
Return x to the power p, (x**p).
sqrt
(x)
Compute the square root of x.
previous
Data type classes (
numpy.dtypes
)
next
numpy.emath.arccos
On this page
Functions
© Copyright 2008-2024, NumPy Developers.
Created using
Sphinx
7.2.6.
Built with the
PyData Sphinx Theme
0.16.0.