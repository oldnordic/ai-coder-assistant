Series — pandas 2.3.0 documentation
Skip to main content
Back to top
Ctrl
+
K
Site Navigation
Getting started
User Guide
API reference
Development
Release notes
GitHub
Twitter
Mastodon
Site Navigation
Getting started
User Guide
API reference
Development
Release notes
GitHub
Twitter
Mastodon
Input/output
General functions
Series
pandas.Series
pandas.Series.index
pandas.Series.array
pandas.Series.values
pandas.Series.dtype
pandas.Series.shape
pandas.Series.nbytes
pandas.Series.ndim
pandas.Series.size
pandas.Series.T
pandas.Series.memory_usage
pandas.Series.hasnans
pandas.Series.empty
pandas.Series.dtypes
pandas.Series.name
pandas.Series.flags
pandas.Series.set_flags
pandas.Series.astype
pandas.Series.convert_dtypes
pandas.Series.infer_objects
pandas.Series.copy
pandas.Series.bool
pandas.Series.to_numpy
pandas.Series.to_period
pandas.Series.to_timestamp
pandas.Series.to_list
pandas.Series.__array__
pandas.Series.get
pandas.Series.at
pandas.Series.iat
pandas.Series.loc
pandas.Series.iloc
pandas.Series.__iter__
pandas.Series.items
pandas.Series.keys
pandas.Series.pop
pandas.Series.item
pandas.Series.xs
pandas.Series.add
pandas.Series.sub
pandas.Series.mul
pandas.Series.div
pandas.Series.truediv
pandas.Series.floordiv
pandas.Series.mod
pandas.Series.pow
pandas.Series.radd
pandas.Series.rsub
pandas.Series.rmul
pandas.Series.rdiv
pandas.Series.rtruediv
pandas.Series.rfloordiv
pandas.Series.rmod
pandas.Series.rpow
pandas.Series.combine
pandas.Series.combine_first
pandas.Series.round
pandas.Series.lt
pandas.Series.gt
pandas.Series.le
pandas.Series.ge
pandas.Series.ne
pandas.Series.eq
pandas.Series.product
pandas.Series.dot
pandas.Series.apply
pandas.Series.agg
pandas.Series.aggregate
pandas.Series.transform
pandas.Series.map
pandas.Series.groupby
pandas.Series.rolling
pandas.Series.expanding
pandas.Series.ewm
pandas.Series.pipe
pandas.Series.abs
pandas.Series.all
pandas.Series.any
pandas.Series.autocorr
pandas.Series.between
pandas.Series.clip
pandas.Series.corr
pandas.Series.count
pandas.Series.cov
pandas.Series.cummax
pandas.Series.cummin
pandas.Series.cumprod
pandas.Series.cumsum
pandas.Series.describe
pandas.Series.diff
pandas.Series.factorize
pandas.Series.kurt
pandas.Series.max
pandas.Series.mean
pandas.Series.median
pandas.Series.min
pandas.Series.mode
pandas.Series.nlargest
pandas.Series.nsmallest
pandas.Series.pct_change
pandas.Series.prod
pandas.Series.quantile
pandas.Series.rank
pandas.Series.sem
pandas.Series.skew
pandas.Series.std
pandas.Series.sum
pandas.Series.var
pandas.Series.kurtosis
pandas.Series.unique
pandas.Series.nunique
pandas.Series.is_unique
pandas.Series.is_monotonic_increasing
pandas.Series.is_monotonic_decreasing
pandas.Series.value_counts
pandas.Series.align
pandas.Series.case_when
pandas.Series.drop
pandas.Series.droplevel
pandas.Series.drop_duplicates
pandas.Series.duplicated
pandas.Series.equals
pandas.Series.first
pandas.Series.head
pandas.Series.idxmax
pandas.Series.idxmin
pandas.Series.isin
pandas.Series.last
pandas.Series.reindex
pandas.Series.reindex_like
pandas.Series.rename
pandas.Series.rename_axis
pandas.Series.reset_index
pandas.Series.sample
pandas.Series.set_axis
pandas.Series.take
pandas.Series.tail
pandas.Series.truncate
pandas.Series.where
pandas.Series.mask
pandas.Series.add_prefix
pandas.Series.add_suffix
pandas.Series.filter
pandas.Series.backfill
pandas.Series.bfill
pandas.Series.dropna
pandas.Series.ffill
pandas.Series.fillna
pandas.Series.interpolate
pandas.Series.isna
pandas.Series.isnull
pandas.Series.notna
pandas.Series.notnull
pandas.Series.pad
pandas.Series.replace
pandas.Series.argsort
pandas.Series.argmin
pandas.Series.argmax
pandas.Series.reorder_levels
pandas.Series.sort_values
pandas.Series.sort_index
pandas.Series.swaplevel
pandas.Series.unstack
pandas.Series.explode
pandas.Series.searchsorted
pandas.Series.ravel
pandas.Series.repeat
pandas.Series.squeeze
pandas.Series.view
pandas.Series.compare
pandas.Series.update
pandas.Series.asfreq
pandas.Series.asof
pandas.Series.shift
pandas.Series.first_valid_index
pandas.Series.last_valid_index
pandas.Series.resample
pandas.Series.tz_convert
pandas.Series.tz_localize
pandas.Series.at_time
pandas.Series.between_time
pandas.Series.str
pandas.Series.cat
pandas.Series.dt
pandas.Series.sparse
pandas.DataFrame.sparse
pandas.Index.str
pandas.Series.dt.date
pandas.Series.dt.time
pandas.Series.dt.timetz
pandas.Series.dt.year
pandas.Series.dt.month
pandas.Series.dt.day
pandas.Series.dt.hour
pandas.Series.dt.minute
pandas.Series.dt.second
pandas.Series.dt.microsecond
pandas.Series.dt.nanosecond
pandas.Series.dt.dayofweek
pandas.Series.dt.day_of_week
pandas.Series.dt.weekday
pandas.Series.dt.dayofyear
pandas.Series.dt.day_of_year
pandas.Series.dt.days_in_month
pandas.Series.dt.quarter
pandas.Series.dt.is_month_start
pandas.Series.dt.is_month_end
pandas.Series.dt.is_quarter_start
pandas.Series.dt.is_quarter_end
pandas.Series.dt.is_year_start
pandas.Series.dt.is_year_end
pandas.Series.dt.is_leap_year
pandas.Series.dt.daysinmonth
pandas.Series.dt.days_in_month
pandas.Series.dt.tz
pandas.Series.dt.freq
pandas.Series.dt.unit
pandas.Series.dt.isocalendar
pandas.Series.dt.to_period
pandas.Series.dt.to_pydatetime
pandas.Series.dt.tz_localize
pandas.Series.dt.tz_convert
pandas.Series.dt.normalize
pandas.Series.dt.strftime
pandas.Series.dt.round
pandas.Series.dt.floor
pandas.Series.dt.ceil
pandas.Series.dt.month_name
pandas.Series.dt.day_name
pandas.Series.dt.as_unit
pandas.Series.dt.qyear
pandas.Series.dt.start_time
pandas.Series.dt.end_time
pandas.Series.dt.days
pandas.Series.dt.seconds
pandas.Series.dt.microseconds
pandas.Series.dt.nanoseconds
pandas.Series.dt.components
pandas.Series.dt.unit
pandas.Series.dt.to_pytimedelta
pandas.Series.dt.total_seconds
pandas.Series.dt.as_unit
pandas.Series.str.capitalize
pandas.Series.str.casefold
pandas.Series.str.cat
pandas.Series.str.center
pandas.Series.str.contains
pandas.Series.str.count
pandas.Series.str.decode
pandas.Series.str.encode
pandas.Series.str.endswith
pandas.Series.str.extract
pandas.Series.str.extractall
pandas.Series.str.find
pandas.Series.str.findall
pandas.Series.str.fullmatch
pandas.Series.str.get
pandas.Series.str.index
pandas.Series.str.join
pandas.Series.str.len
pandas.Series.str.ljust
pandas.Series.str.lower
pandas.Series.str.lstrip
pandas.Series.str.match
pandas.Series.str.normalize
pandas.Series.str.pad
pandas.Series.str.partition
pandas.Series.str.removeprefix
pandas.Series.str.removesuffix
pandas.Series.str.repeat
pandas.Series.str.replace
pandas.Series.str.rfind
pandas.Series.str.rindex
pandas.Series.str.rjust
pandas.Series.str.rpartition
pandas.Series.str.rstrip
pandas.Series.str.slice
pandas.Series.str.slice_replace
pandas.Series.str.split
pandas.Series.str.rsplit
pandas.Series.str.startswith
pandas.Series.str.strip
pandas.Series.str.swapcase
pandas.Series.str.title
pandas.Series.str.translate
pandas.Series.str.upper
pandas.Series.str.wrap
pandas.Series.str.zfill
pandas.Series.str.isalnum
pandas.Series.str.isalpha
pandas.Series.str.isdigit
pandas.Series.str.isspace
pandas.Series.str.islower
pandas.Series.str.isupper
pandas.Series.str.istitle
pandas.Series.str.isnumeric
pandas.Series.str.isdecimal
pandas.Series.str.get_dummies
pandas.Series.cat.categories
pandas.Series.cat.ordered
pandas.Series.cat.codes
pandas.Series.cat.rename_categories
pandas.Series.cat.reorder_categories
pandas.Series.cat.add_categories
pandas.Series.cat.remove_categories
pandas.Series.cat.remove_unused_categories
pandas.Series.cat.set_categories
pandas.Series.cat.as_ordered
pandas.Series.cat.as_unordered
pandas.Series.sparse.npoints
pandas.Series.sparse.density
pandas.Series.sparse.fill_value
pandas.Series.sparse.sp_values
pandas.Series.sparse.from_coo
pandas.Series.sparse.to_coo
pandas.Series.list.flatten
pandas.Series.list.len
pandas.Series.list.__getitem__
pandas.Series.struct.dtypes
pandas.Series.struct.field
pandas.Series.struct.explode
pandas.Flags
pandas.Series.attrs
pandas.Series.plot
pandas.Series.plot.area
pandas.Series.plot.bar
pandas.Series.plot.barh
pandas.Series.plot.box
pandas.Series.plot.density
pandas.Series.plot.hist
pandas.Series.plot.kde
pandas.Series.plot.line
pandas.Series.plot.pie
pandas.Series.hist
pandas.Series.to_pickle
pandas.Series.to_csv
pandas.Series.to_dict
pandas.Series.to_excel
pandas.Series.to_frame
pandas.Series.to_xarray
pandas.Series.to_hdf
pandas.Series.to_sql
pandas.Series.to_json
pandas.Series.to_string
pandas.Series.to_clipboard
pandas.Series.to_latex
pandas.Series.to_markdown
DataFrame
pandas arrays, scalars, and data types
Index objects
Date offsets
Window
GroupBy
Resampling
Style
Plotting
Options and settings
Extensions
Testing
Missing values
API reference
Series
Series
#
Constructor
#
Series
([data,Â index,Â dtype,Â name,Â copy,Â ...])
One-dimensional ndarray with axis labels (including time series).
Attributes
#
Axes
Series.index
The index (axis labels) of the Series.
Series.array
The ExtensionArray of the data backing this Series or Index.
Series.values
Return Series as ndarray or ndarray-like depending on the dtype.
Series.dtype
Return the dtype object of the underlying data.
Series.shape
Return a tuple of the shape of the underlying data.
Series.nbytes
Return the number of bytes in the underlying data.
Series.ndim
Number of dimensions of the underlying data, by definition 1.
Series.size
Return the number of elements in the underlying data.
Series.T
Return the transpose, which is by definition self.
Series.memory_usage
([index,Â deep])
Return the memory usage of the Series.
Series.hasnans
Return True if there are any NaNs.
Series.empty
Indicator whether Series/DataFrame is empty.
Series.dtypes
Return the dtype object of the underlying data.
Series.name
Return the name of the Series.
Series.flags
Get the properties associated with this pandas object.
Series.set_flags
(*[,Â copy,Â ...])
Return a new object with updated flags.
Conversion
#
Series.astype
(dtype[,Â copy,Â errors])
Cast a pandas object to a specified dtype
dtype
.
Series.convert_dtypes
([infer_objects,Â ...])
Convert columns to the best possible dtypes using dtypes supporting
pd.NA
.
Series.infer_objects
([copy])
Attempt to infer better dtypes for object columns.
Series.copy
([deep])
Make a copy of this object's indices and data.
Series.bool
()
(DEPRECATED) Return the bool of a single element Series or DataFrame.
Series.to_numpy
([dtype,Â copy,Â na_value])
A NumPy ndarray representing the values in this Series or Index.
Series.to_period
([freq,Â copy])
Convert Series from DatetimeIndex to PeriodIndex.
Series.to_timestamp
([freq,Â how,Â copy])
Cast to DatetimeIndex of Timestamps, at
beginning
of period.
Series.to_list
()
Return a list of the values.
Series.__array__
([dtype,Â copy])
Return the values as a NumPy array.
Indexing, iteration
#
Series.get
(key[,Â default])
Get item from object for given key (ex: DataFrame column).
Series.at
Access a single value for a row/column label pair.
Series.iat
Access a single value for a row/column pair by integer position.
Series.loc
Access a group of rows and columns by label(s) or a boolean array.
Series.iloc
(DEPRECATED) Purely integer-location based indexing for selection by position.
Series.__iter__
()
Return an iterator of the values.
Series.items
()
Lazily iterate over (index, value) tuples.
Series.keys
()
Return alias for index.
Series.pop
(item)
Return item and drops from series.
Series.item
()
Return the first element of the underlying data as a Python scalar.
Series.xs
(key[,Â axis,Â level,Â drop_level])
Return cross-section from the Series/DataFrame.
For more information on
.at
,
.iat
,
.loc
, and
.iloc
,  see the
indexing documentation
.
Binary operator functions
#
Series.add
(other[,Â level,Â fill_value,Â axis])
Return Addition of series and other, element-wise (binary operator
add
).
Series.sub
(other[,Â level,Â fill_value,Â axis])
Return Subtraction of series and other, element-wise (binary operator
sub
).
Series.mul
(other[,Â level,Â fill_value,Â axis])
Return Multiplication of series and other, element-wise (binary operator
mul
).
Series.div
(other[,Â level,Â fill_value,Â axis])
Return Floating division of series and other, element-wise (binary operator
truediv
).
Series.truediv
(other[,Â level,Â fill_value,Â axis])
Return Floating division of series and other, element-wise (binary operator
truediv
).
Series.floordiv
(other[,Â level,Â fill_value,Â axis])
Return Integer division of series and other, element-wise (binary operator
floordiv
).
Series.mod
(other[,Â level,Â fill_value,Â axis])
Return Modulo of series and other, element-wise (binary operator
mod
).
Series.pow
(other[,Â level,Â fill_value,Â axis])
Return Exponential power of series and other, element-wise (binary operator
pow
).
Series.radd
(other[,Â level,Â fill_value,Â axis])
Return Addition of series and other, element-wise (binary operator
radd
).
Series.rsub
(other[,Â level,Â fill_value,Â axis])
Return Subtraction of series and other, element-wise (binary operator
rsub
).
Series.rmul
(other[,Â level,Â fill_value,Â axis])
Return Multiplication of series and other, element-wise (binary operator
rmul
).
Series.rdiv
(other[,Â level,Â fill_value,Â axis])
Return Floating division of series and other, element-wise (binary operator
rtruediv
).
Series.rtruediv
(other[,Â level,Â fill_value,Â axis])
Return Floating division of series and other, element-wise (binary operator
rtruediv
).
Series.rfloordiv
(other[,Â level,Â fill_value,Â ...])
Return Integer division of series and other, element-wise (binary operator
rfloordiv
).
Series.rmod
(other[,Â level,Â fill_value,Â axis])
Return Modulo of series and other, element-wise (binary operator
rmod
).
Series.rpow
(other[,Â level,Â fill_value,Â axis])
Return Exponential power of series and other, element-wise (binary operator
rpow
).
Series.combine
(other,Â func[,Â fill_value])
Combine the Series with a Series or scalar according to
func
.
Series.combine_first
(other)
Update null elements with value in the same location in 'other'.
Series.round
([decimals])
Round each value in a Series to the given number of decimals.
Series.lt
(other[,Â level,Â fill_value,Â axis])
Return Less than of series and other, element-wise (binary operator
lt
).
Series.gt
(other[,Â level,Â fill_value,Â axis])
Return Greater than of series and other, element-wise (binary operator
gt
).
Series.le
(other[,Â level,Â fill_value,Â axis])
Return Less than or equal to of series and other, element-wise (binary operator
le
).
Series.ge
(other[,Â level,Â fill_value,Â axis])
Return Greater than or equal to of series and other, element-wise (binary operator
ge
).
Series.ne
(other[,Â level,Â fill_value,Â axis])
Return Not equal to of series and other, element-wise (binary operator
ne
).
Series.eq
(other[,Â level,Â fill_value,Â axis])
Return Equal to of series and other, element-wise (binary operator
eq
).
Series.product
([axis,Â skipna,Â numeric_only,Â ...])
Return the product of the values over the requested axis.
Series.dot
(other)
Compute the dot product between the Series and the columns of other.
Function application, GroupBy & window
#
Series.apply
(func[,Â convert_dtype,Â args,Â by_row])
Invoke function on values of Series.
Series.agg
([func,Â axis])
Aggregate using one or more operations over the specified axis.
Series.aggregate
([func,Â axis])
Aggregate using one or more operations over the specified axis.
Series.transform
(func[,Â axis])
Call
func
on self producing a Series with the same axis shape as self.
Series.map
(arg[,Â na_action])
Map values of Series according to an input mapping or function.
Series.groupby
([by,Â axis,Â level,Â as_index,Â ...])
Group Series using a mapper or by a Series of columns.
Series.rolling
(window[,Â min_periods,Â ...])
Provide rolling window calculations.
Series.expanding
([min_periods,Â axis,Â method])
Provide expanding window calculations.
Series.ewm
([com,Â span,Â halflife,Â alpha,Â ...])
Provide exponentially weighted (EW) calculations.
Series.pipe
(func,Â *args,Â **kwargs)
Apply chainable functions that expect Series or DataFrames.
Computations / descriptive stats
#
Series.abs
()
Return a Series/DataFrame with absolute numeric value of each element.
Series.all
([axis,Â bool_only,Â skipna])
Return whether all elements are True, potentially over an axis.
Series.any
(*[,Â axis,Â bool_only,Â skipna])
Return whether any element is True, potentially over an axis.
Series.autocorr
([lag])
Compute the lag-N autocorrelation.
Series.between
(left,Â right[,Â inclusive])
Return boolean Series equivalent to left <= series <= right.
Series.clip
([lower,Â upper,Â axis,Â inplace])
Trim values at input threshold(s).
Series.corr
(other[,Â method,Â min_periods])
Compute correlation with
other
Series, excluding missing values.
Series.count
()
Return number of non-NA/null observations in the Series.
Series.cov
(other[,Â min_periods,Â ddof])
Compute covariance with Series, excluding missing values.
Series.cummax
([axis,Â skipna])
Return cumulative maximum over a DataFrame or Series axis.
Series.cummin
([axis,Â skipna])
Return cumulative minimum over a DataFrame or Series axis.
Series.cumprod
([axis,Â skipna])
Return cumulative product over a DataFrame or Series axis.
Series.cumsum
([axis,Â skipna])
Return cumulative sum over a DataFrame or Series axis.
Series.describe
([percentiles,Â include,Â exclude])
Generate descriptive statistics.
Series.diff
([periods])
First discrete difference of element.
Series.factorize
([sort,Â use_na_sentinel])
Encode the object as an enumerated type or categorical variable.
Series.kurt
([axis,Â skipna,Â numeric_only])
Return unbiased kurtosis over requested axis.
Series.max
([axis,Â skipna,Â numeric_only])
Return the maximum of the values over the requested axis.
Series.mean
([axis,Â skipna,Â numeric_only])
Return the mean of the values over the requested axis.
Series.median
([axis,Â skipna,Â numeric_only])
Return the median of the values over the requested axis.
Series.min
([axis,Â skipna,Â numeric_only])
Return the minimum of the values over the requested axis.
Series.mode
([dropna])
Return the mode(s) of the Series.
Series.nlargest
([n,Â keep])
Return the largest
n
elements.
Series.nsmallest
([n,Â keep])
Return the smallest
n
elements.
Series.pct_change
([periods,Â fill_method,Â ...])
Fractional change between the current and a prior element.
Series.prod
([axis,Â skipna,Â numeric_only,Â ...])
Return the product of the values over the requested axis.
Series.quantile
([q,Â interpolation])
Return value at the given quantile.
Series.rank
([axis,Â method,Â numeric_only,Â ...])
Compute numerical data ranks (1 through n) along axis.
Series.sem
([axis,Â skipna,Â ddof,Â numeric_only])
Return unbiased standard error of the mean over requested axis.
Series.skew
([axis,Â skipna,Â numeric_only])
Return unbiased skew over requested axis.
Series.std
([axis,Â skipna,Â ddof,Â numeric_only])
Return sample standard deviation over requested axis.
Series.sum
([axis,Â skipna,Â numeric_only,Â ...])
Return the sum of the values over the requested axis.
Series.var
([axis,Â skipna,Â ddof,Â numeric_only])
Return unbiased variance over requested axis.
Series.kurtosis
([axis,Â skipna,Â numeric_only])
Return unbiased kurtosis over requested axis.
Series.unique
()
Return unique values of Series object.
Series.nunique
([dropna])
Return number of unique elements in the object.
Series.is_unique
Return boolean if values in the object are unique.
Series.is_monotonic_increasing
Return boolean if values in the object are monotonically increasing.
Series.is_monotonic_decreasing
Return boolean if values in the object are monotonically decreasing.
Series.value_counts
([normalize,Â sort,Â ...])
Return a Series containing counts of unique values.
Reindexing / selection / label manipulation
#
Series.align
(other[,Â join,Â axis,Â level,Â ...])
Align two objects on their axes with the specified join method.
Series.case_when
(caselist)
Replace values where the conditions are True.
Series.drop
([labels,Â axis,Â index,Â columns,Â ...])
Return Series with specified index labels removed.
Series.droplevel
(level[,Â axis])
Return Series/DataFrame with requested index / column level(s) removed.
Series.drop_duplicates
(*[,Â keep,Â inplace,Â ...])
Return Series with duplicate values removed.
Series.duplicated
([keep])
Indicate duplicate Series values.
Series.equals
(other)
Test whether two objects contain the same elements.
Series.first
(offset)
(DEPRECATED) Select initial periods of time series data based on a date offset.
Series.head
([n])
Return the first
n
rows.
Series.idxmax
([axis,Â skipna])
Return the row label of the maximum value.
Series.idxmin
([axis,Â skipna])
Return the row label of the minimum value.
Series.isin
(values)
Whether elements in Series are contained in
values
.
Series.last
(offset)
(DEPRECATED) Select final periods of time series data based on a date offset.
Series.reindex
([index,Â axis,Â method,Â copy,Â ...])
Conform Series to new index with optional filling logic.
Series.reindex_like
(other[,Â method,Â copy,Â ...])
Return an object with matching indices as other object.
Series.rename
([index,Â axis,Â copy,Â inplace,Â ...])
Alter Series index labels or name.
Series.rename_axis
([mapper,Â index,Â axis,Â ...])
Set the name of the axis for the index or columns.
Series.reset_index
([level,Â drop,Â name,Â ...])
Generate a new DataFrame or Series with the index reset.
Series.sample
([n,Â frac,Â replace,Â weights,Â ...])
Return a random sample of items from an axis of object.
Series.set_axis
(labels,Â *[,Â axis,Â copy])
Assign desired index to given axis.
Series.take
(indices[,Â axis])
Return the elements in the given
positional
indices along an axis.
Series.tail
([n])
Return the last
n
rows.
Series.truncate
([before,Â after,Â axis,Â copy])
Truncate a Series or DataFrame before and after some index value.
Series.where
(cond[,Â other,Â inplace,Â axis,Â level])
Replace values where the condition is False.
Series.mask
(cond[,Â other,Â inplace,Â axis,Â level])
Replace values where the condition is True.
Series.add_prefix
(prefix[,Â axis])
Prefix labels with string
prefix
.
Series.add_suffix
(suffix[,Â axis])
Suffix labels with string
suffix
.
Series.filter
([items,Â like,Â regex,Â axis])
Subset the dataframe rows or columns according to the specified index labels.
Missing data handling
#
Series.backfill
(*[,Â axis,Â inplace,Â limit,Â ...])
(DEPRECATED) Fill NA/NaN values by using the next valid observation to fill the gap.
Series.bfill
(*[,Â axis,Â inplace,Â limit,Â ...])
Fill NA/NaN values by using the next valid observation to fill the gap.
Series.dropna
(*[,Â axis,Â inplace,Â how,Â ...])
Return a new Series with missing values removed.
Series.ffill
(*[,Â axis,Â inplace,Â limit,Â ...])
Fill NA/NaN values by propagating the last valid observation to next valid.
Series.fillna
([value,Â method,Â axis,Â ...])
Fill NA/NaN values using the specified method.
Series.interpolate
([method,Â axis,Â limit,Â ...])
Fill NaN values using an interpolation method.
Series.isna
()
Detect missing values.
Series.isnull
()
Series.isnull is an alias for Series.isna.
Series.notna
()
Detect existing (non-missing) values.
Series.notnull
()
Series.notnull is an alias for Series.notna.
Series.pad
(*[,Â axis,Â inplace,Â limit,Â downcast])
(DEPRECATED) Fill NA/NaN values by propagating the last valid observation to next valid.
Series.replace
([to_replace,Â value,Â inplace,Â ...])
Replace values given in
to_replace
with
value
.
Reshaping, sorting
#
Series.argsort
([axis,Â kind,Â order,Â stable])
Return the integer indices that would sort the Series values.
Series.argmin
([axis,Â skipna])
Return int position of the smallest value in the Series.
Series.argmax
([axis,Â skipna])
Return int position of the largest value in the Series.
Series.reorder_levels
(order)
Rearrange index levels using input order.
Series.sort_values
(*[,Â axis,Â ascending,Â ...])
Sort by the values.
Series.sort_index
(*[,Â axis,Â level,Â ...])
Sort Series by index labels.
Series.swaplevel
([i,Â j,Â copy])
Swap levels i and j in a
MultiIndex
.
Series.unstack
([level,Â fill_value,Â sort])
Unstack, also known as pivot, Series with MultiIndex to produce DataFrame.
Series.explode
([ignore_index])
Transform each element of a list-like to a row.
Series.searchsorted
(value[,Â side,Â sorter])
Find indices where elements should be inserted to maintain order.
Series.ravel
([order])
(DEPRECATED) Return the flattened underlying data as an ndarray or ExtensionArray.
Series.repeat
(repeats[,Â axis])
Repeat elements of a Series.
Series.squeeze
([axis])
Squeeze 1 dimensional axis objects into scalars.
Series.view
([dtype])
(DEPRECATED) Create a new view of the Series.
Combining / comparing / joining / merging
#
Series.compare
(other[,Â align_axis,Â ...])
Compare to another Series and show the differences.
Series.update
(other)
Modify Series in place using values from passed Series.
Time Series-related
#
Series.asfreq
(freq[,Â method,Â how,Â ...])
Convert time series to specified frequency.
Series.asof
(where[,Â subset])
Return the last row(s) without any NaNs before
where
.
Series.shift
([periods,Â freq,Â axis,Â ...])
Shift index by desired number of periods with an optional time
freq
.
Series.first_valid_index
()
Return index for first non-NA value or None, if no non-NA value is found.
Series.last_valid_index
()
Return index for last non-NA value or None, if no non-NA value is found.
Series.resample
(rule[,Â axis,Â closed,Â label,Â ...])
Resample time-series data.
Series.tz_convert
(tz[,Â axis,Â level,Â copy])
Convert tz-aware axis to target time zone.
Series.tz_localize
(tz[,Â axis,Â level,Â copy,Â ...])
Localize tz-naive index of a Series or DataFrame to target time zone.
Series.at_time
(time[,Â asof,Â axis])
Select values at particular time of day (e.g., 9:30AM).
Series.between_time
(start_time,Â end_time[,Â ...])
Select values between particular times of the day (e.g., 9:00-9:30 AM).
Accessors
#
pandas provides dtype-specific methods under various accessors.
These are separate namespaces within
Series
that only apply
to specific data types.
Series.str
alias of
StringMethods
Series.cat
alias of
CategoricalAccessor
Series.dt
alias of
CombinedDatetimelikeProperties
Series.sparse
alias of
SparseAccessor
DataFrame.sparse
alias of
SparseFrameAccessor
Index.str
alias of
StringMethods
Data Type
Accessor
Datetime, Timedelta, Period
dt
String
str
Categorical
cat
Sparse
sparse
Datetimelike properties
#
Series.dt
can be used to access the values of the series as
datetimelike and return several properties.
These can be accessed like
Series.dt.<property>
.
Datetime properties
#
Series.dt.date
Returns numpy array of python
datetime.date
objects.
Series.dt.time
Returns numpy array of
datetime.time
objects.
Series.dt.timetz
Returns numpy array of
datetime.time
objects with timezones.
Series.dt.year
The year of the datetime.
Series.dt.month
The month as January=1, December=12.
Series.dt.day
The day of the datetime.
Series.dt.hour
The hours of the datetime.
Series.dt.minute
The minutes of the datetime.
Series.dt.second
The seconds of the datetime.
Series.dt.microsecond
The microseconds of the datetime.
Series.dt.nanosecond
The nanoseconds of the datetime.
Series.dt.dayofweek
The day of the week with Monday=0, Sunday=6.
Series.dt.day_of_week
The day of the week with Monday=0, Sunday=6.
Series.dt.weekday
The day of the week with Monday=0, Sunday=6.
Series.dt.dayofyear
The ordinal day of the year.
Series.dt.day_of_year
The ordinal day of the year.
Series.dt.days_in_month
The number of days in the month.
Series.dt.quarter
The quarter of the date.
Series.dt.is_month_start
Indicates whether the date is the first day of the month.
Series.dt.is_month_end
Indicates whether the date is the last day of the month.
Series.dt.is_quarter_start
Indicator for whether the date is the first day of a quarter.
Series.dt.is_quarter_end
Indicator for whether the date is the last day of a quarter.
Series.dt.is_year_start
Indicate whether the date is the first day of a year.
Series.dt.is_year_end
Indicate whether the date is the last day of the year.
Series.dt.is_leap_year
Boolean indicator if the date belongs to a leap year.
Series.dt.daysinmonth
The number of days in the month.
Series.dt.days_in_month
The number of days in the month.
Series.dt.tz
Return the timezone.
Series.dt.freq
Return the frequency object for this PeriodArray.
Series.dt.unit
Datetime methods
#
Series.dt.isocalendar
()
Calculate year, week, and day according to the ISO 8601 standard.
Series.dt.to_period
(*args,Â **kwargs)
Cast to PeriodArray/PeriodIndex at a particular frequency.
Series.dt.to_pydatetime
()
(DEPRECATED) Return the data as an array of
datetime.datetime
objects.
Series.dt.tz_localize
(*args,Â **kwargs)
Localize tz-naive Datetime Array/Index to tz-aware Datetime Array/Index.
Series.dt.tz_convert
(*args,Â **kwargs)
Convert tz-aware Datetime Array/Index from one time zone to another.
Series.dt.normalize
(*args,Â **kwargs)
Convert times to midnight.
Series.dt.strftime
(*args,Â **kwargs)
Convert to Index using specified date_format.
Series.dt.round
(*args,Â **kwargs)
Perform round operation on the data to the specified
freq
.
Series.dt.floor
(*args,Â **kwargs)
Perform floor operation on the data to the specified
freq
.
Series.dt.ceil
(*args,Â **kwargs)
Perform ceil operation on the data to the specified
freq
.
Series.dt.month_name
(*args,Â **kwargs)
Return the month names with specified locale.
Series.dt.day_name
(*args,Â **kwargs)
Return the day names with specified locale.
Series.dt.as_unit
(*args,Â **kwargs)
Period properties
#
Series.dt.qyear
Series.dt.start_time
Get the Timestamp for the start of the period.
Series.dt.end_time
Get the Timestamp for the end of the period.
Timedelta properties
#
Series.dt.days
Number of days for each element.
Series.dt.seconds
Number of seconds (>= 0 and less than 1 day) for each element.
Series.dt.microseconds
Number of microseconds (>= 0 and less than 1 second) for each element.
Series.dt.nanoseconds
Number of nanoseconds (>= 0 and less than 1 microsecond) for each element.
Series.dt.components
Return a Dataframe of the components of the Timedeltas.
Series.dt.unit
Timedelta methods
#
Series.dt.to_pytimedelta
()
Return an array of native
datetime.timedelta
objects.
Series.dt.total_seconds
(*args,Â **kwargs)
Return total duration of each element expressed in seconds.
Series.dt.as_unit
(*args,Â **kwargs)
String handling
#
Series.str
can be used to access the values of the series as
strings and apply several methods to it. These can be accessed like
Series.str.<function/property>
.
Series.str.capitalize
()
Convert strings in the Series/Index to be capitalized.
Series.str.casefold
()
Convert strings in the Series/Index to be casefolded.
Series.str.cat
([others,Â sep,Â na_rep,Â join])
Concatenate strings in the Series/Index with given separator.
Series.str.center
(width[,Â fillchar])
Pad left and right side of strings in the Series/Index.
Series.str.contains
(pat[,Â case,Â flags,Â na,Â ...])
Test if pattern or regex is contained within a string of a Series or Index.
Series.str.count
(pat[,Â flags])
Count occurrences of pattern in each string of the Series/Index.
Series.str.decode
(encoding[,Â errors,Â dtype])
Decode character string in the Series/Index using indicated encoding.
Series.str.encode
(encoding[,Â errors])
Encode character string in the Series/Index using indicated encoding.
Series.str.endswith
(pat[,Â na])
Test if the end of each string element matches a pattern.
Series.str.extract
(pat[,Â flags,Â expand])
Extract capture groups in the regex
pat
as columns in a DataFrame.
Series.str.extractall
(pat[,Â flags])
Extract capture groups in the regex
pat
as columns in DataFrame.
Series.str.find
(sub[,Â start,Â end])
Return lowest indexes in each strings in the Series/Index.
Series.str.findall
(pat[,Â flags])
Find all occurrences of pattern or regular expression in the Series/Index.
Series.str.fullmatch
(pat[,Â case,Â flags,Â na])
Determine if each string entirely matches a regular expression.
Series.str.get
(i)
Extract element from each component at specified position or with specified key.
Series.str.index
(sub[,Â start,Â end])
Return lowest indexes in each string in Series/Index.
Series.str.join
(sep)
Join lists contained as elements in the Series/Index with passed delimiter.
Series.str.len
()
Compute the length of each element in the Series/Index.
Series.str.ljust
(width[,Â fillchar])
Pad right side of strings in the Series/Index.
Series.str.lower
()
Convert strings in the Series/Index to lowercase.
Series.str.lstrip
([to_strip])
Remove leading characters.
Series.str.match
(pat[,Â case,Â flags,Â na])
Determine if each string starts with a match of a regular expression.
Series.str.normalize
(form)
Return the Unicode normal form for the strings in the Series/Index.
Series.str.pad
(width[,Â side,Â fillchar])
Pad strings in the Series/Index up to width.
Series.str.partition
([sep,Â expand])
Split the string at the first occurrence of
sep
.
Series.str.removeprefix
(prefix)
Remove a prefix from an object series.
Series.str.removesuffix
(suffix)
Remove a suffix from an object series.
Series.str.repeat
(repeats)
Duplicate each string in the Series or Index.
Series.str.replace
(pat,Â repl[,Â n,Â case,Â ...])
Replace each occurrence of pattern/regex in the Series/Index.
Series.str.rfind
(sub[,Â start,Â end])
Return highest indexes in each strings in the Series/Index.
Series.str.rindex
(sub[,Â start,Â end])
Return highest indexes in each string in Series/Index.
Series.str.rjust
(width[,Â fillchar])
Pad left side of strings in the Series/Index.
Series.str.rpartition
([sep,Â expand])
Split the string at the last occurrence of
sep
.
Series.str.rstrip
([to_strip])
Remove trailing characters.
Series.str.slice
([start,Â stop,Â step])
Slice substrings from each element in the Series or Index.
Series.str.slice_replace
([start,Â stop,Â repl])
Replace a positional slice of a string with another value.
Series.str.split
([pat,Â n,Â expand,Â regex])
Split strings around given separator/delimiter.
Series.str.rsplit
([pat,Â n,Â expand])
Split strings around given separator/delimiter.
Series.str.startswith
(pat[,Â na])
Test if the start of each string element matches a pattern.
Series.str.strip
([to_strip])
Remove leading and trailing characters.
Series.str.swapcase
()
Convert strings in the Series/Index to be swapcased.
Series.str.title
()
Convert strings in the Series/Index to titlecase.
Series.str.translate
(table)
Map all characters in the string through the given mapping table.
Series.str.upper
()
Convert strings in the Series/Index to uppercase.
Series.str.wrap
(width,Â **kwargs)
Wrap strings in Series/Index at specified line width.
Series.str.zfill
(width)
Pad strings in the Series/Index by prepending '0' characters.
Series.str.isalnum
()
Check whether all characters in each string are alphanumeric.
Series.str.isalpha
()
Check whether all characters in each string are alphabetic.
Series.str.isdigit
()
Check whether all characters in each string are digits.
Series.str.isspace
()
Check whether all characters in each string are whitespace.
Series.str.islower
()
Check whether all characters in each string are lowercase.
Series.str.isupper
()
Check whether all characters in each string are uppercase.
Series.str.istitle
()
Check whether all characters in each string are titlecase.
Series.str.isnumeric
()
Check whether all characters in each string are numeric.
Series.str.isdecimal
()
Check whether all characters in each string are decimal.
Series.str.get_dummies
([sep])
Return DataFrame of dummy/indicator variables for Series.
Categorical accessor
#
Categorical-dtype specific methods and attributes are available under
the
Series.cat
accessor.
Series.cat.categories
The categories of this categorical.
Series.cat.ordered
Whether the categories have an ordered relationship.
Series.cat.codes
Return Series of codes as well as the index.
Series.cat.rename_categories
(*args,Â **kwargs)
Rename categories.
Series.cat.reorder_categories
(*args,Â **kwargs)
Reorder categories as specified in new_categories.
Series.cat.add_categories
(*args,Â **kwargs)
Add new categories.
Series.cat.remove_categories
(*args,Â **kwargs)
Remove the specified categories.
Series.cat.remove_unused_categories
(*args,Â ...)
Remove categories which are not used.
Series.cat.set_categories
(*args,Â **kwargs)
Set the categories to the specified new categories.
Series.cat.as_ordered
(*args,Â **kwargs)
Set the Categorical to be ordered.
Series.cat.as_unordered
(*args,Â **kwargs)
Set the Categorical to be unordered.
Sparse accessor
#
Sparse-dtype specific methods and attributes are provided under the
Series.sparse
accessor.
Series.sparse.npoints
The number of non-
fill_value
points.
Series.sparse.density
The percent of non-
fill_value
points, as decimal.
Series.sparse.fill_value
Elements in
data
that are
fill_value
are not stored.
Series.sparse.sp_values
An ndarray containing the non-
fill_value
values.
Series.sparse.from_coo
(A[,Â dense_index])
Create a Series with sparse values from a scipy.sparse.coo_matrix.
Series.sparse.to_coo
([row_levels,Â ...])
Create a scipy.sparse.coo_matrix from a Series with MultiIndex.
List accessor
#
Arrow list-dtype specific methods and attributes are provided under the
Series.list
accessor.
Series.list.flatten
()
Flatten list values.
Series.list.len
()
Return the length of each list in the Series.
Series.list.__getitem__
(key)
Index or slice lists in the Series.
Struct accessor
#
Arrow struct-dtype specific methods and attributes are provided under the
Series.struct
accessor.
Series.struct.dtypes
Return the dtype object of each child field of the struct.
Series.struct.field
(name_or_index)
Extract a child field of a struct as a Series.
Series.struct.explode
()
Extract all child fields of a struct as a DataFrame.
Flags
#
Flags refer to attributes of the pandas object. Properties of the dataset (like
the date is was recorded, the URL it was accessed from, etc.) should be stored
in
Series.attrs
.
Flags
(obj,Â *,Â allows_duplicate_labels)
Flags that apply to pandas objects.
Metadata
#
Series.attrs
is a dictionary for storing global metadata for this Series.
Warning
Series.attrs
is considered experimental and may change without warning.
Series.attrs
Dictionary of global attributes of this dataset.
Plotting
#
Series.plot
is both a callable method and a namespace attribute for
specific plotting methods of the form
Series.plot.<kind>
.
Series.plot
([kind,Â ax,Â figsize,Â ....])
Series plotting accessor and method
Series.plot.area
([x,Â y,Â stacked])
Draw a stacked area plot.
Series.plot.bar
([x,Â y])
Vertical bar plot.
Series.plot.barh
([x,Â y])
Make a horizontal bar plot.
Series.plot.box
([by])
Make a box plot of the DataFrame columns.
Series.plot.density
([bw_method,Â ind])
Generate Kernel Density Estimate plot using Gaussian kernels.
Series.plot.hist
([by,Â bins])
Draw one histogram of the DataFrame's columns.
Series.plot.kde
([bw_method,Â ind])
Generate Kernel Density Estimate plot using Gaussian kernels.
Series.plot.line
([x,Â y])
Plot Series or DataFrame as lines.
Series.plot.pie
(**kwargs)
Generate a pie plot.
Series.hist
([by,Â ax,Â grid,Â xlabelsize,Â ...])
Draw histogram of the input series using matplotlib.
Serialization / IO / conversion
#
Series.to_pickle
(path,Â *[,Â compression,Â ...])
Pickle (serialize) object to file.
Series.to_csv
([path_or_buf,Â sep,Â na_rep,Â ...])
Write object to a comma-separated values (csv) file.
Series.to_dict
(*[,Â into])
Convert Series to {label -> value} dict or dict-like object.
Series.to_excel
(excel_writer,Â *[,Â ...])
Write object to an Excel sheet.
Series.to_frame
([name])
Convert Series to DataFrame.
Series.to_xarray
()
Return an xarray object from the pandas object.
Series.to_hdf
(path_or_buf,Â *,Â key[,Â mode,Â ...])
Write the contained data to an HDF5 file using HDFStore.
Series.to_sql
(name,Â con,Â *[,Â schema,Â ...])
Write records stored in a DataFrame to a SQL database.
Series.to_json
([path_or_buf,Â orient,Â ...])
Convert the object to a JSON string.
Series.to_string
([buf,Â na_rep,Â ...])
Render a string representation of the Series.
Series.to_clipboard
(*[,Â excel,Â sep])
Copy object to the system clipboard.
Series.to_latex
([buf,Â columns,Â header,Â ...])
Render object to a LaTeX tabular, longtable, or nested table.
Series.to_markdown
([buf,Â mode,Â index,Â ...])
Print Series in Markdown-friendly format.
previous
pandas.api.interchange.from_dataframe
next
pandas.Series
On this page
Constructor
Attributes
Conversion
Indexing, iteration
Binary operator functions
Function application, GroupBy & window
Computations / descriptive stats
Reindexing / selection / label manipulation
Missing data handling
Reshaping, sorting
Combining / comparing / joining / merging
Time Series-related
Accessors
Datetimelike properties
Datetime properties
Datetime methods
Period properties
Timedelta properties
Timedelta methods
String handling
Categorical accessor
Sparse accessor
List accessor
Struct accessor
Flags
Metadata
Plotting
Serialization / IO / conversion
Show Source
&copy 2025, pandas via
NumFOCUS, Inc.
Hosted by
OVHcloud
.
Created using
Sphinx
8.1.3.
Built with the
PyData Sphinx Theme
0.14.4.