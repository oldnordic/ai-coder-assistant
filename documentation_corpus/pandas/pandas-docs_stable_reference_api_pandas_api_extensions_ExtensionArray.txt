pandas.api.extensions.ExtensionArray — pandas 2.3.0 documentation
Skip to main content
Back to top
Ctrl
+
K
Site Navigation
Getting started
User Guide
API reference
Development
Release notes
GitHub
Twitter
Mastodon
Site Navigation
Getting started
User Guide
API reference
Development
Release notes
GitHub
Twitter
Mastodon
Input/output
General functions
Series
DataFrame
pandas arrays, scalars, and data types
Index objects
Date offsets
Window
GroupBy
Resampling
Style
Plotting
Options and settings
Extensions
pandas.api.extensions.register_extension_dtype
pandas.api.extensions.register_dataframe_accessor
pandas.api.extensions.register_series_accessor
pandas.api.extensions.register_index_accessor
pandas.api.extensions.ExtensionDtype
pandas.api.extensions.ExtensionArray
pandas.api.extensions.ExtensionArray.dtype
pandas.api.extensions.ExtensionArray.nbytes
pandas.api.extensions.ExtensionArray.ndim
pandas.api.extensions.ExtensionArray.shape
pandas.api.extensions.ExtensionArray.argsort
pandas.api.extensions.ExtensionArray.astype
pandas.api.extensions.ExtensionArray.copy
pandas.api.extensions.ExtensionArray.dropna
pandas.api.extensions.ExtensionArray.duplicated
pandas.api.extensions.ExtensionArray.factorize
pandas.api.extensions.ExtensionArray.fillna
pandas.api.extensions.ExtensionArray.equals
pandas.api.extensions.ExtensionArray.insert
pandas.api.extensions.ExtensionArray.interpolate
pandas.api.extensions.ExtensionArray.isin
pandas.api.extensions.ExtensionArray.isna
pandas.api.extensions.ExtensionArray.ravel
pandas.api.extensions.ExtensionArray.repeat
pandas.api.extensions.ExtensionArray.searchsorted
pandas.api.extensions.ExtensionArray.shift
pandas.api.extensions.ExtensionArray.take
pandas.api.extensions.ExtensionArray.tolist
pandas.api.extensions.ExtensionArray.unique
pandas.api.extensions.ExtensionArray.view
pandas.api.extensions.ExtensionArray._accumulate
pandas.api.extensions.ExtensionArray._concat_same_type
pandas.api.extensions.ExtensionArray._explode
pandas.api.extensions.ExtensionArray._formatter
pandas.api.extensions.ExtensionArray._from_factorized
pandas.api.extensions.ExtensionArray._from_sequence
pandas.api.extensions.ExtensionArray._from_sequence_of_strings
pandas.api.extensions.ExtensionArray._hash_pandas_object
pandas.api.extensions.ExtensionArray._pad_or_backfill
pandas.api.extensions.ExtensionArray._reduce
pandas.api.extensions.ExtensionArray._values_for_argsort
pandas.api.extensions.ExtensionArray._values_for_factorize
pandas.arrays.NumpyExtensionArray
pandas.api.indexers.check_array_indexer
Testing
Missing values
API reference
Extensions
pandas.api.e...
pandas.api.extensions.ExtensionArray
#
class
pandas.api.extensions.
ExtensionArray
[source]
#
Abstract base class for custom 1-D array types.
pandas will recognize instances of this class as proper arrays
with a custom type and will not attempt to coerce them to objects. They
may be stored directly inside a
DataFrame
or
Series
.
Attributes
dtype
An instance of ExtensionDtype.
nbytes
The number of bytes needed to store this object in memory.
ndim
Extension Arrays are only allowed to be 1-dimensional.
shape
Return a tuple of the array dimensions.
Methods
argsort
(*[,Â ascending,Â kind,Â na_position])
Return the indices that would sort this array.
astype
(dtype[,Â copy])
Cast to a NumPy array or ExtensionArray with 'dtype'.
copy
()
Return a copy of the array.
dropna
()
Return ExtensionArray without NA values.
duplicated
([keep])
Return boolean ndarray denoting duplicate values.
factorize
([use_na_sentinel])
Encode the extension array as an enumerated type.
fillna
([value,Â method,Â limit,Â copy])
Fill NA/NaN values using the specified method.
equals
(other)
Return if another array is equivalent to this array.
insert
(loc,Â item)
Insert an item at the given position.
interpolate
(*,Â method,Â axis,Â index,Â limit,Â ...)
See DataFrame.interpolate.__doc__.
isin
(values)
Pointwise comparison for set containment in the given values.
isna
()
A 1-D array indicating if each value is missing.
ravel
([order])
Return a flattened view on this array.
repeat
(repeats[,Â axis])
Repeat elements of a ExtensionArray.
searchsorted
(value[,Â side,Â sorter])
Find indices where elements should be inserted to maintain order.
shift
([periods,Â fill_value])
Shift values by desired number.
take
(indices,Â *[,Â allow_fill,Â fill_value])
Take elements from an array.
tolist
()
Return a list of the values.
unique
()
Compute the ExtensionArray of unique values.
view
([dtype])
Return a view on the array.
_accumulate
(name,Â *[,Â skipna])
Return an ExtensionArray performing an accumulation operation.
_concat_same_type
(to_concat)
Concatenate multiple array of this dtype.
_explode
()
Transform each element of list-like to a row.
_formatter
([boxed])
Formatting function for scalar values.
_from_factorized
(values,Â original)
Reconstruct an ExtensionArray after factorization.
_from_sequence
(scalars,Â *[,Â dtype,Â copy])
Construct a new ExtensionArray from a sequence of scalars.
_from_sequence_of_strings
(strings,Â *[,Â ...])
Construct a new ExtensionArray from a sequence of strings.
_hash_pandas_object
(*,Â encoding,Â hash_key,Â ...)
Hook for hash_pandas_object.
_pad_or_backfill
(*,Â method[,Â limit,Â ...])
Pad or backfill values, used by Series/DataFrame ffill and bfill.
_reduce
(name,Â *[,Â skipna,Â keepdims])
Return a scalar result of performing the reduction operation.
_values_for_argsort
()
Return values for sorting.
_values_for_factorize
()
Return an array and missing value suitable for factorization.
Notes
The interface includes the following abstract methods that must be
implemented by subclasses:
_from_sequence
_from_factorized
__getitem__
__len__
__eq__
dtype
nbytes
isna
take
copy
_concat_same_type
interpolate
A default repr displaying the type, (truncated) data, length,
and dtype is provided. It can be customized or replaced by
by overriding:
__repr__ : A default repr for the ExtensionArray.
_formatter : Print scalars inside a Series or DataFrame.
Some methods require casting the ExtensionArray to an ndarray of Python
objects with
self.astype(object)
, which may be expensive. When
performance is a concern, we highly recommend overriding the following
methods:
fillna
_pad_or_backfill
dropna
unique
factorize / _values_for_factorize
argsort, argmax, argmin / _values_for_argsort
searchsorted
map
The remaining methods implemented on this class should be performant,
as they only compose abstract methods. Still, a more efficient
implementation may be available, and these methods can be overridden.
One can implement methods to handle array accumulations or reductions.
_accumulate
_reduce
One can implement methods to handle parsing from strings that will be used
in methods such as
pandas.io.parsers.read_csv
.
_from_sequence_of_strings
This class does not inherit from âabc.ABCMetaâ for performance reasons.
Methods and properties required by the interface raise
pandas.errors.AbstractMethodError
and no
register
method is
provided for registering virtual subclasses.
ExtensionArrays are limited to 1 dimension.
They may be backed by none, one, or many NumPy arrays. For example,
pandas.Categorical
is an extension array backed by two arrays,
one for codes and one for categories. An array of IPv6 address may
be backed by a NumPy structured array with two fields, one for the
lower 64 bits and one for the upper 64 bits. Or they may be backed
by some other storage type, like Python lists. Pandas makes no
assumptions on how the data are stored, just that it can be converted
to a NumPy array.
The ExtensionArray interface does not impose any rules on how this data
is stored. However, currently, the backing data cannot be stored in
attributes called
.values
or
._values
to ensure full compatibility
with pandas internals. But other names as
.data
,
._data
,
._items
, â¦ can be freely used.
If implementing NumPyâs
__array_ufunc__
interface, pandas expects
that
You defer by returning
NotImplemented
when any Series are present
in
inputs
. Pandas will extract the arrays and call the ufunc again.
You define a
_HANDLED_TYPES
tuple as an attribute on the class.
Pandas inspect this to determine whether the ufunc is valid for the
types present.
See
NumPy universal functions
for more.
By default, ExtensionArrays are not hashable.  Immutable subclasses may
override this behavior.
Examples
Please see the following:
pandas-dev/pandas
previous
pandas.api.extensions.ExtensionDtype
next
pandas.api.extensions.ExtensionArray.dtype
On this page
ExtensionArray
Show Source
&copy 2025, pandas via
NumFOCUS, Inc.
Hosted by
OVHcloud
.
Created using
Sphinx
8.1.3.
Built with the
PyData Sphinx Theme
0.14.4.