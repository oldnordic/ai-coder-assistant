Index objects — pandas 2.3.0 documentation
Skip to main content
Back to top
Ctrl
+
K
Site Navigation
Getting started
User Guide
API reference
Development
Release notes
GitHub
Twitter
Mastodon
Site Navigation
Getting started
User Guide
API reference
Development
Release notes
GitHub
Twitter
Mastodon
Input/output
General functions
Series
DataFrame
pandas arrays, scalars, and data types
Index objects
pandas.Index
pandas.Index.values
pandas.Index.is_monotonic_increasing
pandas.Index.is_monotonic_decreasing
pandas.Index.is_unique
pandas.Index.has_duplicates
pandas.Index.hasnans
pandas.Index.dtype
pandas.Index.inferred_type
pandas.Index.shape
pandas.Index.name
pandas.Index.names
pandas.Index.nbytes
pandas.Index.ndim
pandas.Index.size
pandas.Index.empty
pandas.Index.T
pandas.Index.memory_usage
pandas.Index.all
pandas.Index.any
pandas.Index.argmin
pandas.Index.argmax
pandas.Index.copy
pandas.Index.delete
pandas.Index.drop
pandas.Index.drop_duplicates
pandas.Index.duplicated
pandas.Index.equals
pandas.Index.factorize
pandas.Index.identical
pandas.Index.insert
pandas.Index.is_
pandas.Index.is_boolean
pandas.Index.is_categorical
pandas.Index.is_floating
pandas.Index.is_integer
pandas.Index.is_interval
pandas.Index.is_numeric
pandas.Index.is_object
pandas.Index.min
pandas.Index.max
pandas.Index.reindex
pandas.Index.rename
pandas.Index.repeat
pandas.Index.where
pandas.Index.take
pandas.Index.putmask
pandas.Index.unique
pandas.Index.nunique
pandas.Index.value_counts
pandas.Index.set_names
pandas.Index.droplevel
pandas.Index.fillna
pandas.Index.dropna
pandas.Index.isna
pandas.Index.notna
pandas.Index.astype
pandas.Index.item
pandas.Index.map
pandas.Index.ravel
pandas.Index.to_list
pandas.Index.to_series
pandas.Index.to_frame
pandas.Index.view
pandas.Index.argsort
pandas.Index.searchsorted
pandas.Index.sort_values
pandas.Index.shift
pandas.Index.append
pandas.Index.join
pandas.Index.intersection
pandas.Index.union
pandas.Index.difference
pandas.Index.symmetric_difference
pandas.Index.asof
pandas.Index.asof_locs
pandas.Index.get_indexer
pandas.Index.get_indexer_for
pandas.Index.get_indexer_non_unique
pandas.Index.get_level_values
pandas.Index.get_loc
pandas.Index.get_slice_bound
pandas.Index.isin
pandas.Index.slice_indexer
pandas.Index.slice_locs
pandas.RangeIndex
pandas.RangeIndex.start
pandas.RangeIndex.stop
pandas.RangeIndex.step
pandas.RangeIndex.from_range
pandas.CategoricalIndex
pandas.CategoricalIndex.codes
pandas.CategoricalIndex.categories
pandas.CategoricalIndex.ordered
pandas.CategoricalIndex.rename_categories
pandas.CategoricalIndex.reorder_categories
pandas.CategoricalIndex.add_categories
pandas.CategoricalIndex.remove_categories
pandas.CategoricalIndex.remove_unused_categories
pandas.CategoricalIndex.set_categories
pandas.CategoricalIndex.as_ordered
pandas.CategoricalIndex.as_unordered
pandas.CategoricalIndex.map
pandas.CategoricalIndex.equals
pandas.IntervalIndex
pandas.IntervalIndex.from_arrays
pandas.IntervalIndex.from_tuples
pandas.IntervalIndex.from_breaks
pandas.IntervalIndex.left
pandas.IntervalIndex.right
pandas.IntervalIndex.mid
pandas.IntervalIndex.closed
pandas.IntervalIndex.length
pandas.IntervalIndex.values
pandas.IntervalIndex.is_empty
pandas.IntervalIndex.is_non_overlapping_monotonic
pandas.IntervalIndex.is_overlapping
pandas.IntervalIndex.get_loc
pandas.IntervalIndex.get_indexer
pandas.IntervalIndex.set_closed
pandas.IntervalIndex.contains
pandas.IntervalIndex.overlaps
pandas.IntervalIndex.to_tuples
pandas.MultiIndex
pandas.MultiIndex.from_arrays
pandas.MultiIndex.from_tuples
pandas.MultiIndex.from_product
pandas.MultiIndex.from_frame
pandas.MultiIndex.names
pandas.MultiIndex.levels
pandas.MultiIndex.codes
pandas.MultiIndex.nlevels
pandas.MultiIndex.levshape
pandas.MultiIndex.dtypes
pandas.MultiIndex.set_levels
pandas.MultiIndex.set_codes
pandas.MultiIndex.to_flat_index
pandas.MultiIndex.to_frame
pandas.MultiIndex.sortlevel
pandas.MultiIndex.droplevel
pandas.MultiIndex.swaplevel
pandas.MultiIndex.reorder_levels
pandas.MultiIndex.remove_unused_levels
pandas.MultiIndex.drop
pandas.MultiIndex.copy
pandas.MultiIndex.append
pandas.MultiIndex.truncate
pandas.MultiIndex.get_loc
pandas.MultiIndex.get_locs
pandas.MultiIndex.get_loc_level
pandas.MultiIndex.get_indexer
pandas.MultiIndex.get_level_values
pandas.IndexSlice
pandas.DatetimeIndex
pandas.DatetimeIndex.year
pandas.DatetimeIndex.month
pandas.DatetimeIndex.day
pandas.DatetimeIndex.hour
pandas.DatetimeIndex.minute
pandas.DatetimeIndex.second
pandas.DatetimeIndex.microsecond
pandas.DatetimeIndex.nanosecond
pandas.DatetimeIndex.date
pandas.DatetimeIndex.time
pandas.DatetimeIndex.timetz
pandas.DatetimeIndex.dayofyear
pandas.DatetimeIndex.day_of_year
pandas.DatetimeIndex.dayofweek
pandas.DatetimeIndex.day_of_week
pandas.DatetimeIndex.weekday
pandas.DatetimeIndex.quarter
pandas.DatetimeIndex.tz
pandas.DatetimeIndex.freq
pandas.DatetimeIndex.freqstr
pandas.DatetimeIndex.is_month_start
pandas.DatetimeIndex.is_month_end
pandas.DatetimeIndex.is_quarter_start
pandas.DatetimeIndex.is_quarter_end
pandas.DatetimeIndex.is_year_start
pandas.DatetimeIndex.is_year_end
pandas.DatetimeIndex.is_leap_year
pandas.DatetimeIndex.inferred_freq
pandas.DatetimeIndex.indexer_at_time
pandas.DatetimeIndex.indexer_between_time
pandas.DatetimeIndex.normalize
pandas.DatetimeIndex.strftime
pandas.DatetimeIndex.snap
pandas.DatetimeIndex.tz_convert
pandas.DatetimeIndex.tz_localize
pandas.DatetimeIndex.round
pandas.DatetimeIndex.floor
pandas.DatetimeIndex.ceil
pandas.DatetimeIndex.month_name
pandas.DatetimeIndex.day_name
pandas.DatetimeIndex.as_unit
pandas.DatetimeIndex.to_period
pandas.DatetimeIndex.to_pydatetime
pandas.DatetimeIndex.to_series
pandas.DatetimeIndex.to_frame
pandas.DatetimeIndex.mean
pandas.DatetimeIndex.std
pandas.TimedeltaIndex
pandas.TimedeltaIndex.days
pandas.TimedeltaIndex.seconds
pandas.TimedeltaIndex.microseconds
pandas.TimedeltaIndex.nanoseconds
pandas.TimedeltaIndex.components
pandas.TimedeltaIndex.inferred_freq
pandas.TimedeltaIndex.as_unit
pandas.TimedeltaIndex.to_pytimedelta
pandas.TimedeltaIndex.to_series
pandas.TimedeltaIndex.round
pandas.TimedeltaIndex.floor
pandas.TimedeltaIndex.ceil
pandas.TimedeltaIndex.to_frame
pandas.TimedeltaIndex.mean
pandas.PeriodIndex
pandas.PeriodIndex.day
pandas.PeriodIndex.dayofweek
pandas.PeriodIndex.day_of_week
pandas.PeriodIndex.dayofyear
pandas.PeriodIndex.day_of_year
pandas.PeriodIndex.days_in_month
pandas.PeriodIndex.daysinmonth
pandas.PeriodIndex.end_time
pandas.PeriodIndex.freq
pandas.PeriodIndex.freqstr
pandas.PeriodIndex.hour
pandas.PeriodIndex.is_leap_year
pandas.PeriodIndex.minute
pandas.PeriodIndex.month
pandas.PeriodIndex.quarter
pandas.PeriodIndex.qyear
pandas.PeriodIndex.second
pandas.PeriodIndex.start_time
pandas.PeriodIndex.week
pandas.PeriodIndex.weekday
pandas.PeriodIndex.weekofyear
pandas.PeriodIndex.year
pandas.PeriodIndex.asfreq
pandas.PeriodIndex.strftime
pandas.PeriodIndex.to_timestamp
pandas.PeriodIndex.from_fields
pandas.PeriodIndex.from_ordinals
Date offsets
Window
GroupBy
Resampling
Style
Plotting
Options and settings
Extensions
Testing
Missing values
API reference
Index objects
Index objects
#
Index
#
Many of these methods or variants thereof are available on the objects
that contain an index (Series/DataFrame) and those should most likely be
used before calling these methods directly.
Index
([data,Â dtype,Â copy,Â name,Â tupleize_cols])
Immutable sequence used for indexing and alignment.
Properties
#
Index.values
Return an array representing the data in the Index.
Index.is_monotonic_increasing
Return a boolean if the values are equal or increasing.
Index.is_monotonic_decreasing
Return a boolean if the values are equal or decreasing.
Index.is_unique
Return if the index has unique values.
Index.has_duplicates
Check if the Index has duplicate values.
Index.hasnans
Return True if there are any NaNs.
Index.dtype
Return the dtype object of the underlying data.
Index.inferred_type
Return a string of the type inferred from the values.
Index.shape
Return a tuple of the shape of the underlying data.
Index.name
Return Index or MultiIndex name.
Index.names
Index.nbytes
Return the number of bytes in the underlying data.
Index.ndim
Number of dimensions of the underlying data, by definition 1.
Index.size
Return the number of elements in the underlying data.
Index.empty
Index.T
Return the transpose, which is by definition self.
Index.memory_usage
([deep])
Memory usage of the values.
Modifying and computations
#
Index.all
(*args,Â **kwargs)
Return whether all elements are Truthy.
Index.any
(*args,Â **kwargs)
Return whether any element is Truthy.
Index.argmin
([axis,Â skipna])
Return int position of the smallest value in the Series.
Index.argmax
([axis,Â skipna])
Return int position of the largest value in the Series.
Index.copy
([name,Â deep])
Make a copy of this object.
Index.delete
(loc)
Make new Index with passed location(-s) deleted.
Index.drop
(labels[,Â errors])
Make new Index with passed list of labels deleted.
Index.drop_duplicates
(*[,Â keep])
Return Index with duplicate values removed.
Index.duplicated
([keep])
Indicate duplicate index values.
Index.equals
(other)
Determine if two Index object are equal.
Index.factorize
([sort,Â use_na_sentinel])
Encode the object as an enumerated type or categorical variable.
Index.identical
(other)
Similar to equals, but checks that object attributes and types are also equal.
Index.insert
(loc,Â item)
Make new Index inserting new item at location.
Index.is_
(other)
More flexible, faster check like
is
but that works through views.
Index.is_boolean
()
(DEPRECATED) Check if the Index only consists of booleans.
Index.is_categorical
()
(DEPRECATED) Check if the Index holds categorical data.
Index.is_floating
()
(DEPRECATED) Check if the Index is a floating type.
Index.is_integer
()
(DEPRECATED) Check if the Index only consists of integers.
Index.is_interval
()
(DEPRECATED) Check if the Index holds Interval objects.
Index.is_numeric
()
(DEPRECATED) Check if the Index only consists of numeric data.
Index.is_object
()
(DEPRECATED) Check if the Index is of the object dtype.
Index.min
([axis,Â skipna])
Return the minimum value of the Index.
Index.max
([axis,Â skipna])
Return the maximum value of the Index.
Index.reindex
(target[,Â method,Â level,Â ...])
Create index with target's values.
Index.rename
(name,Â *[,Â inplace])
Alter Index or MultiIndex name.
Index.repeat
(repeats[,Â axis])
Repeat elements of a Index.
Index.where
(cond[,Â other])
Replace values where the condition is False.
Index.take
(indices[,Â axis,Â allow_fill,Â ...])
Return a new Index of the values selected by the indices.
Index.putmask
(mask,Â value)
Return a new Index of the values set with the mask.
Index.unique
([level])
Return unique values in the index.
Index.nunique
([dropna])
Return number of unique elements in the object.
Index.value_counts
([normalize,Â sort,Â ...])
Return a Series containing counts of unique values.
Compatibility with MultiIndex
#
Index.set_names
(names,Â *[,Â level,Â inplace])
Set Index or MultiIndex name.
Index.droplevel
([level])
Return index with requested level(s) removed.
Missing values
#
Index.fillna
([value,Â downcast])
Fill NA/NaN values with the specified value.
Index.dropna
([how])
Return Index without NA/NaN values.
Index.isna
()
Detect missing values.
Index.notna
()
Detect existing (non-missing) values.
Conversion
#
Index.astype
(dtype[,Â copy])
Create an Index with values cast to dtypes.
Index.item
()
Return the first element of the underlying data as a Python scalar.
Index.map
(mapper[,Â na_action])
Map values using an input mapping or function.
Index.ravel
([order])
Return a view on self.
Index.to_list
()
Return a list of the values.
Index.to_series
([index,Â name])
Create a Series with both index and values equal to the index keys.
Index.to_frame
([index,Â name])
Create a DataFrame with a column containing the Index.
Index.view
([cls])
Sorting
#
Index.argsort
(*args,Â **kwargs)
Return the integer indices that would sort the index.
Index.searchsorted
(value[,Â side,Â sorter])
Find indices where elements should be inserted to maintain order.
Index.sort_values
(*[,Â return_indexer,Â ...])
Return a sorted copy of the index.
Time-specific operations
#
Index.shift
([periods,Â freq])
Shift index by desired number of time frequency increments.
Combining / joining / set operations
#
Index.append
(other)
Append a collection of Index options together.
Index.join
(other,Â *[,Â how,Â level,Â ...])
Compute join_index and indexers to conform data structures to the new index.
Index.intersection
(other[,Â sort])
Form the intersection of two Index objects.
Index.union
(other[,Â sort])
Form the union of two Index objects.
Index.difference
(other[,Â sort])
Return a new Index with elements of index not in
other
.
Index.symmetric_difference
(other[,Â ...])
Compute the symmetric difference of two Index objects.
Selecting
#
Index.asof
(label)
Return the label from the index, or, if not present, the previous one.
Index.asof_locs
(where,Â mask)
Return the locations (indices) of labels in the index.
Index.get_indexer
(target[,Â method,Â limit,Â ...])
Compute indexer and mask for new index given the current index.
Index.get_indexer_for
(target)
Guaranteed return of an indexer even when non-unique.
Index.get_indexer_non_unique
(target)
Compute indexer and mask for new index given the current index.
Index.get_level_values
(level)
Return an Index of values for requested level.
Index.get_loc
(key)
Get integer location, slice or boolean mask for requested label.
Index.get_slice_bound
(label,Â side)
Calculate slice bound that corresponds to given label.
Index.isin
(values[,Â level])
Return a boolean array where the index values are in
values
.
Index.slice_indexer
([start,Â end,Â step])
Compute the slice indexer for input labels and step.
Index.slice_locs
([start,Â end,Â step])
Compute slice locations for input labels.
Numeric Index
#
RangeIndex
([start,Â stop,Â step,Â dtype,Â copy,Â ...])
Immutable Index implementing a monotonic integer range.
RangeIndex.start
The value of the
start
parameter (
0
if this was not supplied).
RangeIndex.stop
The value of the
stop
parameter.
RangeIndex.step
The value of the
step
parameter (
1
if this was not supplied).
RangeIndex.from_range
(data[,Â name,Â dtype])
Create
pandas.RangeIndex
from a
range
object.
CategoricalIndex
#
CategoricalIndex
([data,Â categories,Â ...])
Index based on an underlying
Categorical
.
Categorical components
#
CategoricalIndex.codes
The category codes of this categorical index.
CategoricalIndex.categories
The categories of this categorical.
CategoricalIndex.ordered
Whether the categories have an ordered relationship.
CategoricalIndex.rename_categories
(*args,Â ...)
Rename categories.
CategoricalIndex.reorder_categories
(*args,Â ...)
Reorder categories as specified in new_categories.
CategoricalIndex.add_categories
(*args,Â **kwargs)
Add new categories.
CategoricalIndex.remove_categories
(*args,Â ...)
Remove the specified categories.
CategoricalIndex.remove_unused_categories
(...)
Remove categories which are not used.
CategoricalIndex.set_categories
(*args,Â **kwargs)
Set the categories to the specified new categories.
CategoricalIndex.as_ordered
(*args,Â **kwargs)
Set the Categorical to be ordered.
CategoricalIndex.as_unordered
(*args,Â **kwargs)
Set the Categorical to be unordered.
Modifying and computations
#
CategoricalIndex.map
(mapper[,Â na_action])
Map values using input an input mapping or function.
CategoricalIndex.equals
(other)
Determine if two CategoricalIndex objects contain the same elements.
IntervalIndex
#
IntervalIndex
(data[,Â closed,Â dtype,Â copy,Â ...])
Immutable index of intervals that are closed on the same side.
IntervalIndex components
#
IntervalIndex.from_arrays
(left,Â right[,Â ...])
Construct from two arrays defining the left and right bounds.
IntervalIndex.from_tuples
(data[,Â closed,Â ...])
Construct an IntervalIndex from an array-like of tuples.
IntervalIndex.from_breaks
(breaks[,Â closed,Â ...])
Construct an IntervalIndex from an array of splits.
IntervalIndex.left
IntervalIndex.right
IntervalIndex.mid
IntervalIndex.closed
String describing the inclusive side the intervals.
IntervalIndex.length
IntervalIndex.values
Return an array representing the data in the Index.
IntervalIndex.is_empty
Indicates if an interval is empty, meaning it contains no points.
IntervalIndex.is_non_overlapping_monotonic
Return a boolean whether the IntervalArray is non-overlapping and monotonic.
IntervalIndex.is_overlapping
Return True if the IntervalIndex has overlapping intervals, else False.
IntervalIndex.get_loc
(key)
Get integer location, slice or boolean mask for requested label.
IntervalIndex.get_indexer
(target[,Â method,Â ...])
Compute indexer and mask for new index given the current index.
IntervalIndex.set_closed
(*args,Â **kwargs)
Return an identical IntervalArray closed on the specified side.
IntervalIndex.contains
(*args,Â **kwargs)
Check elementwise if the Intervals contain the value.
IntervalIndex.overlaps
(*args,Â **kwargs)
Check elementwise if an Interval overlaps the values in the IntervalArray.
IntervalIndex.to_tuples
(*args,Â **kwargs)
Return an ndarray (if self is IntervalArray) or Index (if self is IntervalIndex) of tuples of the form (left, right).
MultiIndex
#
MultiIndex
([levels,Â codes,Â sortorder,Â ...])
A multi-level, or hierarchical, index object for pandas objects.
MultiIndex constructors
#
MultiIndex.from_arrays
(arrays[,Â sortorder,Â ...])
Convert arrays to MultiIndex.
MultiIndex.from_tuples
(tuples[,Â sortorder,Â ...])
Convert list of tuples to MultiIndex.
MultiIndex.from_product
(iterables[,Â ...])
Make a MultiIndex from the cartesian product of multiple iterables.
MultiIndex.from_frame
(df[,Â sortorder,Â names])
Make a MultiIndex from a DataFrame.
MultiIndex properties
#
MultiIndex.names
Names of levels in MultiIndex.
MultiIndex.levels
Levels of the MultiIndex.
MultiIndex.codes
MultiIndex.nlevels
Integer number of levels in this MultiIndex.
MultiIndex.levshape
A tuple with the length of each level.
MultiIndex.dtypes
Return the dtypes as a Series for the underlying MultiIndex.
MultiIndex components
#
MultiIndex.set_levels
(levels,Â *[,Â level,Â ...])
Set new levels on MultiIndex.
MultiIndex.set_codes
(codes,Â *[,Â level,Â ...])
Set new codes on MultiIndex.
MultiIndex.to_flat_index
()
Convert a MultiIndex to an Index of Tuples containing the level values.
MultiIndex.to_frame
([index,Â name,Â ...])
Create a DataFrame with the levels of the MultiIndex as columns.
MultiIndex.sortlevel
([level,Â ascending,Â ...])
Sort MultiIndex at the requested level.
MultiIndex.droplevel
([level])
Return index with requested level(s) removed.
MultiIndex.swaplevel
([i,Â j])
Swap level i with level j.
MultiIndex.reorder_levels
(order)
Rearrange levels using input order.
MultiIndex.remove_unused_levels
()
Create new MultiIndex from current that removes unused levels.
MultiIndex.drop
(codes[,Â level,Â errors])
Make a new
pandas.MultiIndex
with the passed list of codes deleted.
MultiIndex.copy
([names,Â deep,Â name])
Make a copy of this object.
MultiIndex.append
(other)
Append a collection of Index options together.
MultiIndex.truncate
([before,Â after])
Slice index between two labels / tuples, return new MultiIndex.
MultiIndex selecting
#
MultiIndex.get_loc
(key)
Get location for a label or a tuple of labels.
MultiIndex.get_locs
(seq)
Get location for a sequence of labels.
MultiIndex.get_loc_level
(key[,Â level,Â ...])
Get location and sliced index for requested label(s)/level(s).
MultiIndex.get_indexer
(target[,Â method,Â ...])
Compute indexer and mask for new index given the current index.
MultiIndex.get_level_values
(level)
Return vector of label values for requested level.
IndexSlice
Create an object to more easily perform multi-index slicing.
DatetimeIndex
#
DatetimeIndex
([data,Â freq,Â tz,Â normalize,Â ...])
Immutable ndarray-like of datetime64 data.
Time/date components
#
DatetimeIndex.year
The year of the datetime.
DatetimeIndex.month
The month as January=1, December=12.
DatetimeIndex.day
The day of the datetime.
DatetimeIndex.hour
The hours of the datetime.
DatetimeIndex.minute
The minutes of the datetime.
DatetimeIndex.second
The seconds of the datetime.
DatetimeIndex.microsecond
The microseconds of the datetime.
DatetimeIndex.nanosecond
The nanoseconds of the datetime.
DatetimeIndex.date
Returns numpy array of python
datetime.date
objects.
DatetimeIndex.time
Returns numpy array of
datetime.time
objects.
DatetimeIndex.timetz
Returns numpy array of
datetime.time
objects with timezones.
DatetimeIndex.dayofyear
The ordinal day of the year.
DatetimeIndex.day_of_year
The ordinal day of the year.
DatetimeIndex.dayofweek
The day of the week with Monday=0, Sunday=6.
DatetimeIndex.day_of_week
The day of the week with Monday=0, Sunday=6.
DatetimeIndex.weekday
The day of the week with Monday=0, Sunday=6.
DatetimeIndex.quarter
The quarter of the date.
DatetimeIndex.tz
Return the timezone.
DatetimeIndex.freq
DatetimeIndex.freqstr
Return the frequency object as a string if it's set, otherwise None.
DatetimeIndex.is_month_start
Indicates whether the date is the first day of the month.
DatetimeIndex.is_month_end
Indicates whether the date is the last day of the month.
DatetimeIndex.is_quarter_start
Indicator for whether the date is the first day of a quarter.
DatetimeIndex.is_quarter_end
Indicator for whether the date is the last day of a quarter.
DatetimeIndex.is_year_start
Indicate whether the date is the first day of a year.
DatetimeIndex.is_year_end
Indicate whether the date is the last day of the year.
DatetimeIndex.is_leap_year
Boolean indicator if the date belongs to a leap year.
DatetimeIndex.inferred_freq
Tries to return a string representing a frequency generated by infer_freq.
Selecting
#
DatetimeIndex.indexer_at_time
(time[,Â asof])
Return index locations of values at particular time of day.
DatetimeIndex.indexer_between_time
(...[,Â ...])
Return index locations of values between particular times of day.
Time-specific operations
#
DatetimeIndex.normalize
(*args,Â **kwargs)
Convert times to midnight.
DatetimeIndex.strftime
(date_format)
Convert to Index using specified date_format.
DatetimeIndex.snap
([freq])
Snap time stamps to nearest occurring frequency.
DatetimeIndex.tz_convert
(tz)
Convert tz-aware Datetime Array/Index from one time zone to another.
DatetimeIndex.tz_localize
(tz[,Â ambiguous,Â ...])
Localize tz-naive Datetime Array/Index to tz-aware Datetime Array/Index.
DatetimeIndex.round
(*args,Â **kwargs)
Perform round operation on the data to the specified
freq
.
DatetimeIndex.floor
(*args,Â **kwargs)
Perform floor operation on the data to the specified
freq
.
DatetimeIndex.ceil
(*args,Â **kwargs)
Perform ceil operation on the data to the specified
freq
.
DatetimeIndex.month_name
(*args,Â **kwargs)
Return the month names with specified locale.
DatetimeIndex.day_name
(*args,Â **kwargs)
Return the day names with specified locale.
Conversion
#
DatetimeIndex.as_unit
(*args,Â **kwargs)
Convert to a dtype with the given unit resolution.
DatetimeIndex.to_period
(*args,Â **kwargs)
Cast to PeriodArray/PeriodIndex at a particular frequency.
DatetimeIndex.to_pydatetime
(*args,Â **kwargs)
Return an ndarray of
datetime.datetime
objects.
DatetimeIndex.to_series
([index,Â name])
Create a Series with both index and values equal to the index keys.
DatetimeIndex.to_frame
([index,Â name])
Create a DataFrame with a column containing the Index.
Methods
#
DatetimeIndex.mean
(*[,Â skipna,Â axis])
Return the mean value of the Array.
DatetimeIndex.std
(*args,Â **kwargs)
Return sample standard deviation over requested axis.
TimedeltaIndex
#
TimedeltaIndex
([data,Â unit,Â freq,Â closed,Â ...])
Immutable Index of timedelta64 data.
Components
#
TimedeltaIndex.days
Number of days for each element.
TimedeltaIndex.seconds
Number of seconds (>= 0 and less than 1 day) for each element.
TimedeltaIndex.microseconds
Number of microseconds (>= 0 and less than 1 second) for each element.
TimedeltaIndex.nanoseconds
Number of nanoseconds (>= 0 and less than 1 microsecond) for each element.
TimedeltaIndex.components
Return a DataFrame of the individual resolution components of the Timedeltas.
TimedeltaIndex.inferred_freq
Tries to return a string representing a frequency generated by infer_freq.
Conversion
#
TimedeltaIndex.as_unit
(unit)
Convert to a dtype with the given unit resolution.
TimedeltaIndex.to_pytimedelta
(*args,Â **kwargs)
Return an ndarray of datetime.timedelta objects.
TimedeltaIndex.to_series
([index,Â name])
Create a Series with both index and values equal to the index keys.
TimedeltaIndex.round
(*args,Â **kwargs)
Perform round operation on the data to the specified
freq
.
TimedeltaIndex.floor
(*args,Â **kwargs)
Perform floor operation on the data to the specified
freq
.
TimedeltaIndex.ceil
(*args,Â **kwargs)
Perform ceil operation on the data to the specified
freq
.
TimedeltaIndex.to_frame
([index,Â name])
Create a DataFrame with a column containing the Index.
Methods
#
TimedeltaIndex.mean
(*[,Â skipna,Â axis])
Return the mean value of the Array.
PeriodIndex
#
PeriodIndex
([data,Â ordinal,Â freq,Â dtype,Â ...])
Immutable ndarray holding ordinal values indicating regular periods in time.
Properties
#
PeriodIndex.day
The days of the period.
PeriodIndex.dayofweek
The day of the week with Monday=0, Sunday=6.
PeriodIndex.day_of_week
The day of the week with Monday=0, Sunday=6.
PeriodIndex.dayofyear
The ordinal day of the year.
PeriodIndex.day_of_year
The ordinal day of the year.
PeriodIndex.days_in_month
The number of days in the month.
PeriodIndex.daysinmonth
The number of days in the month.
PeriodIndex.end_time
Get the Timestamp for the end of the period.
PeriodIndex.freq
PeriodIndex.freqstr
Return the frequency object as a string if it's set, otherwise None.
PeriodIndex.hour
The hour of the period.
PeriodIndex.is_leap_year
Logical indicating if the date belongs to a leap year.
PeriodIndex.minute
The minute of the period.
PeriodIndex.month
The month as January=1, December=12.
PeriodIndex.quarter
The quarter of the date.
PeriodIndex.qyear
PeriodIndex.second
The second of the period.
PeriodIndex.start_time
Get the Timestamp for the start of the period.
PeriodIndex.week
The week ordinal of the year.
PeriodIndex.weekday
The day of the week with Monday=0, Sunday=6.
PeriodIndex.weekofyear
The week ordinal of the year.
PeriodIndex.year
The year of the period.
Methods
#
PeriodIndex.asfreq
([freq,Â how])
Convert the PeriodArray to the specified frequency
freq
.
PeriodIndex.strftime
(*args,Â **kwargs)
Convert to Index using specified date_format.
PeriodIndex.to_timestamp
([freq,Â how])
Cast to DatetimeArray/Index.
PeriodIndex.from_fields
(*[,Â year,Â quarter,Â ...])
PeriodIndex.from_ordinals
(ordinals,Â *,Â freq)
previous
pandas.api.types.is_scalar
next
pandas.Index
On this page
Index
Properties
Modifying and computations
Compatibility with MultiIndex
Missing values
Conversion
Sorting
Time-specific operations
Combining / joining / set operations
Selecting
Numeric Index
CategoricalIndex
Categorical components
Modifying and computations
IntervalIndex
IntervalIndex components
MultiIndex
MultiIndex constructors
MultiIndex properties
MultiIndex components
MultiIndex selecting
DatetimeIndex
Time/date components
Selecting
Time-specific operations
Conversion
Methods
TimedeltaIndex
Components
Conversion
Methods
PeriodIndex
Properties
Methods
Show Source
&copy 2025, pandas via
NumFOCUS, Inc.
Hosted by
OVHcloud
.
Created using
Sphinx
8.1.3.
Built with the
PyData Sphinx Theme
0.14.4.