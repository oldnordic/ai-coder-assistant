Indexing routines — NumPy v2.2 Manual
Skip to main content
Back to top
Ctrl
+
K
User Guide
API reference
Building from source
Development
Release notes
Learn
More
NEPs
Choose version
GitHub
User Guide
API reference
Building from source
Development
Release notes
Learn
NEPs
Choose version
GitHub
Section Navigation
NumPy’s module structure
Array objects
Universal functions (
ufunc
)
Routines and objects by topic
Constants
Array creation routines
Array manipulation routines
Bit-wise operations
String functionality
Datetime support functions
Data type routines
Mathematical functions with automatic domain
Floating point error handling
Exceptions and Warnings (
numpy.exceptions
)
Discrete Fourier Transform (
numpy.fft
)
Functional programming
Input and output
Indexing routines
numpy.c_
numpy.r_
numpy.s_
numpy.nonzero
numpy.where
numpy.indices
numpy.ix_
numpy.ogrid
numpy.ravel_multi_index
numpy.unravel_index
numpy.diag_indices
numpy.diag_indices_from
numpy.mask_indices
numpy.tril_indices
numpy.tril_indices_from
numpy.triu_indices
numpy.triu_indices_from
numpy.take
numpy.take_along_axis
numpy.choose
numpy.compress
numpy.diag
numpy.diagonal
numpy.select
numpy.place
numpy.put
numpy.put_along_axis
numpy.putmask
numpy.fill_diagonal
numpy.nditer
numpy.ndenumerate
numpy.ndindex
numpy.nested_iters
numpy.flatiter
numpy.iterable
Linear algebra (
numpy.linalg
)
Logic functions
Masked array operations
Mathematical functions
Miscellaneous routines
Polynomials
Random sampling (
numpy.random
)
Set routines
Sorting, searching, and counting
Statistics
Test support (
numpy.testing
)
Window functions
Typing (
numpy.typing
)
Packaging (
numpy.distutils
)
NumPy C-API
Array API standard compatibility
CPU/SIMD optimizations
Thread Safety
Global Configuration Options
NumPy security
Status of
numpy.distutils
and migration advice
numpy.distutils
user guide
NumPy and SWIG
NumPy reference
Routines and objects by topic
Indexing routines
Indexing routines
#
See also
Indexing on ndarrays
Generating index arrays
#
c_
Translates slice objects to concatenation along the second axis.
r_
Translates slice objects to concatenation along the first axis.
s_
A nicer way to build up index tuples for arrays.
nonzero
(a)
Return the indices of the elements that are non-zero.
where
(condition, [x, y], /)
Return elements chosen from
x
or
y
depending on
condition
.
indices
(dimensions[, dtype, sparse])
Return an array representing the indices of a grid.
ix_
(*args)
Construct an open mesh from multiple sequences.
ogrid
An instance which returns an open multi-dimensional "meshgrid".
ravel_multi_index
(multi_index, dims[, mode, ...])
Converts a tuple of index arrays into an array of flat indices, applying boundary modes to the multi-index.
unravel_index
(indices, shape[, order])
Converts a flat index or array of flat indices into a tuple of coordinate arrays.
diag_indices
(n[, ndim])
Return the indices to access the main diagonal of an array.
diag_indices_from
(arr)
Return the indices to access the main diagonal of an n-dimensional array.
mask_indices
(n, mask_func[, k])
Return the indices to access (n, n) arrays, given a masking function.
tril_indices
(n[, k, m])
Return the indices for the lower-triangle of an (n, m) array.
tril_indices_from
(arr[, k])
Return the indices for the lower-triangle of arr.
triu_indices
(n[, k, m])
Return the indices for the upper-triangle of an (n, m) array.
triu_indices_from
(arr[, k])
Return the indices for the upper-triangle of arr.
Indexing-like operations
#
take
(a, indices[, axis, out, mode])
Take elements from an array along an axis.
take_along_axis
(arr, indices, axis)
Take values from the input array by matching 1d index and data slices.
choose
(a, choices[, out, mode])
Construct an array from an index array and a list of arrays to choose from.
compress
(condition, a[, axis, out])
Return selected slices of an array along given axis.
diag
(v[, k])
Extract a diagonal or construct a diagonal array.
diagonal
(a[, offset, axis1, axis2])
Return specified diagonals.
select
(condlist, choicelist[, default])
Return an array drawn from elements in choicelist, depending on conditions.
Inserting data into arrays
#
place
(arr, mask, vals)
Change elements of an array based on conditional and input values.
put
(a, ind, v[, mode])
Replaces specified elements of an array with given values.
put_along_axis
(arr, indices, values, axis)
Put values into the destination array by matching 1d index and data slices.
putmask
(a, mask, values)
Changes elements of an array based on conditional and input values.
fill_diagonal
(a, val[, wrap])
Fill the main diagonal of the given array of any dimensionality.
Iterating over arrays
#
nditer
(op[, flags, op_flags, op_dtypes, ...])
Efficient multi-dimensional iterator object to iterate over arrays.
ndenumerate
(arr)
Multidimensional index iterator.
ndindex
(*shape)
An N-dimensional iterator object to index arrays.
nested_iters
(op, axes[, flags, op_flags, ...])
Create nditers for use in nested loops
flatiter
()
Flat iterator object to iterate over arrays.
iterable
(y)
Check whether or not an object can be iterated over.
previous
numpy.base_repr
next
numpy.c_
On this page
Generating index arrays
Indexing-like operations
Inserting data into arrays
Iterating over arrays
© Copyright 2008-2024, NumPy Developers.
Created using
Sphinx
7.2.6.
Built with the
PyData Sphinx Theme
0.16.0.